{"version":3,"file":"wtf-plugin-summary.js","sources":["../node_modules/compromise/builds/compromise.js","../src/template/index.js","../src/sentence/00-preProcess.js","../src/sentence/01-pivot.js","../src/sentence/02-byClause.js","../src/sentence/03-safeCuts.js","../src/sentence/04-hardCuts.js","../src/sentence/05-lastTry.js","../src/sentence/_isGood.js","../src/sentence/index.js","../src/category/regs.js","../src/category/01-choose.js","../src/category/02-change.js","../src/category/index.js","../src/index.js"],"sourcesContent":["/* compromise 13.11.4 MIT */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.nlp = factory());\n}(this, (function () { 'use strict';\n\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'.split(''); //generates a unique id for this term\n\n  function makeId$2(str) {\n    str = str || '_';\n    let text = str + '-';\n\n    for (let i = 0; i < 7; i++) {\n      text += chars[Math.floor(Math.random() * chars.length)];\n    }\n\n    return text;\n  }\n\n  var _id = makeId$2;\n\n  //approximate visual (not semantic or phonetic) relationship between unicode and ascii characters\n  //http://en.wikipedia.org/wiki/List_of_Unicode_characters\n  //https://docs.google.com/spreadsheet/ccc?key=0Ah46z755j7cVdFRDM1A2YVpwa1ZYWlpJM2pQZ003M0E\n\n  let compact = {\n    '!': '¡',\n    '?': '¿Ɂ',\n    '\"': '“”\"❝❞',\n    \"'\": '‘‛❛❜',\n    '-': '—–',\n    a: 'ªÀÁÂÃÄÅàáâãäåĀāĂăĄąǍǎǞǟǠǡǺǻȀȁȂȃȦȧȺΆΑΔΛάαλАадѦѧӐӑӒӓƛɅæ',\n    b: 'ßþƀƁƂƃƄƅɃΒβϐϦБВЪЬвъьѢѣҌҍ',\n    c: '¢©ÇçĆćĈĉĊċČčƆƇƈȻȼͻͼͽϲϹϽϾСсєҀҁҪҫ',\n    d: 'ÐĎďĐđƉƊȡƋƌǷ',\n    e: 'ÈÉÊËèéêëĒēĔĕĖėĘęĚěƎƏƐǝȄȅȆȇȨȩɆɇΈΕΞΣέεξϱϵ϶ЀЁЕЭеѐёҼҽҾҿӖӗӘәӚӛӬӭ',\n    f: 'ƑƒϜϝӺӻҒғſ',\n    g: 'ĜĝĞğĠġĢģƓǤǥǦǧǴǵ',\n    h: 'ĤĥĦħƕǶȞȟΉΗЂЊЋНнђћҢңҤҥҺһӉӊ',\n    I: 'ÌÍÎÏ',\n    i: 'ìíîïĨĩĪīĬĭĮįİıƖƗȈȉȊȋΊΐΪίιϊІЇії',\n    j: 'ĴĵǰȷɈɉϳЈј',\n    k: 'ĶķĸƘƙǨǩΚκЌЖКжкќҚқҜҝҞҟҠҡ',\n    l: 'ĹĺĻļĽľĿŀŁłƚƪǀǏǐȴȽΙӀӏ',\n    m: 'ΜϺϻМмӍӎ',\n    n: 'ÑñŃńŅņŇňŉŊŋƝƞǸǹȠȵΝΠήηϞЍИЙЛПийлпѝҊҋӅӆӢӣӤӥπ',\n    o: 'ÒÓÔÕÖØðòóôõöøŌōŎŏŐőƟƠơǑǒǪǫǬǭǾǿȌȍȎȏȪȫȬȭȮȯȰȱΌΘΟθοσόϕϘϙϬϭϴОФоѲѳӦӧӨөӪӫ',\n    p: 'ƤƿΡρϷϸϼРрҎҏÞ',\n    q: 'Ɋɋ',\n    r: 'ŔŕŖŗŘřƦȐȑȒȓɌɍЃГЯгяѓҐґ',\n    s: 'ŚśŜŝŞşŠšƧƨȘșȿЅѕ',\n    t: 'ŢţŤťŦŧƫƬƭƮȚțȶȾΓΤτϮТт',\n    u: 'µÙÚÛÜùúûüŨũŪūŬŭŮůŰűŲųƯưƱƲǓǔǕǖǗǘǙǚǛǜȔȕȖȗɄΰμυϋύ',\n    v: 'νѴѵѶѷ',\n    w: 'ŴŵƜωώϖϢϣШЩшщѡѿ',\n    x: '×ΧχϗϰХхҲҳӼӽӾӿ',\n    y: 'ÝýÿŶŷŸƳƴȲȳɎɏΎΥΫγψϒϓϔЎУучўѰѱҮүҰұӮӯӰӱӲӳ',\n    z: 'ŹźŻżŽžƩƵƶȤȥɀΖζ'\n  }; //decompress data into two hashes\n\n  let unicode = {};\n  Object.keys(compact).forEach(function (k) {\n    compact[k].split('').forEach(function (s) {\n      unicode[s] = k;\n    });\n  });\n\n  const killUnicode$3 = str => {\n    let chars = str.split('');\n    chars.forEach((s, i) => {\n      if (unicode[s]) {\n        chars[i] = unicode[s];\n      }\n    });\n    return chars.join('');\n  };\n\n  var unicode_1 = killUnicode$3; // console.log(killUnicode('bjŏȒk—Ɏó'));\n\n  const periodAcronym = /([A-Z]\\.)+[A-Z]?,?$/;\n  const oneLetterAcronym$1 = /^[A-Z]\\.,?$/;\n  const noPeriodAcronym = /[A-Z]{2,}('s|,)?$/;\n  const lowerCaseAcronym = /([a-z]\\.)+[a-z]\\.?$/;\n\n  const isAcronym$4 = function (str) {\n    //like N.D.A\n    if (periodAcronym.test(str) === true) {\n      return true;\n    } //like c.e.o\n\n\n    if (lowerCaseAcronym.test(str) === true) {\n      return true;\n    } //like 'F.'\n\n\n    if (oneLetterAcronym$1.test(str) === true) {\n      return true;\n    } //like NDA\n\n\n    if (noPeriodAcronym.test(str) === true) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var isAcronym_1 = isAcronym$4;\n\n  const killUnicode$2 = unicode_1;\n  const isAcronym$3 = isAcronym_1;\n  const hasSlash$1 = /[a-z\\u00C0-\\u00FF] ?\\/ ?[a-z\\u00C0-\\u00FF]/;\n  /** some basic operations on a string to reduce noise */\n\n  const clean = function (str) {\n    str = str || '';\n    str = str.toLowerCase();\n    str = str.trim();\n    let original = str; //(very) rough ASCII transliteration -  bjŏrk -> bjork\n\n    str = killUnicode$2(str); //rough handling of slashes - 'see/saw'\n\n    if (hasSlash$1.test(str) === true) {\n      str = str.replace(/\\/.*/, '');\n    } //#tags, @mentions\n\n\n    str = str.replace(/^[#@]/, ''); //punctuation\n\n    str = str.replace(/[,;.!?]+$/, ''); // coerce single curly quotes\n\n    str = str.replace(/[\\u0027\\u0060\\u00B4\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035\\u2039\\u203A]+/g, \"'\"); // coerce double curly quotes\n\n    str = str.replace(/[\\u0022\\u00AB\\u00BB\\u201C\\u201D\\u201E\\u201F\\u2033\\u2034\\u2036\\u2037\\u2E42\\u301D\\u301E\\u301F\\uFF02]+/g, '\"'); //coerce Unicode ellipses\n\n    str = str.replace(/\\u2026/g, '...'); //en-dash\n\n    str = str.replace(/\\u2013/g, '-'); //lookin'->looking (make it easier for conjugation)\n\n    str = str.replace(/([aeiou][ktrp])in$/, '$1ing'); //turn re-enactment to reenactment\n\n    if (/^(re|un)-?[^aeiou]./.test(str) === true) {\n      str = str.replace('-', '');\n    } //compact acronyms\n\n\n    if (isAcronym$3(str)) {\n      str = str.replace(/\\./g, '');\n    } //strip leading & trailing grammatical punctuation\n\n\n    if (/^[:;]/.test(str) === false) {\n      str = str.replace(/\\.{3,}$/g, '');\n      str = str.replace(/[\",\\.!:;\\?\\)]+$/g, '');\n      str = str.replace(/^['\"\\(]+/g, '');\n    } // remove zero-width characters\n\n\n    str = str.replace(/[\\u200B-\\u200D\\uFEFF]/g, ''); //do this again..\n\n    str = str.trim(); //oh shucks,\n\n    if (str === '') {\n      str = original;\n    } //nice-numbers\n\n\n    str = str.replace(/([0-9]),([0-9])/g, '$1$2');\n    return str;\n  };\n\n  var clean_1 = clean; // console.log(normalize('Dr. V Cooper'));\n\n  /** reduced is one step further than clean */\n\n  const reduced = function (str) {\n    // remove apostrophes\n    str = str.replace(/['’]s$/, '');\n    str = str.replace(/s['’]$/, 's');\n    return str;\n  };\n\n  var reduce$1 = reduced;\n\n  const normalize = clean_1;\n  const reduce = reduce$1; // basically, tokenize for terms.\n  //all punctuation marks, from https://en.wikipedia.org/wiki/Punctuation\n  //we have slightly different rules for start/end - like #hashtags.\n\n  const startings = /^[ \\n\\t\\.\\[\\](){}⟨⟩:,،、‒–—―…!‹›«»‐\\-?‘’;\\/⁄·&*•^†‡°¡¿※№÷×ºª%‰+−=‱¶′″‴§~\\|‖¦©℗®℠™¤₳฿\\u0022\\uFF02\\u0027\\u201C\\u201F\\u201B\\u201E\\u2E42\\u201A\\u2035\\u2036\\u2037\\u301D\\u0060\\u301F]+/;\n  const endings = /[ \\n\\t\\.'\\[\\](){}⟨⟩:,،、‒–—―…!‹›«»‐\\-?‘’;\\/⁄·&*@•^†‡°¡¿※#№÷×ºª‰+−=‱¶′″‴§~\\|‖¦©℗®℠™¤₳฿\\u0022\\uFF02\\u201D\\u00B4\\u301E]+$/; //money = ₵¢₡₢$₫₯֏₠€ƒ₣₲₴₭₺₾ℳ₥₦₧₱₰£៛₽₹₨₪৳₸₮₩¥\n\n  const hasSlash = /\\//;\n  const hasApostrophe = /['’]/;\n  const hasAcronym = /^[a-z]\\.([a-z]\\.)+/i;\n  const minusNumber = /^[-+\\.][0-9]/;\n  const shortYear = /^'[0-9]{2}/;\n  /** turn given text into a parsed-up object\n   * seperate the 'meat' of the word from the whitespace+punctuation\n   */\n\n  const parseTerm$1 = str => {\n    let original = str;\n    let pre = '';\n    let post = '';\n    str = str.replace(startings, found => {\n      pre = found; // support '-40'\n\n      if ((pre === '-' || pre === '+' || pre === '.') && minusNumber.test(str)) {\n        pre = '';\n        return found;\n      } // support years like '97\n\n\n      if (pre === `'` && shortYear.test(str)) {\n        pre = '';\n        return found;\n      }\n\n      return '';\n    });\n    str = str.replace(endings, found => {\n      post = found; // keep s-apostrophe - \"flanders'\" or \"chillin'\"\n\n      if (hasApostrophe.test(found) && /[sn]['’]$/.test(original) && hasApostrophe.test(pre) === false) {\n        post = post.replace(hasApostrophe, '');\n        return `'`;\n      } //keep end-period in acronym\n\n\n      if (hasAcronym.test(str) === true) {\n        post = post.replace(/\\./, '');\n        return '.';\n      }\n\n      return '';\n    }); //we went too far..\n\n    if (str === '') {\n      // do a very mild parse, and hope for the best.\n      original = original.replace(/ *$/, after => {\n        post = after || '';\n        return '';\n      });\n      str = original;\n      pre = '';\n      post = post;\n    } // create the various forms of our text,\n\n\n    let clean = normalize(str);\n    const parsed = {\n      text: str,\n      clean: clean,\n      reduced: reduce(clean),\n      pre: pre,\n      post: post\n    }; // support aliases for slashes\n\n    if (hasSlash.test(str)) {\n      str.split(hasSlash).forEach(word => {\n        parsed.alias = parsed.alias || {};\n        parsed.alias[word.trim()] = true;\n      });\n    }\n\n    return parsed;\n  };\n\n  var parse$3 = parseTerm$1;\n\n  var _01Case = {};\n\n  (function (exports) {\n    const titleCase = /^[A-Z][a-z'\\u00C0-\\u00FF]/;\n    const upperCase = /^[A-Z]+s?$/;\n    /** convert all text to uppercase */\n\n    exports.toUpperCase = function () {\n      this.text = this.text.toUpperCase();\n      return this;\n    };\n    /** convert all text to lowercase */\n\n\n    exports.toLowerCase = function () {\n      this.text = this.text.toLowerCase();\n      return this;\n    };\n    /** only set the first letter to uppercase\n     * leave any existing uppercase alone\n     */\n\n\n    exports.toTitleCase = function () {\n      this.text = this.text.replace(/^ *[a-z\\u00C0-\\u00FF]/, x => x.toUpperCase()); //support unicode?\n\n      return this;\n    };\n    /** if all letters are uppercase */\n\n\n    exports.isUpperCase = function () {\n      return upperCase.test(this.text);\n    };\n    /** if the first letter is uppercase, and the rest are lowercase */\n\n\n    exports.isTitleCase = function () {\n      return titleCase.test(this.text);\n    };\n\n    exports.titleCase = exports.isTitleCase;\n  })(_01Case);\n\n  var _02Punctuation$1 = {};\n\n  (function (exports) {\n    // these methods are called with '@hasComma' in the match syntax\n    // various unicode quotation-mark formats\n    const startQuote = /(\\u0022|\\uFF02|\\u0027|\\u201C|\\u2018|\\u201F|\\u201B|\\u201E|\\u2E42|\\u201A|\\u00AB|\\u2039|\\u2035|\\u2036|\\u2037|\\u301D|\\u0060|\\u301F)/;\n    const endQuote = /(\\u0022|\\uFF02|\\u0027|\\u201D|\\u2019|\\u201D|\\u2019|\\u201D|\\u201D|\\u2019|\\u00BB|\\u203A|\\u2032|\\u2033|\\u2034|\\u301E|\\u00B4|\\u301E)/;\n    /** search the term's 'post' punctuation  */\n\n    exports.hasPost = function (punct) {\n      return this.post.indexOf(punct) !== -1;\n    };\n    /** search the term's 'pre' punctuation  */\n\n\n    exports.hasPre = function (punct) {\n      return this.pre.indexOf(punct) !== -1;\n    };\n    /** does it have a quotation symbol?  */\n\n\n    exports.hasQuote = function () {\n      return startQuote.test(this.pre) || endQuote.test(this.post);\n    };\n\n    exports.hasQuotation = exports.hasQuote;\n    /** does it have a comma?  */\n\n    exports.hasComma = function () {\n      return this.hasPost(',');\n    };\n    /** does it end in a period? */\n\n\n    exports.hasPeriod = function () {\n      return this.hasPost('.') === true && this.hasPost('...') === false;\n    };\n    /** does it end in an exclamation */\n\n\n    exports.hasExclamation = function () {\n      return this.hasPost('!');\n    };\n    /** does it end with a question mark? */\n\n\n    exports.hasQuestionMark = function () {\n      return this.hasPost('?') || this.hasPost('¿');\n    };\n    /** is there a ... at the end? */\n\n\n    exports.hasEllipses = function () {\n      return this.hasPost('..') || this.hasPost('…') || this.hasPre('..') || this.hasPre('…');\n    };\n    /** is there a semicolon after this word? */\n\n\n    exports.hasSemicolon = function () {\n      return this.hasPost(';');\n    };\n    /** is there a slash '/' in this word? */\n\n\n    exports.hasSlash = function () {\n      return /\\//.test(this.text);\n    };\n    /** a hyphen connects two words like-this */\n\n\n    exports.hasHyphen = function () {\n      const hyphen = /^(-|–|—)$/;\n      return hyphen.test(this.post) || hyphen.test(this.pre);\n    };\n    /** a dash separates words - like that */\n\n\n    exports.hasDash = function () {\n      const hyphen = / (-|–|—) /;\n      return hyphen.test(this.post) || hyphen.test(this.pre);\n    };\n    /** is it multiple words combinded */\n\n\n    exports.hasContraction = function () {\n      return Boolean(this.implicit);\n    };\n    /** try to sensibly put this punctuation mark into the term */\n\n\n    exports.addPunctuation = function (punct) {\n      // dont add doubles\n      if (punct === ',' || punct === ';') {\n        this.post = this.post.replace(punct, '');\n      }\n\n      this.post = punct + this.post;\n      return this;\n    };\n  })(_02Punctuation$1);\n\n  var _03Misc = {};\n\n  // Based on  tad-lispy /node-damerau-levenshtein\n  // https://github.com/tad-lispy/node-damerau-levenshtein/blob/master/index.js\n  // count steps (insertions, deletions, substitutions, or transpositions)\n\n  const editDistance = function (strA, strB) {\n    let aLength = strA.length,\n        bLength = strB.length; // fail-fast\n\n    if (aLength === 0) {\n      return bLength;\n    }\n\n    if (bLength === 0) {\n      return aLength;\n    } // If the limit is not defined it will be calculate from this and that args.\n\n\n    let limit = (bLength > aLength ? bLength : aLength) + 1;\n\n    if (Math.abs(aLength - bLength) > (limit || 100)) {\n      return limit || 100;\n    } // init the array\n\n\n    let matrix = [];\n\n    for (let i = 0; i < limit; i++) {\n      matrix[i] = [i];\n      matrix[i].length = limit;\n    }\n\n    for (let i = 0; i < limit; i++) {\n      matrix[0][i] = i;\n    } // Calculate matrix.\n\n\n    let j, a_index, b_index, cost, min, t;\n\n    for (let i = 1; i <= aLength; ++i) {\n      a_index = strA[i - 1];\n\n      for (j = 1; j <= bLength; ++j) {\n        // Check the jagged distance total so far\n        if (i === j && matrix[i][j] > 4) {\n          return aLength;\n        }\n\n        b_index = strB[j - 1];\n        cost = a_index === b_index ? 0 : 1; // Step 5\n        // Calculate the minimum (much faster than Math.min(...)).\n\n        min = matrix[i - 1][j] + 1; // Deletion.\n\n        if ((t = matrix[i][j - 1] + 1) < min) min = t; // Insertion.\n\n        if ((t = matrix[i - 1][j - 1] + cost) < min) min = t; // Substitution.\n        // Update matrix.\n\n        let shouldUpdate = i > 1 && j > 1 && a_index === strB[j - 2] && strA[i - 2] === b_index && (t = matrix[i - 2][j - 2] + cost) < min;\n\n        if (shouldUpdate) {\n          matrix[i][j] = t;\n        } else {\n          matrix[i][j] = min;\n        }\n      }\n    } // return number of steps\n\n\n    return matrix[aLength][bLength];\n  }; // score similarity by from 0-1 (steps/length)\n\n\n  const fuzzyMatch = function (strA, strB, minLength = 3) {\n    if (strA === strB) {\n      return 1;\n    } //don't even bother on tiny strings\n\n\n    if (strA.length < minLength || strB.length < minLength) {\n      return 0;\n    }\n\n    const steps = editDistance(strA, strB);\n    let length = Math.max(strA.length, strB.length);\n    let relative = length === 0 ? 0 : steps / length;\n    let similarity = 1 - relative;\n    return similarity;\n  };\n\n  var _fuzzy = fuzzyMatch; // console.log(fuzzyMatch('test', 'test')) //exact match\n\n  const fuzzy = _fuzzy; //declare it up here\n\n  let wrapMatch = function () {};\n  /** ignore optional/greedy logic, straight-up term match*/\n\n\n  const doesMatch$1 = function (t, reg, index, length) {\n    // support id matches\n    if (reg.id === t.id) {\n      return true;\n    } // support '.'\n\n\n    if (reg.anything === true) {\n      return true;\n    } // support '^' (in parentheses)\n\n\n    if (reg.start === true && index !== 0) {\n      return false;\n    } // support '$' (in parentheses)\n\n\n    if (reg.end === true && index !== length - 1) {\n      return false;\n    } //support a text match\n\n\n    if (reg.word !== undefined) {\n      //match contractions\n      if (t.implicit !== null && t.implicit === reg.word) {\n        return true;\n      } // term aliases for slashes and things\n\n\n      if (t.alias !== undefined && t.alias.hasOwnProperty(reg.word)) {\n        return true;\n      } // support ~ match\n\n\n      if (reg.soft === true && reg.word === t.root) {\n        return true;\n      } // support fuzzy match param\n\n\n      if (reg.fuzzy !== undefined) {\n        let score = fuzzy(reg.word, t.reduced);\n\n        if (score > reg.fuzzy) {\n          return true;\n        } // support fuzzy + soft match\n\n\n        if (reg.soft === true) {\n          score = fuzzy(reg.word, t.root);\n\n          if (score > reg.fuzzy) {\n            return true;\n          }\n        }\n      } //match either .clean or .text\n\n\n      return reg.word === t.clean || reg.word === t.text || reg.word === t.reduced;\n    } //support #Tag\n\n\n    if (reg.tag !== undefined) {\n      return t.tags[reg.tag] === true;\n    } //support @method\n\n\n    if (reg.method !== undefined) {\n      if (typeof t[reg.method] === 'function' && t[reg.method]() === true) {\n        return true;\n      }\n\n      return false;\n    } //support /reg/\n\n\n    if (reg.regex !== undefined) {\n      return reg.regex.test(t.clean);\n    } // support optimized (one|two)\n\n\n    if (reg.fastOr !== undefined) {\n      if (t.implicit && reg.fastOr.hasOwnProperty(t.implicit) === true) {\n        return true;\n      }\n\n      return reg.fastOr.hasOwnProperty(t.reduced) || reg.fastOr.hasOwnProperty(t.text);\n    } //support slower (one|two)\n\n\n    if (reg.choices !== undefined) {\n      // try to support && operator\n      if (reg.operator === 'and') {\n        // must match them all\n        return reg.choices.every(r => wrapMatch(t, r, index, length));\n      } // or must match one\n\n\n      return reg.choices.some(r => wrapMatch(t, r, index, length));\n    }\n\n    return false;\n  }; // wrap result for !negative match logic\n\n\n  wrapMatch = function (t, reg, index, length) {\n    let result = doesMatch$1(t, reg, index, length);\n\n    if (reg.negative === true) {\n      return !result;\n    }\n\n    return result;\n  };\n\n  var _doesMatch = wrapMatch;\n\n  const doesMatch = _doesMatch;\n  const isAcronym$2 = isAcronym_1; // these tags aren't juicy-enough\n\n  const boring = {};\n  /** check a match object against this term */\n\n  _03Misc.doesMatch = function (reg, index, length) {\n    return doesMatch(this, reg, index, length);\n  };\n  /** does this term look like an acronym? */\n\n\n  _03Misc.isAcronym = function () {\n    return isAcronym$2(this.text);\n  };\n  /** is this term implied by a contraction? */\n\n\n  _03Misc.isImplicit = function () {\n    return this.text === '' && Boolean(this.implicit);\n  };\n  /** does the term have at least one good tag? */\n\n\n  _03Misc.isKnown = function () {\n    return Object.keys(this.tags).some(t => boring[t] !== true);\n  };\n  /** cache the root property of the term */\n\n\n  _03Misc.setRoot = function (world) {\n    let transform = world.transforms;\n    let str = this.implicit || this.clean;\n\n    if (this.tags.Plural) {\n      str = transform.toSingular(str, world);\n    }\n\n    if (this.tags.Verb && !this.tags.Negative && !this.tags.Infinitive) {\n      let tense = null;\n\n      if (this.tags.PastTense) {\n        tense = 'PastTense';\n      } else if (this.tags.Gerund) {\n        tense = 'Gerund';\n      } else if (this.tags.PresentTense) {\n        tense = 'PresentTense';\n      } else if (this.tags.Participle) {\n        tense = 'Participle';\n      } else if (this.tags.Actor) {\n        tense = 'Actor';\n      }\n\n      str = transform.toInfinitive(str, world, tense);\n    }\n\n    this.root = str;\n  };\n\n  var _04Text = {};\n\n  const killUnicode$1 = unicode_1;\n  const hasSpace$1 = /[\\s-]/;\n  const isUpperCase = /^[A-Z-]+$/; // const titleCase = str => {\n  //   return str.charAt(0).toUpperCase() + str.substr(1)\n  // }\n\n  /** return various text formats of this term */\n\n  _04Text.textOut = function (options, showPre, showPost) {\n    options = options || {};\n    let word = this.text;\n    let before = this.pre;\n    let after = this.post; // -word-\n\n    if (options.reduced === true) {\n      word = this.reduced || '';\n    }\n\n    if (options.root === true) {\n      word = this.root || '';\n    }\n\n    if (options.implicit === true && this.implicit) {\n      word = this.implicit || '';\n    }\n\n    if (options.normal === true) {\n      word = this.clean || this.text || '';\n    }\n\n    if (options.root === true) {\n      word = this.root || this.reduced || '';\n    }\n\n    if (options.unicode === true) {\n      word = killUnicode$1(word);\n    } // cleanup case\n\n\n    if (options.titlecase === true) {\n      if (this.tags.ProperNoun && !this.titleCase()) ; else if (this.tags.Acronym) {\n        word = word.toUpperCase(); //uppercase acronyms\n      } else if (isUpperCase.test(word) && !this.tags.Acronym) {\n        // lowercase everything else\n        word = word.toLowerCase();\n      }\n    }\n\n    if (options.lowercase === true) {\n      word = word.toLowerCase();\n    } // remove the '.'s from 'F.B.I.' (safely)\n\n\n    if (options.acronyms === true && this.tags.Acronym) {\n      word = word.replace(/\\./g, '');\n    } // -before/after-\n\n\n    if (options.whitespace === true || options.root === true) {\n      before = '';\n      after = ' ';\n\n      if ((hasSpace$1.test(this.post) === false || options.last) && !this.implicit) {\n        after = '';\n      }\n    }\n\n    if (options.punctuation === true && !options.root) {\n      //normalized end punctuation\n      if (this.hasPost('.') === true) {\n        after = '.' + after;\n      } else if (this.hasPost('?') === true) {\n        after = '?' + after;\n      } else if (this.hasPost('!') === true) {\n        after = '!' + after;\n      } else if (this.hasPost(',') === true) {\n        after = ',' + after;\n      } else if (this.hasEllipses() === true) {\n        after = '...' + after;\n      }\n    }\n\n    if (showPre !== true) {\n      before = '';\n    }\n\n    if (showPost !== true) {\n      // let keep = after.match(/\\)/) || ''\n      after = ''; //keep //after.replace(/[ .?!,]+/, '')\n    } // remove the '.' from 'Mrs.' (safely)\n\n\n    if (options.abbreviations === true && this.tags.Abbreviation) {\n      after = after.replace(/^\\./, '');\n    }\n\n    return before + word + after;\n  };\n\n  var _05Json$1 = {};\n\n  const boringTags = {\n    Auxiliary: 1,\n    Possessive: 1\n  };\n  /** a subjective ranking of tags kinda tfidf-based */\n\n  const rankTags$1 = function (term, world) {\n    let tags = Object.keys(term.tags);\n    const tagSet = world.tags;\n    tags = tags.sort((a, b) => {\n      //bury the tags we dont want\n      if (boringTags[b] || !tagSet[b]) {\n        return -1;\n      } // unknown tags are interesting\n\n\n      if (!tagSet[b]) {\n        return 1;\n      }\n\n      if (!tagSet[a]) {\n        return 0;\n      } // then sort by #of parent tags (most-specific tags first)\n\n\n      if (tagSet[a].lineage.length > tagSet[b].lineage.length) {\n        return 1;\n      }\n\n      if (tagSet[a].isA.length > tagSet[b].isA.length) {\n        return -1;\n      }\n\n      return 0;\n    });\n    return tags;\n  };\n\n  var _bestTag = rankTags$1;\n\n  const rankTags = _bestTag;\n  const jsonDefault = {\n    text: true,\n    tags: true,\n    implicit: true,\n    whitespace: true,\n    clean: false,\n    id: false,\n    index: false,\n    offset: false,\n    bestTag: false\n  };\n  /** return various metadata for this term */\n\n  _05Json$1.json = function (options, world) {\n    options = options || {};\n    options = Object.assign({}, jsonDefault, options);\n    let result = {}; // default on\n\n    if (options.text) {\n      result.text = this.text;\n    }\n\n    if (options.normal) {\n      result.normal = this.clean;\n    }\n\n    if (options.tags) {\n      result.tags = Object.keys(this.tags);\n    } // default off\n\n\n    if (options.clean) {\n      result.clean = this.clean;\n    }\n\n    if (options.id || options.offset) {\n      result.id = this.id;\n    }\n\n    if (options.implicit && this.implicit !== null) {\n      result.implicit = this.implicit;\n    }\n\n    if (options.whitespace) {\n      result.pre = this.pre;\n      result.post = this.post;\n    }\n\n    if (options.bestTag) {\n      result.bestTag = rankTags(this, world)[0];\n    }\n\n    return result;\n  };\n\n  var methods$d = Object.assign({}, _01Case, _02Punctuation$1, _03Misc, _04Text, _05Json$1);\n\n  var tag = {};\n\n  var fns$3 = {};\n\n  function isClientSide() {\n    return typeof window !== 'undefined' && window.document;\n  }\n  /** add spaces at the end */\n\n\n  const padEnd = function (str, width) {\n    str = str.toString();\n\n    while (str.length < width) {\n      str += ' ';\n    }\n\n    return str;\n  };\n  /** output for verbose-mode */\n\n\n  fns$3.logTag = function (t, tag, reason) {\n    if (isClientSide()) {\n      console.log('%c' + padEnd(t.clean, 3) + '  + ' + tag + ' ', 'color: #6accb2;');\n      return;\n    } //server-side\n\n\n    let log = '\\x1b[33m' + padEnd(t.clean, 15) + '\\x1b[0m + \\x1b[32m' + tag + '\\x1b[0m ';\n\n    if (reason) {\n      log = padEnd(log, 35) + ' ' + reason + '';\n    }\n\n    console.log(log);\n  };\n  /** output for verbose mode  */\n\n\n  fns$3.logUntag = function (t, tag, reason) {\n    if (isClientSide()) {\n      console.log('%c' + padEnd(t.clean, 3) + '  - ' + tag + ' ', 'color: #AB5850;');\n      return;\n    } //server-side\n\n\n    let log = '\\x1b[33m' + padEnd(t.clean, 3) + ' \\x1b[31m - #' + tag + '\\x1b[0m ';\n\n    if (reason) {\n      log = padEnd(log, 35) + ' ' + reason;\n    }\n\n    console.log(log);\n  };\n\n  fns$3.isArray = function (arr) {\n    return Object.prototype.toString.call(arr) === '[object Array]';\n  };\n\n  fns$3.titleCase = str => {\n    return str.charAt(0).toUpperCase() + str.substr(1);\n  };\n\n  const fns$2 = fns$3;\n  /** add a tag, and its descendents, to a term */\n\n  const addTag = function (t, tag, reason, world) {\n    let tagset = world.tags; //support '.' or '-' notation for skipping the tag\n\n    if (tag === '' || tag === '.' || tag === '-') {\n      return;\n    }\n\n    if (tag[0] === '#') {\n      tag = tag.replace(/^#/, '');\n    }\n\n    tag = fns$2.titleCase(tag); //if we already got this one\n\n    if (t.tags[tag] === true) {\n      return;\n    } // log it?\n\n\n    const isVerbose = world.isVerbose();\n\n    if (isVerbose === true) {\n      fns$2.logTag(t, tag, reason);\n    } //add tag\n\n\n    t.tags[tag] = true; //whee!\n    //check tagset for any additional things to do...\n\n    if (tagset.hasOwnProperty(tag) === true) {\n      //add parent Tags\n      tagset[tag].isA.forEach(down => {\n        t.tags[down] = true;\n\n        if (isVerbose === true) {\n          fns$2.logTag(t, '→ ' + down);\n        }\n      }); //remove any contrary tags\n\n      t.unTag(tagset[tag].notA, '←', world);\n    }\n  };\n  /** support an array of tags */\n\n\n  const addTags = function (term, tags, reason, world) {\n    if (typeof tags !== 'string') {\n      for (let i = 0; i < tags.length; i++) {\n        addTag(term, tags[i], reason, world);\n      } // tags.forEach(tag => addTag(term, tag, reason, world))\n\n    } else {\n      addTag(term, tags, reason, world);\n    }\n  };\n\n  var add$1 = addTags;\n\n  const fns$1 = fns$3;\n  const lowerCase = /^[a-z]/;\n\n  const titleCase$3 = str => {\n    return str.charAt(0).toUpperCase() + str.substr(1);\n  };\n  /** remove this tag, and its descentents from the term */\n\n\n  const unTag$1 = function (t, tag, reason, world) {\n    const isVerbose = world.isVerbose(); //support '*' for removing all tags\n\n    if (tag === '*') {\n      t.tags = {};\n      return t;\n    }\n\n    tag = tag.replace(/^#/, '');\n\n    if (lowerCase.test(tag) === true) {\n      tag = titleCase$3(tag);\n    } // remove the tag\n\n\n    if (t.tags[tag] === true) {\n      delete t.tags[tag]; //log in verbose-mode\n\n      if (isVerbose === true) {\n        fns$1.logUntag(t, tag, reason);\n      }\n    } //delete downstream tags too\n\n\n    const tagset = world.tags;\n\n    if (tagset[tag]) {\n      let lineage = tagset[tag].lineage;\n\n      for (let i = 0; i < lineage.length; i++) {\n        if (t.tags[lineage[i]] === true) {\n          delete t.tags[lineage[i]];\n\n          if (isVerbose === true) {\n            fns$1.logUntag(t, ' - ' + lineage[i]);\n          }\n        }\n      }\n    }\n\n    return t;\n  }; //handle an array of tags\n\n\n  const untagAll = function (term, tags, reason, world) {\n    if (typeof tags !== 'string' && tags) {\n      for (let i = 0; i < tags.length; i++) {\n        unTag$1(term, tags[i], reason, world);\n      }\n\n      return;\n    }\n\n    unTag$1(term, tags, reason, world);\n  };\n\n  var unTag_1 = untagAll;\n\n  const canBe$1 = function (term, tag, world) {\n    const tagset = world.tags; // cleanup tag\n\n    if (tag[0] === '#') {\n      tag = tag.replace(/^#/, '');\n    } //fail-fast\n\n\n    if (tagset[tag] === undefined) {\n      return true;\n    } //loop through tag's contradictory tags\n\n\n    let enemies = tagset[tag].notA || [];\n\n    for (let i = 0; i < enemies.length; i++) {\n      if (term.tags[enemies[i]] === true) {\n        return false;\n      }\n    }\n\n    if (tagset[tag].isA !== undefined) {\n      return canBe$1(term, tagset[tag].isA, world); //recursive\n    }\n\n    return true;\n  };\n\n  var canBe_1 = canBe$1;\n\n  const add = add$1;\n  const unTag = unTag_1;\n  const canBe = canBe_1;\n  /** add a tag or tags, and their descendents to this term\n   * @param  {string | string[]} tags - a tag or tags\n   * @param {string?} [reason] a clue for debugging\n   */\n\n  tag.tag = function (tags, reason, world) {\n    add(this, tags, reason, world);\n    return this;\n  };\n  /** only tag this term if it's consistent with it's current tags */\n\n\n  tag.tagSafe = function (tags, reason, world) {\n    if (canBe(this, tags, world)) {\n      add(this, tags, reason, world);\n    }\n\n    return this;\n  };\n  /** remove a tag or tags, and their descendents from this term\n   * @param {string | string[]} tags  - a tag or tags\n   * @param {string?} [reason] a clue for debugging\n   */\n\n\n  tag.unTag = function (tags, reason, world) {\n    unTag(this, tags, reason, world);\n    return this;\n  };\n  /** is this tag consistent with the word's current tags?\n   * @param {string | string[]} tags - a tag or tags\n   * @returns {boolean}\n   */\n\n\n  tag.canBe = function (tags, world) {\n    return canBe(this, tags, world);\n  };\n\n  const makeId$1 = _id;\n  const parseTerm = parse$3;\n  const methods$c = methods$d;\n  const tagMethods = tag;\n\n  class Term$3 {\n    constructor(text = '') {\n      text = String(text);\n      let obj = parseTerm(text); // the various forms of our text\n\n      this.text = obj.text || '';\n      this.clean = obj.clean;\n      this.reduced = obj.reduced;\n      this.root = null;\n      this.implicit = null;\n      this.pre = obj.pre || '';\n      this.post = obj.post || '';\n      this.tags = {};\n      this.prev = null;\n      this.next = null;\n      this.id = makeId$1(obj.clean);\n      this.isA = 'Term'; // easier than .constructor...\n      // support alternative matches\n\n      if (obj.alias) {\n        this.alias = obj.alias;\n      }\n    }\n    /** set the text of the Term to something else*/\n\n\n    set(str) {\n      let obj = parseTerm(str);\n      this.text = obj.text;\n      this.clean = obj.clean;\n      this.reduced = obj.reduced;\n      this.root = null;\n      this.implicit = null;\n      return this;\n    }\n\n  }\n  /** create a deep-copy of this term */\n\n\n  Term$3.prototype.clone = function () {\n    let term = new Term$3(this.text);\n    term.pre = this.pre;\n    term.post = this.post;\n    term.clean = this.clean;\n    term.reduced = this.reduced;\n    term.root = this.root;\n    term.implicit = this.implicit;\n    term.tags = Object.assign({}, this.tags); //use the old id, so it can be matched with .match(doc)\n    // term.id = this.id\n\n    return term;\n  };\n\n  Object.assign(Term$3.prototype, methods$c);\n  Object.assign(Term$3.prototype, tagMethods);\n  var Term_1 = Term$3;\n\n  var _01Utils$1 = {};\n\n  /** return a flat array of Term objects */\n\n  _01Utils$1.terms = function (n) {\n    if (this.length === 0) {\n      return [];\n    } // use cache, if it exists\n\n\n    if (this.cache.terms) {\n      if (n !== undefined) {\n        return this.cache.terms[n];\n      }\n\n      return this.cache.terms;\n    }\n\n    let terms = [this.pool.get(this.start)];\n\n    for (let i = 0; i < this.length - 1; i += 1) {\n      let id = terms[terms.length - 1].next;\n\n      if (id === null) {\n        // throw new Error('linked-list broken')\n        console.error(\"Compromise error: Linked list broken in phrase '\" + this.start + \"'\");\n        break;\n      }\n\n      let term = this.pool.get(id);\n      terms.push(term); //return this one?\n\n      if (n !== undefined && n === i) {\n        return terms[n];\n      }\n    }\n\n    if (n === undefined) {\n      this.cache.terms = terms;\n    }\n\n    if (n !== undefined) {\n      return terms[n];\n    }\n\n    return terms;\n  };\n  /** return a shallow or deep copy of this phrase  */\n\n\n  _01Utils$1.clone = function (isShallow) {\n    if (isShallow) {\n      let p = this.buildFrom(this.start, this.length);\n      p.cache = this.cache;\n      return p;\n    } //how do we clone part of the pool?\n\n\n    let terms = this.terms();\n    let newTerms = terms.map(t => t.clone()); // console.log(newTerms)\n    //connect these new ids up\n\n    newTerms.forEach((t, i) => {\n      //add it to the pool..\n      this.pool.add(t);\n\n      if (newTerms[i + 1]) {\n        t.next = newTerms[i + 1].id;\n      }\n\n      if (newTerms[i - 1]) {\n        t.prev = newTerms[i - 1].id;\n      }\n    });\n    return this.buildFrom(newTerms[0].id, newTerms.length);\n  };\n  /** return last term object */\n\n\n  _01Utils$1.lastTerm = function () {\n    let terms = this.terms();\n    return terms[terms.length - 1];\n  };\n  /** quick lookup for a term id */\n\n\n  _01Utils$1.hasId = function (wantId) {\n    if (this.length === 0 || !wantId) {\n      return false;\n    }\n\n    if (this.start === wantId) {\n      return true;\n    } // use cache, if available\n\n\n    if (this.cache.terms) {\n      let terms = this.cache.terms;\n\n      for (let i = 0; i < terms.length; i++) {\n        if (terms[i].id === wantId) {\n          return true;\n        }\n      }\n\n      return false;\n    } // otherwise, go through each term\n\n\n    let lastId = this.start;\n\n    for (let i = 0; i < this.length - 1; i += 1) {\n      let term = this.pool.get(lastId);\n\n      if (term === undefined) {\n        console.error(`Compromise error: Linked list broken. Missing term '${lastId}' in phrase '${this.start}'\\n`); // throw new Error('linked List error')\n\n        return false;\n      }\n\n      if (term.next === wantId) {\n        return true;\n      }\n\n      lastId = term.next;\n    }\n\n    return false;\n  };\n  /** how many seperate, non-empty words is it? */\n\n\n  _01Utils$1.wordCount = function () {\n    return this.terms().filter(t => t.text !== '').length;\n  };\n  /** get the full-sentence this phrase belongs to */\n\n\n  _01Utils$1.fullSentence = function () {\n    let t = this.terms(0); //find first term in sentence\n\n    while (t.prev) {\n      t = this.pool.get(t.prev);\n    }\n\n    let start = t.id;\n    let len = 1; //go to end of sentence\n\n    while (t.next) {\n      t = this.pool.get(t.next);\n      len += 1;\n    }\n\n    return this.buildFrom(start, len);\n  };\n\n  var _02Text = {};\n\n  const trimEnd = function (str) {\n    return str.replace(/ +$/, '');\n  };\n  /** produce output in the given format */\n\n\n  _02Text.text = function (options = {}, isFirst, isLast) {\n    if (typeof options === 'string') {\n      if (options === 'normal') {\n        options = {\n          whitespace: true,\n          unicode: true,\n          lowercase: true,\n          punctuation: true,\n          acronyms: true,\n          abbreviations: true,\n          implicit: true,\n          normal: true\n        };\n      } else if (options === 'clean') {\n        options = {\n          titlecase: false,\n          lowercase: true,\n          punctuation: true,\n          whitespace: true,\n          unicode: true,\n          implicit: true,\n          normal: true\n        };\n      } else if (options === 'reduced') {\n        options = {\n          punctuation: false,\n          //Hmm: is this reversed?\n          titlecase: false,\n          lowercase: true,\n          whitespace: true,\n          unicode: true,\n          implicit: true,\n          reduced: true\n        };\n      } else if (options === 'implicit') {\n        options = {\n          punctuation: true,\n          implicit: true,\n          whitespace: true,\n          trim: true\n        };\n      } else if (options === 'root') {\n        options = {\n          titlecase: false,\n          lowercase: true,\n          punctuation: true,\n          whitespace: true,\n          unicode: true,\n          implicit: true,\n          root: true\n        };\n      } else {\n        options = {};\n      }\n    }\n\n    let terms = this.terms(); //this this phrase a complete sentence?\n\n    let isFull = false;\n\n    if (terms[0] && terms[0].prev === null && terms[terms.length - 1].next === null) {\n      isFull = true;\n    }\n\n    let text = terms.reduce((str, t, i) => {\n      // don't output intro space for a contraction-match  i'm good => \"[am] good\"\n      if (i === 0 && t.text === '' && t.implicit !== null && !options.implicit) {\n        return str;\n      }\n\n      options.last = isLast && i === terms.length - 1;\n      let showPre = true;\n      let showPost = true;\n\n      if (isFull === false) {\n        // dont show beginning whitespace\n        if (i === 0 && isFirst) {\n          showPre = false;\n        } // dont show end-whitespace\n\n\n        if (i === terms.length - 1 && isLast) {\n          showPost = false;\n        }\n      }\n\n      let txt = t.textOut(options, showPre, showPost); // console.log(terms)\n      // if (options.titlecase && i === 0) {\n      // txt = titleCase(txt)\n      // }\n\n      return str + txt;\n    }, ''); //full-phrases show punctuation, but not whitespace\n\n    if (isFull === true && isLast) {\n      text = trimEnd(text);\n    }\n\n    if (options.trim === true) {\n      text = text.trim();\n    }\n\n    return text;\n  };\n\n  var _03Change = {};\n\n  /** remove start and end whitespace */\n\n  _03Change.trim = function () {\n    let terms = this.terms();\n\n    if (terms.length > 0) {\n      //trim starting\n      terms[0].pre = terms[0].pre.replace(/^\\s+/, ''); //trim ending\n\n      let lastTerm = terms[terms.length - 1];\n      lastTerm.post = lastTerm.post.replace(/\\s+$/, '');\n    }\n\n    return this;\n  };\n\n  var _04Insert = {};\n\n  const endOfSentence = /[.?!]\\s*$/; // replacing a 'word.' with a 'word!'\n\n  const combinePost = function (before, after) {\n    //only transfer the whitespace\n    if (endOfSentence.test(after)) {\n      let whitespace = before.match(/\\s*$/);\n      return after + whitespace;\n    }\n\n    return before;\n  }; //add whitespace to the start of the second bit\n\n\n  const addWhitespace$1 = function (beforeTerms, newTerms) {\n    // add any existing pre-whitespace to beginning\n    newTerms[0].pre = beforeTerms[0].pre;\n    let lastTerm = beforeTerms[beforeTerms.length - 1]; //add any existing punctuation to end of our new terms\n\n    let newTerm = newTerms[newTerms.length - 1];\n    newTerm.post = combinePost(lastTerm.post, newTerm.post); // remove existing punctuation\n\n    lastTerm.post = ''; //before ←[space]  - after\n\n    if (lastTerm.post === '') {\n      lastTerm.post += ' ';\n    }\n  }; //insert this segment into the linked-list\n\n\n  const stitchIn$1 = function (beforeTerms, newTerms, pool) {\n    let lastBefore = beforeTerms[beforeTerms.length - 1];\n    let lastNew = newTerms[newTerms.length - 1];\n    let afterId = lastBefore.next; //connect ours in (main → newPhrase)\n\n    lastBefore.next = newTerms[0].id; //stich the end in  (newPhrase → after)\n\n    lastNew.next = afterId; //do it backwards, too\n\n    if (afterId) {\n      // newPhrase ← after\n      let afterTerm = pool.get(afterId);\n      afterTerm.prev = lastNew.id;\n    } // before ← newPhrase\n\n\n    let beforeId = beforeTerms[0].id;\n\n    if (beforeId) {\n      let newTerm = newTerms[0];\n      newTerm.prev = beforeId;\n    }\n  }; // avoid stretching a phrase twice.\n\n\n  const unique$6 = function (list) {\n    return list.filter((o, i) => {\n      return list.indexOf(o) === i;\n    });\n  }; //append one phrase onto another.\n\n\n  const appendPhrase = function (before, newPhrase, doc) {\n    let beforeTerms = before.terms();\n    let newTerms = newPhrase.terms(); //spruce-up the whitespace issues\n\n    addWhitespace$1(beforeTerms, newTerms); //insert this segment into the linked-list\n\n    stitchIn$1(beforeTerms, newTerms, before.pool); // stretch!\n    // make each effected phrase longer\n\n    let toStretch = [before];\n    let hasId = before.start;\n    let docs = [doc];\n    docs = docs.concat(doc.parents()); // find them all!\n\n    docs.forEach(parent => {\n      // only the phrases that should change\n      let shouldChange = parent.list.filter(p => {\n        return p.hasId(hasId);\n      });\n      toStretch = toStretch.concat(shouldChange);\n    }); // don't double-count a phrase\n\n    toStretch = unique$6(toStretch);\n    toStretch.forEach(p => {\n      p.length += newPhrase.length;\n    });\n    before.cache = {};\n    return before;\n  };\n\n  var append$1 = appendPhrase;\n\n  const hasSpace = / /; //a new space needs to be added, either on the new phrase, or the old one\n  // '[new] [◻old]'   -or-   '[old] [◻new] [old]'\n\n  const addWhitespace = function (newTerms) {\n    //add a space before our new text?\n    // add a space after our text\n    let lastTerm = newTerms[newTerms.length - 1];\n\n    if (hasSpace.test(lastTerm.post) === false) {\n      lastTerm.post += ' ';\n    }\n\n    return;\n  }; //insert this segment into the linked-list\n\n\n  const stitchIn = function (main, newPhrase, newTerms) {\n    // [newPhrase] → [main]\n    let lastTerm = newTerms[newTerms.length - 1];\n    lastTerm.next = main.start; // [before] → [main]\n\n    let pool = main.pool;\n    let start = pool.get(main.start);\n\n    if (start.prev) {\n      let before = pool.get(start.prev);\n      before.next = newPhrase.start;\n    } //do it backwards, too\n    // before ← newPhrase\n\n\n    newTerms[0].prev = main.terms(0).prev; // newPhrase ← main\n\n    main.terms(0).prev = lastTerm.id;\n  };\n\n  const unique$5 = function (list) {\n    return list.filter((o, i) => {\n      return list.indexOf(o) === i;\n    });\n  }; //append one phrase onto another\n\n\n  const joinPhrase = function (original, newPhrase, doc) {\n    const starterId = original.start;\n    let newTerms = newPhrase.terms(); //spruce-up the whitespace issues\n\n    addWhitespace(newTerms); //insert this segment into the linked-list\n\n    stitchIn(original, newPhrase, newTerms); //increase the length of our phrases\n\n    let toStretch = [original];\n    let docs = [doc];\n    docs = docs.concat(doc.parents());\n    docs.forEach(d => {\n      // only the phrases that should change\n      let shouldChange = d.list.filter(p => {\n        return p.hasId(starterId) || p.hasId(newPhrase.start);\n      });\n      toStretch = toStretch.concat(shouldChange);\n    }); // don't double-count\n\n    toStretch = unique$5(toStretch); // stretch these phrases\n\n    toStretch.forEach(p => {\n      p.length += newPhrase.length; // change the start too, if necessary\n\n      if (p.start === starterId) {\n        p.start = newPhrase.start;\n      }\n\n      p.cache = {};\n    });\n    return original;\n  };\n\n  var prepend$1 = joinPhrase;\n\n  const shrinkAll = function (doc, id, deleteLength, after) {\n    let arr = doc.parents();\n    arr.push(doc);\n    arr.forEach(d => {\n      //find our phrase to shrink\n      let phrase = d.list.find(p => p.hasId(id));\n\n      if (!phrase) {\n        return;\n      }\n\n      phrase.length -= deleteLength; // does it start with this soon-removed word?\n\n      if (phrase.start === id) {\n        phrase.start = after.id;\n      }\n\n      phrase.cache = {};\n    }); // cleanup empty phrase objects\n\n    doc.list = doc.list.filter(p => {\n      if (!p.start || !p.length) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n  /** wrap the linked-list around these terms\n   * so they don't appear any more\n   */\n\n\n  const deletePhrase$1 = function (phrase, doc) {\n    let pool = doc.pool();\n    let terms = phrase.terms(); //grab both sides of the chain,\n\n    let prev = pool.get(terms[0].prev) || {};\n    let after = pool.get(terms[terms.length - 1].next) || {};\n\n    if (terms[0].implicit && prev.implicit) {\n      prev.set(prev.implicit);\n      prev.post += ' ';\n    } // //first, change phrase lengths\n\n\n    shrinkAll(doc, phrase.start, phrase.length, after); // connect [prev]->[after]\n\n    if (prev) {\n      prev.next = after.id;\n    } // connect [prev]<-[after]\n\n\n    if (after) {\n      after.prev = prev.id;\n    } // lastly, actually delete the terms from the pool?\n    // for (let i = 0; i < terms.length; i++) {\n    //   pool.remove(terms[i].id)\n    // }\n\n  };\n\n  var _delete = deletePhrase$1;\n\n  const append = append$1;\n  const prepend = prepend$1;\n  const deletePhrase = _delete; // const tokenize = require('../../01-tokenizer')\n\n  /** put this text at the end */\n\n  _04Insert.append = function (newPhrase, doc) {\n    append(this, newPhrase, doc);\n    return this;\n  };\n  /** add this text to the beginning */\n\n\n  _04Insert.prepend = function (newPhrase, doc) {\n    prepend(this, newPhrase, doc);\n    return this;\n  };\n\n  _04Insert.delete = function (doc) {\n    deletePhrase(this, doc);\n    return this;\n  }; // stich-in newPhrase, stretch 'doc' + parents\n\n\n  _04Insert.replace = function (newPhrase, doc) {\n    //add it do the end\n    let firstLength = this.length;\n    append(this, newPhrase, doc); //delete original terms\n\n    let tmp = this.buildFrom(this.start, this.length);\n    tmp.length = firstLength;\n    deletePhrase(tmp, doc);\n  };\n  /**\n   * Turn this phrase object into 3 phrase objects\n   */\n\n\n  _04Insert.splitOn = function (p) {\n    let terms = this.terms();\n    let result = {\n      before: null,\n      match: null,\n      after: null\n    };\n    let index = terms.findIndex(t => t.id === p.start);\n\n    if (index === -1) {\n      return result;\n    } //make all three sections into phrase-objects\n\n\n    let start = terms.slice(0, index);\n\n    if (start.length > 0) {\n      result.before = this.buildFrom(start[0].id, start.length);\n    }\n\n    let match = terms.slice(index, index + p.length);\n\n    if (match.length > 0) {\n      result.match = this.buildFrom(match[0].id, match.length);\n    }\n\n    let end = terms.slice(index + p.length, terms.length);\n\n    if (end.length > 0) {\n      result.after = this.buildFrom(end[0].id, end.length, this.pool);\n    }\n\n    return result;\n  };\n\n  var _05Json = {};\n\n  /** return json metadata for this phrase */\n\n  _05Json.json = function (options = {}, world) {\n    let res = {}; // text data\n\n    if (options.text) {\n      res.text = this.text();\n    }\n\n    if (options.normal) {\n      res.normal = this.text('normal');\n    }\n\n    if (options.clean) {\n      res.clean = this.text('clean');\n    }\n\n    if (options.reduced) {\n      res.reduced = this.text('reduced');\n    }\n\n    if (options.implicit) {\n      res.implicit = this.text('implicit');\n    }\n\n    if (options.root) {\n      res.root = this.text('root');\n    }\n\n    if (options.trim) {\n      if (res.text) {\n        res.text = res.text.trim();\n      }\n\n      if (res.normal) {\n        res.normal = res.normal.trim();\n      }\n\n      if (res.reduced) {\n        res.reduced = res.reduced.trim();\n      }\n    } // terms data\n\n\n    if (options.terms) {\n      if (options.terms === true) {\n        options.terms = {};\n      }\n\n      res.terms = this.terms().map(t => t.json(options.terms, world));\n    }\n\n    return res;\n  };\n\n  var _06Lookahead = {};\n\n  /** match any terms after this phrase */\n\n  _06Lookahead.lookAhead = function (regs) {\n    // if empty match string, return everything after\n    if (!regs) {\n      regs = '.*';\n    }\n\n    let pool = this.pool; // get a list of all terms preceding our start\n\n    let terms = [];\n\n    const getAfter = function (id) {\n      let term = pool.get(id);\n\n      if (!term) {\n        return;\n      }\n\n      terms.push(term);\n\n      if (term.prev) {\n        getAfter(term.next); //recursion\n      }\n    };\n\n    let all = this.terms();\n    let lastTerm = all[all.length - 1];\n    getAfter(lastTerm.next);\n\n    if (terms.length === 0) {\n      return [];\n    } // got the terms, make a phrase from them\n\n\n    let p = this.buildFrom(terms[0].id, terms.length);\n    return p.match(regs);\n  };\n  /** match any terms before this phrase */\n\n\n  _06Lookahead.lookBehind = function (regs) {\n    // if empty match string, return everything before\n    if (!regs) {\n      regs = '.*';\n    }\n\n    let pool = this.pool; // get a list of all terms preceding our start\n\n    let terms = [];\n\n    const getBefore = function (id) {\n      let term = pool.get(id);\n\n      if (!term) {\n        return;\n      }\n\n      terms.push(term);\n\n      if (term.prev) {\n        getBefore(term.prev); //recursion\n      }\n    };\n\n    let term = pool.get(this.start);\n    getBefore(term.prev);\n\n    if (terms.length === 0) {\n      return [];\n    } // got the terms, make a phrase from them\n\n\n    let p = this.buildFrom(terms[terms.length - 1].id, terms.length);\n    return p.match(regs);\n  };\n\n  var methods$b = Object.assign({}, _01Utils$1, _02Text, _03Change, _04Insert, _05Json, _06Lookahead);\n\n  var match = {};\n\n  const failFast$2 = function (p, regs) {\n    if (regs.length === 0) {\n      return true;\n    }\n\n    for (let i = 0; i < regs.length; i += 1) {\n      let reg = regs[i]; //logical quick-ones\n\n      if (reg.optional !== true && reg.negative !== true) {\n        //start/end impossibilites\n        if (reg.start === true && i > 0) {\n          return true;\n        }\n      } //this is not possible\n\n\n      if (reg.anything === true && reg.negative === true) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var _02FailFast = failFast$2;\n\n  var _matchLogic = {};\n\n  (function (exports) {\n    //found a match? it's greedy? keep going!\n    exports.getGreedy = function (state, endReg) {\n      // for greedy checking, we no longer care about the reg.start\n      // value, and leaving it can cause failures for anchored greedy\n      // matches.  ditto for end-greedy matches: we need an earlier non-\n      // ending match to succceed until we get to the actual end.\n      let reg = Object.assign({}, state.regs[state.r], {\n        start: false,\n        end: false\n      });\n      let start = state.t;\n\n      for (; state.t < state.terms.length; state.t += 1) {\n        //stop for next-reg match\n        if (endReg && state.terms[state.t].doesMatch(endReg, state.start_i + state.t, state.phrase_length)) {\n          return state.t;\n        }\n\n        let count = state.t - start + 1; // is it max-length now?\n\n        if (reg.max !== undefined && count === reg.max) {\n          return state.t;\n        } //stop here\n\n\n        if (state.terms[state.t].doesMatch(reg, state.start_i + state.t, state.phrase_length) === false) {\n          // is it too short?\n          if (reg.min !== undefined && count < reg.min) {\n            return null;\n          }\n\n          return state.t;\n        }\n      }\n\n      return state.t;\n    }; //'unspecific greedy' is a weird situation.\n\n\n    exports.greedyTo = function (state, nextReg) {\n      let t = state.t; //if there's no next one, just go off the end!\n\n      if (!nextReg) {\n        return state.terms.length;\n      } //otherwise, we're looking for the next one\n\n\n      for (; t < state.terms.length; t += 1) {\n        if (state.terms[t].doesMatch(nextReg, state.start_i + t, state.phrase_length) === true) {\n          return t;\n        }\n      } //guess it doesn't exist, then.\n\n\n      return null;\n    }; //we have a special case where an end-anchored greedy match may need to\n    //start matching before the actual end; we do this by (temporarily!)\n    //removing the \"end\" property from the matching token... since this is\n    //very situation-specific, we *only* do this when we really need to.\n\n\n    exports.isEndGreedy = function (reg, state) {\n      if (reg.end === true && reg.greedy === true) {\n        if (state.start_i + state.t < state.phrase_length - 1) {\n          let tmpReg = Object.assign({}, reg, {\n            end: false\n          });\n\n          if (state.terms[state.t].doesMatch(tmpReg, state.start_i + state.t, state.phrase_length) === true) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }; // match complex OR cases like (a|b|foo bar)\n\n\n    exports.doOrBlock = function (state, skipN = 0) {\n      let block = state.regs[state.r];\n      let wasFound = false; // do each multiword sequence\n\n      for (let c = 0; c < block.choices.length; c += 1) {\n        // try to match this list of tokens\n        let regs = block.choices[c];\n        wasFound = regs.every((cr, w_index) => {\n          let extra = 0;\n          let t = state.t + w_index + skipN + extra;\n\n          if (state.terms[t] === undefined) {\n            return false;\n          }\n\n          let foundBlock = state.terms[t].doesMatch(cr, t + state.start_i, state.phrase_length); // this can be greedy - '(foo+ bar)'\n\n          if (foundBlock === true && cr.greedy === true) {\n            for (let i = 1; i < state.terms.length; i += 1) {\n              let term = state.terms[t + i];\n\n              if (term) {\n                let keepGoing = term.doesMatch(cr, state.start_i + i, state.phrase_length);\n\n                if (keepGoing === true) {\n                  extra += 1;\n                } else {\n                  break;\n                }\n              }\n            }\n          }\n\n          skipN += extra;\n          return foundBlock;\n        });\n\n        if (wasFound) {\n          skipN += regs.length;\n          break;\n        }\n      } // we found a match -  is it greedy though?\n\n\n      if (wasFound && block.greedy === true) {\n        return exports.doOrBlock(state, skipN); // try it again!\n      }\n\n      return skipN;\n    }; // match AND cases like (#Noun && foo)\n\n\n    exports.doAndBlock = function (state) {\n      let longest = 0; // all blocks must match, and we return the greediest match\n\n      let reg = state.regs[state.r];\n      let allDidMatch = reg.choices.every(block => {\n        //  for multi-word blocks, all must match\n        let allWords = block.every((cr, w_index) => {\n          let tryTerm = state.t + w_index;\n\n          if (state.terms[tryTerm] === undefined) {\n            return false;\n          }\n\n          return state.terms[tryTerm].doesMatch(cr, tryTerm, state.phrase_length);\n        });\n\n        if (allWords === true && block.length > longest) {\n          longest = block.length;\n        }\n\n        return allWords;\n      });\n\n      if (allDidMatch === true) {\n        return longest;\n      }\n\n      return false;\n    }; // get or create named group\n\n\n    exports.getGroup = function (state, term_index, name) {\n      if (state.groups[state.groupId]) {\n        return state.groups[state.groupId];\n      }\n\n      const termId = state.terms[term_index].id;\n      state.groups[state.groupId] = {\n        group: String(name),\n        start: termId,\n        length: 0\n      };\n      return state.groups[state.groupId];\n    };\n  })(_matchLogic);\n\n  const makeId = _id;\n  const logic = _matchLogic; // i formally apologize for how complicated this is.\n\n  /** tries to match a sequence of terms, starting from here */\n\n  const tryHere = function (terms, regs, start_i, phrase_length) {\n    // all the variables that matter\n    let state = {\n      t: 0,\n      //the term index we're on\n      terms: terms,\n      //the working slice of term objects\n      r: 0,\n      // the reg index we're on\n      regs: regs,\n      //our match conditions\n      groups: {},\n      //all named-group matches\n      start_i: start_i,\n      // term index we're starting from\n      phrase_length: phrase_length,\n      // # of terms in the sentence\n      hasGroup: false,\n      groupId: null,\n      previousGroup: null\n    }; // we must satisfy each rule in 'regs'\n\n    for (; state.r < regs.length; state.r += 1) {\n      let reg = regs[state.r]; // Check if this reg has a named capture group\n\n      state.hasGroup = typeof reg.named === 'string' || typeof reg.named === 'number'; // Reuse previous capture group if same\n\n      if (state.hasGroup === true) {\n        const prev = regs[state.r - 1];\n\n        if (prev && prev.named === reg.named && state.previousGroup) {\n          state.groupId = state.previousGroup;\n        } else {\n          state.groupId = makeId(reg.named);\n          state.previousGroup = state.groupId;\n        }\n      } //have we run-out of terms?\n\n\n      if (!state.terms[state.t]) {\n        //are all remaining regs optional or negative?\n        const haveNeeds = regs.slice(state.r).some(remain => !remain.optional);\n\n        if (haveNeeds === false) {\n          break; //done!\n        }\n\n        return null; // die\n      } //support 'unspecific greedy' .* properly\n\n\n      if (reg.anything === true && reg.greedy === true) {\n        let skipto = logic.greedyTo(state, regs[state.r + 1]); //maybe we couldn't find it\n\n        if (skipto === null || skipto === 0) {\n          return null;\n        } // ensure it's long enough\n\n\n        if (reg.min !== undefined && skipto - state.t < reg.min) {\n          return null;\n        } // reduce it back, if it's too long\n\n\n        if (reg.max !== undefined && skipto - state.t > reg.max) {\n          state.t = state.t + reg.max;\n          continue;\n        } // is it really this easy?....\n\n\n        if (state.hasGroup === true) {\n          const g = logic.getGroup(state, state.t, reg.named);\n          g.length = skipto - state.t;\n        }\n\n        state.t = skipto;\n        continue;\n      } // support multi-word OR (a|b|foo bar)\n\n\n      if (reg.choices !== undefined && reg.operator === 'or') {\n        let skipNum = logic.doOrBlock(state);\n\n        if (skipNum) {\n          // handle 'not' logic\n          if (reg.negative === true) {\n            return null; // die\n          }\n\n          if (state.hasGroup === true) {\n            const g = logic.getGroup(state, state.t, reg.named);\n            g.length += skipNum;\n          }\n\n          state.t += skipNum;\n          continue;\n        } else if (!reg.optional) {\n          return null; //die\n        }\n      } // support AND (#Noun && foo) blocks\n\n\n      if (reg.choices !== undefined && reg.operator === 'and') {\n        let skipNum = logic.doAndBlock(state);\n\n        if (skipNum) {\n          // handle 'not' logic\n          if (reg.negative === true) {\n            return null; // die\n          }\n\n          if (state.hasGroup === true) {\n            const g = logic.getGroup(state, state.t, reg.named);\n            g.length += skipNum;\n          }\n\n          state.t += skipNum;\n          continue;\n        } else if (!reg.optional) {\n          return null; //die\n        }\n      } // ok, finally test the term/reg\n\n\n      let term = state.terms[state.t];\n      let doesMatch = term.doesMatch(reg, state.start_i + state.t, state.phrase_length);\n\n      if (reg.anything === true || doesMatch === true || logic.isEndGreedy(reg, state)) {\n        let startAt = state.t; // if it's a negative optional match... :0\n\n        if (reg.optional && regs[state.r + 1] && reg.negative) {\n          continue;\n        } // okay, it was a match, but if it's optional too,\n        // we should check the next reg too, to skip it?\n\n\n        if (reg.optional && regs[state.r + 1]) {\n          // does the next reg match it too?\n          let nextRegMatched = term.doesMatch(regs[state.r + 1], state.start_i + state.t, state.phrase_length);\n\n          if (reg.negative || nextRegMatched) {\n            // but does the next reg match the next term??\n            // only skip if it doesn't\n            let nextTerm = state.terms[state.t + 1];\n\n            if (!nextTerm || !nextTerm.doesMatch(regs[state.r + 1], state.start_i + state.t, state.phrase_length)) {\n              state.r += 1;\n            }\n          }\n        } //advance to the next term!\n\n\n        state.t += 1; //check any ending '$' flags\n\n        if (reg.end === true) {\n          //if this isn't the last term, refuse the match\n          if (state.t !== state.terms.length && reg.greedy !== true) {\n            return null; //die\n          }\n        } //try keep it going!\n\n\n        if (reg.greedy === true) {\n          state.t = logic.getGreedy(state, regs[state.r + 1]);\n\n          if (state.t === null) {\n            return null; //greedy was too short\n          }\n\n          if (reg.min && reg.min > state.t) {\n            return null; //greedy was too short\n          } // if this was also an end-anchor match, check to see we really\n          // reached the end\n\n\n          if (reg.end === true && state.start_i + state.t !== phrase_length) {\n            return null; //greedy didn't reach the end\n          }\n        }\n\n        if (state.hasGroup === true) {\n          // Get or create capture group\n          const g = logic.getGroup(state, startAt, reg.named); // Update group - add greedy or increment length\n\n          if (state.t > 1 && reg.greedy) {\n            g.length += state.t - startAt;\n          } else {\n            g.length++;\n          }\n        }\n\n        continue;\n      } // ok, it doesn't match.\n      // did it *actually match* a negative?\n\n\n      if (reg.negative) {\n        let tmpReg = Object.assign({}, reg);\n        tmpReg.negative = false; // try removing it\n\n        let foundNeg = state.terms[state.t].doesMatch(tmpReg, state.start_i + state.t, state.phrase_length);\n\n        if (foundNeg === true) {\n          return null; //bye!\n        }\n      } //bah, who cares, keep going\n\n\n      if (reg.optional === true) {\n        continue;\n      } // should we skip-over an implicit word?\n\n\n      if (state.terms[state.t].isImplicit() && regs[state.r - 1] && state.terms[state.t + 1]) {\n        // if the last match was implicit too, we're missing a word.\n        if (state.terms[state.t - 1] && state.terms[state.t - 1].implicit === regs[state.r - 1].word) {\n          return null;\n        } // does the next one match?\n\n\n        if (state.terms[state.t + 1].doesMatch(reg, state.start_i + state.t, state.phrase_length)) {\n          state.t += 2;\n          continue;\n        }\n      }\n\n      return null; //die\n    } //return our result\n\n\n    return {\n      match: state.terms.slice(0, state.t),\n      groups: state.groups\n    };\n  };\n\n  var _03TryMatch = tryHere;\n\n  const postProcess$3 = function (terms, regs, matches) {\n    if (!matches || matches.length === 0) {\n      return matches;\n    } // ensure end reg has the end term\n\n\n    let atEnd = regs.some(r => r.end);\n\n    if (atEnd) {\n      let lastTerm = terms[terms.length - 1];\n      matches = matches.filter(({\n        match: arr\n      }) => arr.indexOf(lastTerm) !== -1);\n    }\n\n    return matches;\n  };\n\n  var _04PostProcess = postProcess$3;\n\n  // suffixes:     ? ] + * $ {2,6} ~\n  //     [\\?\\]\\+\\*\\$~]*\n  // prefixes: ! [ ^\n  //     [\\!\\[\\^]*\n  // match  'foo /yes/' and not 'foo/no/bar'\n\n  const bySlashes = /(?:^|\\s)([\\!\\[\\^]*(?:<[^<]*>)?\\/.*?[^\\\\\\/]\\/[\\?\\]\\+\\*\\$~]*)(?:\\s|$)/; // match '(yes) but not foo(no)bar'\n\n  const byParentheses = /([\\!\\[\\^]*(?:<[^<]*>)?\\([^\\)]+[^\\\\\\)]\\)[\\?\\]\\+\\*\\$~]*)(?:\\s|$)/; // okay\n\n  const byWord = / /g;\n\n  const isBlock = str => {\n    return /^[\\!\\[\\^]*(<[^<]*>)?\\(/.test(str) && /\\)[\\?\\]\\+\\*\\$~]*$/.test(str);\n  };\n\n  const isReg = str => {\n    return /^[\\!\\[\\^]*(<[^<]*>)?\\//.test(str) && /\\/[\\?\\]\\+\\*\\$~]*$/.test(str);\n  };\n\n  const cleanUp = function (arr) {\n    arr = arr.map(str => str.trim());\n    arr = arr.filter(str => str);\n    return arr;\n  };\n\n  const parseBlocks$1 = function (txt) {\n    // parse by /regex/ first\n    let arr = txt.split(bySlashes);\n    let res = []; // parse by (blocks), next\n\n    arr.forEach(str => {\n      if (isReg(str)) {\n        res.push(str);\n        return;\n      }\n\n      res = res.concat(str.split(byParentheses));\n    });\n    res = cleanUp(res); // split by spaces, now\n\n    let final = [];\n    res.forEach(str => {\n      if (isBlock(str)) {\n        final.push(str);\n      } else if (isReg(str)) {\n        final.push(str);\n      } else {\n        final = final.concat(str.split(byWord));\n      }\n    });\n    final = cleanUp(final);\n    return final;\n  };\n\n  var _01ParseBlocks = parseBlocks$1; // console.log('(one two) (upto) [<snooze_to>#Date+]'.split(byParentheses))\n\n  /* break-down a match expression into this:\n  {\n    word:'',\n    tag:'',\n    regex:'',\n\n    start:false,\n    end:false,\n    negative:false,\n    anything:false,\n    greedy:false,\n    optional:false,\n\n    named:'',\n    choices:[],\n  }\n  */\n  const hasMinMax = /\\{([0-9]+,?[0-9]*)\\}/;\n  const andSign = /&&/;\n  const captureName = new RegExp(/^<\\s*?(\\S+)\\s*?>/);\n\n  const titleCase$2 = str => {\n    return str.charAt(0).toUpperCase() + str.substr(1);\n  };\n\n  const end = function (str) {\n    return str[str.length - 1];\n  };\n\n  const start = function (str) {\n    return str[0];\n  };\n\n  const stripStart = function (str) {\n    return str.substr(1);\n  };\n\n  const stripEnd = function (str) {\n    return str.substr(0, str.length - 1);\n  };\n\n  const stripBoth = function (str) {\n    str = stripStart(str);\n    str = stripEnd(str);\n    return str;\n  }; //\n\n\n  const parseToken$1 = function (w) {\n    let obj = {}; //collect any flags (do it twice)\n\n    for (let i = 0; i < 2; i += 1) {\n      //end-flag\n      if (end(w) === '$') {\n        obj.end = true;\n        w = stripEnd(w);\n      } //front-flag\n\n\n      if (start(w) === '^') {\n        obj.start = true;\n        w = stripStart(w);\n      } //capture group (this one can span multiple-terms)\n\n\n      if (start(w) === '[' || end(w) === ']') {\n        obj.named = true;\n\n        if (start(w) === '[') {\n          obj.groupType = end(w) === ']' ? 'single' : 'start';\n        } else {\n          obj.groupType = 'end';\n        }\n\n        w = w.replace(/^\\[/, '');\n        w = w.replace(/\\]$/, ''); // Use capture group name\n\n        if (start(w) === '<') {\n          const res = captureName.exec(w);\n\n          if (res.length >= 2) {\n            obj.named = res[1];\n            w = w.replace(res[0], '');\n          }\n        }\n      } //back-flags\n\n\n      if (end(w) === '+') {\n        obj.greedy = true;\n        w = stripEnd(w);\n      }\n\n      if (w !== '*' && end(w) === '*' && w !== '\\\\*') {\n        obj.greedy = true;\n        w = stripEnd(w);\n      }\n\n      if (end(w) === '?') {\n        obj.optional = true;\n        w = stripEnd(w);\n      }\n\n      if (start(w) === '!') {\n        obj.negative = true; // obj.optional = true\n\n        w = stripStart(w);\n      } //wrapped-flags\n\n\n      if (start(w) === '(' && end(w) === ')') {\n        // support (one && two)\n        if (andSign.test(w)) {\n          obj.choices = w.split(andSign);\n          obj.operator = 'and';\n        } else {\n          obj.choices = w.split('|');\n          obj.operator = 'or';\n        } //remove '(' and ')'\n\n\n        obj.choices[0] = stripStart(obj.choices[0]);\n        let last = obj.choices.length - 1;\n        obj.choices[last] = stripEnd(obj.choices[last]); // clean up the results\n\n        obj.choices = obj.choices.map(s => s.trim());\n        obj.choices = obj.choices.filter(s => s); //recursion alert!\n\n        obj.choices = obj.choices.map(str => {\n          return str.split(/ /g).map(parseToken$1);\n        });\n        w = '';\n      } //regex\n\n\n      if (start(w) === '/' && end(w) === '/') {\n        w = stripBoth(w);\n        obj.regex = new RegExp(w); //potential vuln - security/detect-non-literal-regexp\n\n        return obj;\n      } //soft-match\n\n\n      if (start(w) === '~' && end(w) === '~') {\n        w = stripBoth(w);\n        obj.soft = true;\n        obj.word = w;\n        return obj;\n      }\n    } // support #Tag{1,9}\n\n\n    if (hasMinMax.test(w) === true) {\n      w = w.replace(hasMinMax, (a, b) => {\n        let arr = b.split(/,/g);\n\n        if (arr.length === 1) {\n          // '{3}'\tExactly three times\n          obj.min = Number(arr[0]);\n          obj.max = Number(arr[0]);\n        } else {\n          // '{2,4}' Two to four times\n          // '{3,}' Three or more times\n          obj.min = Number(arr[0]);\n          obj.max = Number(arr[1] || 999);\n        } // use same method as '+'\n\n\n        obj.greedy = true; // 0 as min means the same as '?'\n\n        obj.optional = true;\n        return '';\n      });\n    } //do the actual token content\n\n\n    if (start(w) === '#') {\n      obj.tag = stripStart(w);\n      obj.tag = titleCase$2(obj.tag);\n      return obj;\n    } //dynamic function on a term object\n\n\n    if (start(w) === '@') {\n      obj.method = stripStart(w);\n      return obj;\n    }\n\n    if (w === '.') {\n      obj.anything = true;\n      return obj;\n    } //support alone-astrix\n\n\n    if (w === '*') {\n      obj.anything = true;\n      obj.greedy = true;\n      obj.optional = true;\n      return obj;\n    }\n\n    if (w) {\n      //somehow handle encoded-chars?\n      w = w.replace('\\\\*', '*');\n      w = w.replace('\\\\.', '.');\n      obj.word = w.toLowerCase();\n    }\n\n    return obj;\n  };\n\n  var _02ParseToken = parseToken$1;\n\n  const nameGroups = function (tokens) {\n    let convert = false;\n    let index = -1;\n    let current; //'fill in' capture groups between start-end\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i]; // Give name to un-named single tokens\n\n      if (token.groupType === 'single' && token.named === true) {\n        index += 1;\n        token.named = index;\n        continue;\n      } // Start converting tokens\n\n\n      if (token.groupType === 'start') {\n        convert = true;\n\n        if (typeof token.named === 'string' || typeof token.named === 'number') {\n          current = token.named;\n        } else {\n          index += 1;\n          current = index;\n        }\n      } // Ensure this token has the right name\n\n\n      if (convert) {\n        token.named = current;\n      } // Stop converting tokens\n\n\n      if (token.groupType === 'end') {\n        convert = false;\n      }\n    }\n\n    return tokens;\n  }; // optimize an 'or' lookup, when the (a|b|c) list is simple or multi-word\n\n\n  const doFastOrMode = function (tokens) {\n    return tokens.map(token => {\n      if (token.choices !== undefined) {\n        // are they all straight-up words? then optimize them.\n        let shouldPack = token.choices.every(block => {\n          if (block.length !== 1) {\n            return false;\n          }\n\n          let reg = block[0];\n\n          if (reg.word !== undefined && reg.negative !== true && reg.optional !== true && reg.method !== true) {\n            return true; //reg is simple-enough\n          }\n\n          return false;\n        });\n\n        if (shouldPack === true) {\n          let oneOf = {};\n          token.choices.forEach(block => {\n            oneOf[block[0].word] = true;\n          });\n          token.fastOr = oneOf;\n          delete token.choices;\n        }\n      }\n\n      return token;\n    });\n  }; // allow multiword OR (foo|one two)\n  // const doMultiWord = function (tokens) {\n  //   return tokens.map(token => {\n  //     if (token.choices !== undefined) {\n  //       let isMulti = token.choices.find(o => hasASpace.test(o.word)) || false\n  //       if (isMulti !== false) {\n  //         token.multiword = true\n  //         // turn all choices into arrays\n  //         token.choices = token.choices.map(choice => {\n  //           if (choice.word) {\n  //             choice.sequence = choice.word.split(hasASpace)\n  //             delete choice.word\n  //           }\n  //           return choice\n  //         })\n  //       }\n  //     }\n  //     return token\n  //   })\n  // }\n  // const doBlockMode = function (tokens) {\n  //   return tokens.map(token => {\n  //     // we've already setup fastOr mode\n  //     if (token.choices !== undefined) {\n  //       // console.log(token)\n  //     }\n  //     return token\n  //   })\n  // }\n\n\n  const postProcess$2 = function (tokens, opts = {}) {\n    // ensure all capture groups are filled between start and end\n    // give all capture groups names\n    let count = tokens.filter(t => t.groupType).length;\n\n    if (count > 0) {\n      tokens = nameGroups(tokens);\n    } // convert 'choices' format to 'fastOr' format\n\n\n    if (!opts.fuzzy) {\n      tokens = doFastOrMode(tokens);\n    } // support multiword OR (foo bar|baz)\n    // tokens = doMultiWord(tokens)\n    // support (one two three)\n    // tokens = doBlockMode(tokens)\n\n\n    return tokens;\n  };\n\n  var _03PostProcess = postProcess$2;\n\n  const parseBlocks = _01ParseBlocks;\n  const parseToken = _02ParseToken;\n  const postProcess$1 = _03PostProcess;\n\n  const isArray$2 = function (arr) {\n    return Object.prototype.toString.call(arr) === '[object Array]';\n  }; //turn an array into a 'choices' list\n\n\n  const byArray = function (arr) {\n    let blocks = arr.map(s => {\n      return [{\n        word: s\n      }];\n    });\n    return [{\n      choices: blocks,\n      operator: 'or'\n    }];\n  }; // turn a Doc object into a reg of ids to lookup\n\n\n  const fromDoc = function (doc) {\n    if (!doc || !doc.list || !doc.list[0]) {\n      return [];\n    }\n\n    let regs = [];\n    doc.list.forEach(p => {\n      let ids = [];\n      p.terms().forEach(t => {\n        ids.push(t.id);\n      });\n      regs.push(ids);\n    });\n    return [{\n      idBlocks: regs\n    }];\n  }; // add fuzziness etc to each reg\n\n\n  const addOptions = function (tokens, opts) {\n    // add default fuzzy-search limit\n    if (opts.fuzzy === true) {\n      opts.fuzzy = 0.85;\n    }\n\n    if (typeof opts.fuzzy === 'number') {\n      tokens = tokens.map(reg => {\n        // add a fuzzy-match on 'word' tokens\n        if (opts.fuzzy > 0 && reg.word) {\n          reg.fuzzy = opts.fuzzy;\n        } //add it to or|and choices too\n\n\n        if (reg.choices) {\n          reg.choices.forEach(block => {\n            block.forEach(r => {\n              r.fuzzy = opts.fuzzy;\n            });\n          });\n        }\n\n        return reg;\n      });\n    }\n\n    return tokens;\n  };\n  /** parse a match-syntax string into json */\n\n\n  const syntax$1 = function (input, opts = {}) {\n    // fail-fast\n    if (input === null || input === undefined || input === '') {\n      return [];\n    } //try to support a ton of different formats:\n\n\n    if (typeof input === 'object') {\n      if (isArray$2(input)) {\n        if (input.length === 0 || !input[0]) {\n          return [];\n        } //is it a pre-parsed reg-list?\n\n\n        if (typeof input[0] === 'object') {\n          return input;\n        } //support a flat array of normalized words\n\n\n        if (typeof input[0] === 'string') {\n          return byArray(input);\n        }\n      } //support passing-in a compromise object as a match\n\n\n      if (input && input.isA === 'Doc') {\n        return fromDoc(input);\n      }\n\n      return [];\n    }\n\n    if (typeof input === 'number') {\n      input = String(input); //go for it?\n    }\n\n    let tokens = parseBlocks(input); //turn them into objects\n\n    tokens = tokens.map(str => parseToken(str)); //clean up anything weird\n\n    tokens = postProcess$1(tokens, opts); // add fuzzy limits, etc\n\n    tokens = addOptions(tokens, opts); // console.log(tokens)\n\n    return tokens;\n  };\n\n  var matchSyntax = syntax$1; // console.log(syntax('[#Copula (#Adverb|not)+?] (#Gerund|#PastTense)'))\n\n  // take a phrase and find any of the idBlocks in it\n\n  const idLookup$1 = function (terms, regs) {\n    let matches = [];\n    let blocklist = regs[0].idBlocks;\n\n    for (let t = 0; t < terms.length; t += 1) {\n      blocklist.forEach(block => {\n        if (block.length === 0) {\n          return;\n        }\n\n        let foundAll = block.every((id, i) => {\n          return terms[t + i].id === id;\n        });\n\n        if (foundAll) {\n          matches.push({\n            match: terms.slice(t, t + block.length)\n          }); //  skip top-loop forward\n\n          t += block.length - 1;\n        }\n      });\n    }\n\n    return matches;\n  };\n\n  var idLookup_1 = idLookup$1;\n\n  const failFast$1 = _02FailFast;\n  const tryMatch = _03TryMatch;\n  const postProcess = _04PostProcess;\n  const syntax = matchSyntax;\n  const idLookup = idLookup_1;\n  /**  returns a simple array of arrays */\n\n  const matchAll$2 = function (p, regs, matchOne = false) {\n    //if we forgot to parse it..\n    if (typeof regs === 'string') {\n      regs = syntax(regs);\n    } //try to dismiss it, at-once\n\n\n    if (failFast$1(p, regs) === true) {\n      return [];\n    } //any match needs to be this long, at least\n\n\n    const minLength = regs.filter(r => r.optional !== true && r.negative !== true).length;\n    let terms = p.terms();\n    let matches = []; // these id-lookups can be super-fast\n\n    if (regs[0].idBlocks) {\n      let res = idLookup(terms, regs);\n\n      if (res && res.length > 0) {\n        return postProcess(terms, regs, res);\n      }\n    } //optimisation for '^' start logic\n\n\n    if (regs[0].start === true) {\n      let res = tryMatch(terms, regs, 0, terms.length);\n\n      if (res && res.match && res.match.length > 0) {\n        res.match = res.match.filter(m => m);\n        matches.push(res);\n      }\n\n      return postProcess(terms, regs, matches);\n    } //try starting, from every term\n\n\n    for (let i = 0; i < terms.length; i += 1) {\n      // slice may be too short\n      if (i + minLength > terms.length) {\n        break;\n      } //try it!\n\n\n      let res = tryMatch(terms.slice(i), regs, i, terms.length);\n\n      if (res && res.match && res.match.length > 0) {\n        //zoom forward!\n        i += res.match.length - 1; //[capture-groups] return some null responses\n\n        res.match = res.match.filter(m => m);\n        matches.push(res); //ok, maybe that's enough?\n\n        if (matchOne === true) {\n          return postProcess(terms, regs, matches);\n        }\n      }\n    }\n\n    return postProcess(terms, regs, matches);\n  };\n\n  var _01MatchAll = matchAll$2;\n\n  const matchAll$1 = _01MatchAll;\n  /** return anything that doesn't match.\n   * returns a simple array of arrays\n   */\n\n  const notMatch$1 = function (p, regs) {\n    let found = {};\n    let arr = matchAll$1(p, regs);\n    arr.forEach(({\n      match: ts\n    }) => {\n      ts.forEach(t => {\n        found[t.id] = true;\n      });\n    }); //return anything not found\n\n    let terms = p.terms();\n    let result = [];\n    let current = [];\n    terms.forEach(t => {\n      if (found[t.id] === true) {\n        if (current.length > 0) {\n          result.push(current);\n          current = [];\n        }\n\n        return;\n      }\n\n      current.push(t);\n    });\n\n    if (current.length > 0) {\n      result.push(current);\n    }\n\n    return result;\n  };\n\n  var not = notMatch$1;\n\n  const matchAll = _01MatchAll;\n  const notMatch = not;\n  /** return an array of matching phrases */\n\n  match.match = function (regs, justOne = false) {\n    let matches = matchAll(this, regs, justOne); //make them phrase objects\n\n    matches = matches.map(({\n      match,\n      groups\n    }) => {\n      let p = this.buildFrom(match[0].id, match.length, groups);\n      p.cache.terms = match;\n      return p;\n    });\n    return matches;\n  };\n  /** return boolean if one match is found */\n\n\n  match.has = function (regs) {\n    let matches = matchAll(this, regs, true);\n    return matches.length > 0;\n  };\n  /** remove all matches from the result */\n\n\n  match.not = function (regs) {\n    let matches = notMatch(this, regs); //make them phrase objects\n\n    matches = matches.map(list => {\n      return this.buildFrom(list[0].id, list.length);\n    });\n    return matches;\n  };\n  /** return a list of phrases that can have this tag */\n\n\n  match.canBe = function (tag, world) {\n    let results = [];\n    let terms = this.terms();\n    let previous = false;\n\n    for (let i = 0; i < terms.length; i += 1) {\n      let can = terms[i].canBe(tag, world);\n\n      if (can === true) {\n        if (previous === true) {\n          //add it to the end\n          results[results.length - 1].push(terms[i]);\n        } else {\n          results.push([terms[i]]); //make a new one\n        }\n\n        previous = can;\n      }\n    } //turn them into Phrase objects\n\n\n    results = results.filter(a => a.length > 0).map(arr => {\n      return this.buildFrom(arr[0].id, arr.length);\n    });\n    return results;\n  };\n\n  const methods$a = methods$b;\n  const matchMethods = match; // const tokenize = require('../01-tokenizer')\n\n  class Phrase$3 {\n    constructor(id, length, pool) {\n      this.start = id;\n      this.length = length;\n      this.isA = 'Phrase'; // easier than .constructor...\n\n      Object.defineProperty(this, 'pool', {\n        enumerable: false,\n        writable: true,\n        value: pool\n      });\n      Object.defineProperty(this, 'cache', {\n        enumerable: false,\n        writable: true,\n        value: {}\n      });\n      Object.defineProperty(this, 'groups', {\n        enumerable: false,\n        writable: true,\n        value: {}\n      });\n    }\n\n  }\n  /** create a new Phrase object from an id and length */\n\n\n  Phrase$3.prototype.buildFrom = function (id, length, groups) {\n    let p = new Phrase$3(id, length, this.pool); //copy-over or replace capture-groups too\n\n    if (groups && Object.keys(groups).length > 0) {\n      p.groups = groups;\n    } else {\n      p.groups = this.groups;\n    }\n\n    return p;\n  }; //apply methods\n\n\n  Object.assign(Phrase$3.prototype, matchMethods);\n  Object.assign(Phrase$3.prototype, methods$a); //apply aliases\n\n  const aliases$1 = {\n    term: 'terms'\n  };\n  Object.keys(aliases$1).forEach(k => Phrase$3.prototype[k] = Phrase$3.prototype[aliases$1[k]]);\n  var Phrase_1 = Phrase$3;\n\n  /** a key-value store of all terms in our Document */\n\n  class Pool$3 {\n    constructor(words = {}) {\n      //quiet this property in console.logs\n      Object.defineProperty(this, 'words', {\n        enumerable: false,\n        value: words\n      });\n    }\n    /** throw a new term object in */\n\n\n    add(term) {\n      this.words[term.id] = term;\n      return this;\n    }\n    /** find a term by it's id */\n\n\n    get(id) {\n      return this.words[id];\n    }\n    /** find a term by it's id */\n\n\n    remove(id) {\n      delete this.words[id];\n    }\n\n    merge(pool) {\n      Object.assign(this.words, pool.words);\n      return this;\n    }\n    /** helper method */\n\n\n    stats() {\n      return {\n        words: Object.keys(this.words).length\n      };\n    }\n\n  }\n  /** make a deep-copy of all terms */\n\n\n  Pool$3.prototype.clone = function () {\n    let keys = Object.keys(this.words);\n    let words = keys.reduce((h, k) => {\n      let t = this.words[k].clone();\n      h[t.id] = t;\n      return h;\n    }, {});\n    return new Pool$3(words);\n  };\n\n  var Pool_1 = Pool$3;\n\n  const linkTerms$2 = terms => {\n    terms.forEach((term, i) => {\n      if (i > 0) {\n        term.prev = terms[i - 1].id;\n      }\n\n      if (terms[i + 1]) {\n        term.next = terms[i + 1].id;\n      }\n    });\n  };\n\n  var _linkTerms = linkTerms$2;\n\n  // Ignore periods/questions/exclamations used in acronyms/abbreviations/numbers, etc.\n  // @spencermountain 2017 MIT\n  //proper nouns with exclamation marks\n  // const blacklist = {\n  //   yahoo: true,\n  //   joomla: true,\n  //   jeopardy: true,\n  // }\n  //regs-\n\n  const initSplit = /(\\S.+?[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049])(?=\\s+|$)/g;\n  const hasSomething = /\\S/;\n  const isAcronym$1 = /[ .][A-Z]\\.? *$/i;\n  const hasEllipse = /(?:\\u2026|\\.{2,}) *$/;\n  const newLine = /((?:\\r?\\n|\\r)+)/; // Match different new-line formats\n\n  const hasLetter = /[a-z0-9\\u00C0-\\u00FF\\u00a9\\u00ae\\u2000-\\u3300\\ud000-\\udfff]/i;\n  const startWhitespace = /^\\s+/; // Start with a regex:\n\n  const naiive_split = function (text) {\n    let all = []; //first, split by newline\n\n    let lines = text.split(newLine);\n\n    for (let i = 0; i < lines.length; i++) {\n      //split by period, question-mark, and exclamation-mark\n      let arr = lines[i].split(initSplit);\n\n      for (let o = 0; o < arr.length; o++) {\n        all.push(arr[o]);\n      }\n    }\n\n    return all;\n  };\n\n  const testIsAcronym = function (str, suffix) {\n    // early exit\n    if (suffix.indexOf('.') === -1) {\n      return false;\n    }\n\n    return isAcronym$1.test(str);\n  };\n\n  const testHasEllipse = function (str, suffix) {\n    // early exit\n    if (suffix.indexOf('.') === -1) {\n      return false;\n    }\n\n    return hasEllipse.test(str);\n  };\n\n  const testHasLetter = function (suffix, prefixHasLetter) {\n    return prefixHasLetter || hasLetter.test(suffix);\n  };\n  /** does this look like a sentence? */\n\n\n  const isSentence = function (str, suffix, abbrevs, prefixContext) {\n    // must have a letter\n    prefixContext.hasLetter = testHasLetter(suffix, prefixContext.hasLetter);\n\n    if (!prefixContext.hasLetter) {\n      return false;\n    } // check for 'F.B.I.'\n\n\n    if (testIsAcronym(str, suffix)) {\n      return false;\n    } //check for '...'\n\n\n    if (testHasEllipse(str, suffix)) {\n      return false;\n    }\n\n    let txt = str.replace(/[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049] *$/, '');\n    let words = txt.split(' ');\n    let lastWord = words[words.length - 1].toLowerCase(); // check for 'Mr.'\n\n    if (abbrevs.hasOwnProperty(lastWord)) {\n      return false;\n    } // //check for jeopardy!\n    // if (blacklist.hasOwnProperty(lastWord)) {\n    //   return false\n    // }\n\n\n    return true;\n  };\n\n  const splitSentences$1 = function (text, world) {\n    let abbrevs = world.cache.abbreviations;\n    text = text || '';\n    text = String(text);\n    let sentences = []; // First do a greedy-split..\n\n    let chunks = []; // Ensure it 'smells like' a sentence\n\n    if (!text || typeof text !== 'string' || hasSomething.test(text) === false) {\n      return sentences;\n    } // cleanup unicode-spaces\n\n\n    text = text.replace('\\xa0', ' '); // Start somewhere:\n\n    let splits = naiive_split(text); // Filter-out the crap ones\n\n    for (let i = 0; i < splits.length; i++) {\n      let s = splits[i];\n\n      if (s === undefined || s === '') {\n        continue;\n      } //this is meaningful whitespace\n\n\n      if (hasSomething.test(s) === false) {\n        //add it to the last one\n        if (chunks[chunks.length - 1]) {\n          chunks[chunks.length - 1] += s;\n          continue;\n        } else if (splits[i + 1]) {\n          //add it to the next one\n          splits[i + 1] = s + splits[i + 1];\n          continue;\n        }\n      } //else, only whitespace, no terms, no sentence\n\n\n      chunks.push(s);\n    } //detection of non-sentence chunks:\n    //loop through these chunks, and join the non-sentence chunks back together..\n\n\n    let suffix = chunks[0] || '';\n    const prefixContext = {\n      hasLetter: false\n    };\n\n    for (let i = 0; i < chunks.length; i++) {\n      let c = chunks[i]; //should this chunk be combined with the next one?\n\n      if (chunks[i + 1] && isSentence(c, suffix, abbrevs, prefixContext) === false) {\n        suffix = chunks[i + 1] || '';\n        chunks[i + 1] = c + suffix;\n      } else if (c && c.length > 0) {\n        //&& hasLetter.test(c)\n        //this chunk is a proper sentence..\n        sentences.push(c);\n        suffix = chunks[i + 1] || '';\n        prefixContext.hasLetter = false;\n      }\n\n      chunks[i] = '';\n    } //if we never got a sentence, return the given text\n\n\n    if (sentences.length === 0) {\n      return [text];\n    } //move whitespace to the ends of sentences, when possible\n    //['hello',' world'] -> ['hello ','world']\n\n\n    for (let i = 1; i < sentences.length; i += 1) {\n      let ws = sentences[i].match(startWhitespace);\n\n      if (ws !== null) {\n        sentences[i - 1] += ws[0];\n        sentences[i] = sentences[i].replace(startWhitespace, '');\n      }\n    }\n\n    return sentences;\n  };\n\n  var _01Sentences = splitSentences$1; // console.log(sentence_parser('john f. kennedy'));\n\n  const wordlike = /\\S/;\n  const isBoundary = /^[!?.]+$/;\n  const naiiveSplit = /(\\S+)/;\n  const isSlash = /[a-z] ?\\/ ?[a-z]*$/;\n  let notWord = ['.', '?', '!', ':', ';', '-', '–', '—', '--', '...', '(', ')', '[', ']', '\"', \"'\", '`'];\n  notWord = notWord.reduce((h, c) => {\n    h[c] = true;\n    return h;\n  }, {});\n\n  const hasHyphen = function (str) {\n    //dont split 're-do'\n    if (/^(re|un|micro|macro|trans|bi|mono|over)-?[^aeiou]./.test(str) === true) {\n      return false;\n    } //dont split 'bat-like'\n\n\n    if (/^([a-z\\u00C0-\\u00FF/]+)(-|–|—)(like|ish|less|able)/i.test(str) === true) {\n      return false;\n    } //letter-number 'aug-20'\n\n\n    let reg = /^([a-z\\u00C0-\\u00FF`\"'/]+)(-|–|—)([a-z0-9\\u00C0-\\u00FF].*)/i;\n\n    if (reg.test(str) === true) {\n      return true;\n    } //number-letter '20-aug'\n\n\n    let reg2 = /^([0-9]{1,4})(-|–|—)([a-z\\u00C0-\\u00FF`\"'/-]+$)/i;\n\n    if (reg2.test(str) === true) {\n      return true;\n    }\n\n    return false;\n  }; // combine '2 - 5' like '2-5' is\n\n\n  const combineRanges = function (arr) {\n    const startRange = /^[0-9]{1,4}(:[0-9][0-9])?([a-z]{1,2})? ?(-|–|—) ?$/;\n    const endRange = /^[0-9]{1,4}([a-z]{1,2})? ?$/;\n\n    for (let i = 0; i < arr.length - 1; i += 1) {\n      if (arr[i + 1] && startRange.test(arr[i]) && endRange.test(arr[i + 1])) {\n        arr[i] = arr[i] + arr[i + 1];\n        arr[i + 1] = null;\n      }\n    }\n\n    return arr;\n  }; // 'he / she' should be one word\n\n\n  const combineSlashes = function (arr) {\n    for (let i = 1; i < arr.length - 1; i++) {\n      if (isSlash.test(arr[i])) {\n        arr[i - 1] += arr[i] + arr[i + 1];\n        arr[i] = null;\n        arr[i + 1] = null;\n      }\n    }\n\n    return arr;\n  };\n\n  const splitHyphens = function (word) {\n    let arr = []; //support multiple-hyphenated-terms\n\n    const hyphens = word.split(/[-–—]/);\n    let whichDash = '-';\n    let found = word.match(/[-–—]/);\n\n    if (found && found[0]) {\n      whichDash = found;\n    }\n\n    for (let o = 0; o < hyphens.length; o++) {\n      if (o === hyphens.length - 1) {\n        arr.push(hyphens[o]);\n      } else {\n        arr.push(hyphens[o] + whichDash);\n      }\n    }\n\n    return arr;\n  };\n\n  const isArray$1 = function (arr) {\n    return Object.prototype.toString.call(arr) === '[object Array]';\n  }; //turn a string into an array of strings (naiive for now, lumped later)\n\n\n  const splitWords = function (str) {\n    let result = [];\n    let arr = []; //start with a naiive split\n\n    str = str || '';\n\n    if (typeof str === 'number') {\n      str = String(str);\n    }\n\n    if (isArray$1(str)) {\n      return str;\n    }\n\n    const words = str.split(naiiveSplit);\n\n    for (let i = 0; i < words.length; i++) {\n      //split 'one-two'\n      if (hasHyphen(words[i]) === true) {\n        arr = arr.concat(splitHyphens(words[i]));\n        continue;\n      }\n\n      arr.push(words[i]);\n    } //greedy merge whitespace+arr to the right\n\n\n    let carry = '';\n\n    for (let i = 0; i < arr.length; i++) {\n      let word = arr[i]; //if it's more than a whitespace\n\n      if (wordlike.test(word) === true && notWord.hasOwnProperty(word) === false && isBoundary.test(word) === false) {\n        //put whitespace on end of previous term, if possible\n        if (result.length > 0) {\n          result[result.length - 1] += carry;\n          result.push(word);\n        } else {\n          //otherwise, but whitespace before\n          result.push(carry + word);\n        }\n\n        carry = '';\n      } else {\n        carry += word;\n      }\n    } //handle last one\n\n\n    if (carry) {\n      if (result.length === 0) {\n        result[0] = '';\n      }\n\n      result[result.length - 1] += carry; //put it on the end\n    } // combine 'one / two'\n\n\n    result = combineSlashes(result);\n    result = combineRanges(result); // remove empty results\n\n    result = result.filter(s => s);\n    return result;\n  };\n\n  var _02Words = splitWords;\n\n  const Term$2 = Term_1;\n  const Phrase$2 = Phrase_1;\n  const Pool$2 = Pool_1;\n  const linkTerms$1 = _linkTerms;\n  const splitSentences = _01Sentences;\n  const splitTerms = _02Words;\n\n  const isArray = function (arr) {\n    return Object.prototype.toString.call(arr) === '[object Array]';\n  };\n  /** turn a string into an array of Phrase objects */\n\n\n  const fromText = function (text = '', world, pool) {\n    let sentences = null; //a bit of validation, first\n\n    if (typeof text !== 'string') {\n      if (typeof text === 'number') {\n        text = String(text);\n      } else if (isArray(text)) {\n        sentences = text;\n      }\n    } //tokenize into words\n\n\n    sentences = sentences || splitSentences(text, world);\n    sentences = sentences.map(str => splitTerms(str)); //turn them into proper objects\n\n    pool = pool || new Pool$2();\n    let phrases = sentences.map(terms => {\n      terms = terms.map(str => {\n        let term = new Term$2(str);\n        pool.add(term);\n        return term;\n      }); //add next/previous ids\n\n      linkTerms$1(terms); //return phrase objects\n\n      let p = new Phrase$2(terms[0].id, terms.length, pool);\n      p.cache.terms = terms;\n      return p;\n    }); //return them ready for a Document object\n\n    return phrases;\n  };\n\n  var _01Tokenizer = fromText;\n\n  const Term$1 = Term_1;\n  const Phrase$1 = Phrase_1;\n  const Pool$1 = Pool_1;\n  const linkTerms = _linkTerms;\n\n  const fromJSON$1 = function (json, world) {\n    let pool = new Pool$1();\n    let phrases = json.map((p, k) => {\n      let terms = p.terms.map((o, i) => {\n        let term = new Term$1(o.text);\n        term.pre = o.pre !== undefined ? o.pre : '';\n\n        if (o.post === undefined) {\n          o.post = ' '; //no given space for very last term\n\n          if (i >= p.terms.length - 1) {\n            o.post = '. ';\n\n            if (k >= p.terms.length - 1) {\n              o.post = '.';\n            }\n          }\n        }\n\n        term.post = o.post !== undefined ? o.post : ' ';\n\n        if (o.tags) {\n          o.tags.forEach(tag => term.tag(tag, '', world));\n        }\n\n        pool.add(term);\n        return term;\n      }); //add prev/next links\n\n      linkTerms(terms); // return a proper Phrase object\n\n      return new Phrase$1(terms[0].id, terms.length, pool);\n    });\n    return phrases;\n  };\n\n  var fromJSON_1 = fromJSON$1;\n\n  var _version = '13.11.4';\n\n  const entity = ['Person', 'Place', 'Organization'];\n  var nouns$2 = {\n    Noun: {\n      notA: ['Verb', 'Adjective', 'Adverb']\n    },\n    // - singular\n    Singular: {\n      isA: 'Noun',\n      notA: 'Plural'\n    },\n    //a specific thing that's capitalized\n    ProperNoun: {\n      isA: 'Noun'\n    },\n    // -- people\n    Person: {\n      isA: ['ProperNoun', 'Singular'],\n      notA: ['Place', 'Organization', 'Date']\n    },\n    FirstName: {\n      isA: 'Person'\n    },\n    MaleName: {\n      isA: 'FirstName',\n      notA: ['FemaleName', 'LastName']\n    },\n    FemaleName: {\n      isA: 'FirstName',\n      notA: ['MaleName', 'LastName']\n    },\n    LastName: {\n      isA: 'Person',\n      notA: ['FirstName']\n    },\n    NickName: {\n      isA: 'Person',\n      notA: ['FirstName', 'LastName']\n    },\n    Honorific: {\n      isA: 'Noun',\n      notA: ['FirstName', 'LastName', 'Value']\n    },\n    // -- places\n    Place: {\n      isA: 'Singular',\n      notA: ['Person', 'Organization']\n    },\n    Country: {\n      isA: ['Place', 'ProperNoun'],\n      notA: ['City']\n    },\n    City: {\n      isA: ['Place', 'ProperNoun'],\n      notA: ['Country']\n    },\n    Region: {\n      isA: ['Place', 'ProperNoun']\n    },\n    Address: {\n      isA: 'Place'\n    },\n    //---Orgs---\n    Organization: {\n      isA: ['Singular', 'ProperNoun'],\n      notA: ['Person', 'Place']\n    },\n    SportsTeam: {\n      isA: 'Organization'\n    },\n    School: {\n      isA: 'Organization'\n    },\n    Company: {\n      isA: 'Organization'\n    },\n    // - plural\n    Plural: {\n      isA: 'Noun',\n      notA: ['Singular']\n    },\n    //(not plural or singular)\n    Uncountable: {\n      isA: 'Noun'\n    },\n    Pronoun: {\n      isA: 'Noun',\n      notA: entity\n    },\n    //a word for someone doing something -'plumber'\n    Actor: {\n      isA: 'Noun',\n      notA: entity\n    },\n    //a gerund-as-noun - 'swimming'\n    Activity: {\n      isA: 'Noun',\n      notA: ['Person', 'Place']\n    },\n    //'kilograms'\n    Unit: {\n      isA: 'Noun',\n      notA: entity\n    },\n    //'Canadians'\n    Demonym: {\n      isA: ['Noun', 'ProperNoun'],\n      notA: entity\n    },\n    //`john's`\n    Possessive: {\n      isA: 'Noun' // notA: 'Pronoun',\n\n    }\n  };\n\n  var verbs$2 = {\n    Verb: {\n      notA: ['Noun', 'Adjective', 'Adverb', 'Value', 'Expression']\n    },\n    // walks\n    PresentTense: {\n      isA: 'Verb',\n      notA: ['PastTense', 'FutureTense']\n    },\n    // neutral form - 'walk'\n    Infinitive: {\n      isA: 'PresentTense',\n      notA: ['PastTense', 'Gerund']\n    },\n    //close the door!\n    Imperative: {\n      isA: 'Infinitive' // notA: ['PresentTense', 'PastTense', 'FutureTense', 'Gerund'],\n\n    },\n    // walking\n    Gerund: {\n      isA: 'PresentTense',\n      notA: ['PastTense', 'Copula', 'FutureTense']\n    },\n    // walked\n    PastTense: {\n      isA: 'Verb',\n      notA: ['FutureTense']\n    },\n    // will walk\n    FutureTense: {\n      isA: 'Verb'\n    },\n    // is\n    Copula: {\n      isA: 'Verb'\n    },\n    // would have\n    Modal: {\n      isA: 'Verb',\n      notA: ['Infinitive']\n    },\n    // had walked\n    PerfectTense: {\n      isA: 'Verb',\n      notA: 'Gerund'\n    },\n    Pluperfect: {\n      isA: 'Verb'\n    },\n    // shown\n    Participle: {\n      isA: 'PastTense'\n    },\n    // show up\n    PhrasalVerb: {\n      isA: 'Verb'\n    },\n    //'up' part\n    Particle: {\n      isA: 'PhrasalVerb'\n    },\n    //this can be an adverb\n    Auxiliary: {\n      notA: ['Noun', 'Adjective', 'Value']\n    }\n  };\n\n  var values$1 = {\n    Value: {\n      notA: ['Verb', 'Adjective', 'Adverb']\n    },\n    Ordinal: {\n      isA: 'Value',\n      notA: ['Cardinal']\n    },\n    Cardinal: {\n      isA: 'Value',\n      notA: ['Ordinal']\n    },\n    Fraction: {\n      isA: 'Value',\n      notA: ['Noun']\n    },\n    RomanNumeral: {\n      isA: 'Cardinal',\n      //can be a person, too\n      notA: ['Ordinal', 'TextValue']\n    },\n    TextValue: {\n      isA: 'Value',\n      notA: ['NumericValue']\n    },\n    NumericValue: {\n      isA: 'Value',\n      notA: ['TextValue']\n    },\n    Money: {\n      isA: 'Cardinal'\n    },\n    Percent: {\n      isA: 'Value'\n    }\n  };\n\n  const anything = ['Noun', 'Verb', 'Adjective', 'Adverb', 'Value', 'QuestionWord'];\n  var misc$3 = {\n    //--Adjectives--\n    Adjective: {\n      notA: ['Noun', 'Verb', 'Adverb', 'Value']\n    },\n    // adjectives that can conjugate\n    Comparable: {\n      isA: ['Adjective']\n    },\n    // better\n    Comparative: {\n      isA: ['Adjective']\n    },\n    // best\n    Superlative: {\n      isA: ['Adjective'],\n      notA: ['Comparative']\n    },\n    NumberRange: {// isA: ['Contraction'],\n    },\n    Adverb: {\n      notA: ['Noun', 'Verb', 'Adjective', 'Value']\n    },\n    // Dates:\n    //not a noun, but usually is\n    Date: {\n      notA: ['Verb', 'Adverb', 'Preposition', 'Adjective']\n    },\n    Month: {\n      isA: ['Date', 'Singular'],\n      notA: ['Year', 'WeekDay', 'Time']\n    },\n    WeekDay: {\n      isA: ['Date', 'Noun']\n    },\n    // 'PST'\n    Timezone: {\n      isA: ['Date', 'Noun'],\n      notA: ['Adjective', 'ProperNoun']\n    },\n    // '9:20pm'\n    Time: {\n      isA: ['Date'],\n      notA: ['AtMention']\n    },\n    //glue\n    Determiner: {\n      notA: anything\n    },\n    Conjunction: {\n      notA: anything\n    },\n    Preposition: {\n      notA: anything\n    },\n    // what, who, why\n    QuestionWord: {\n      notA: ['Determiner']\n    },\n    // peso, euro\n    Currency: {\n      isA: ['Noun']\n    },\n    // ughh\n    Expression: {\n      notA: ['Noun', 'Adjective', 'Verb', 'Adverb']\n    },\n    // dr.\n    Abbreviation: {},\n    // internet tags\n    Url: {\n      notA: ['HashTag', 'PhoneNumber', 'Verb', 'Adjective', 'Value', 'AtMention', 'Email']\n    },\n    PhoneNumber: {\n      notA: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention', 'Email']\n    },\n    HashTag: {},\n    AtMention: {\n      isA: ['Noun'],\n      notA: ['HashTag', 'Verb', 'Adjective', 'Value', 'Email']\n    },\n    Emoji: {\n      notA: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention']\n    },\n    Emoticon: {\n      notA: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention']\n    },\n    Email: {\n      notA: ['HashTag', 'Verb', 'Adjective', 'Value', 'AtMention']\n    },\n    //non-exclusive\n    Acronym: {\n      notA: ['Plural', 'RomanNumeral']\n    },\n    Negative: {\n      notA: ['Noun', 'Adjective', 'Value']\n    },\n    // if, unless, were\n    Condition: {\n      notA: ['Verb', 'Adjective', 'Noun', 'Value']\n    }\n  };\n\n  const colorMap = {\n    Noun: 'blue',\n    Verb: 'green',\n    Negative: 'green',\n    Date: 'red',\n    Value: 'red',\n    Adjective: 'magenta',\n    Preposition: 'cyan',\n    Conjunction: 'cyan',\n    Determiner: 'cyan',\n    Adverb: 'cyan'\n  };\n  /** add a debug color to some tags */\n\n  const addColors = function (tags) {\n    Object.keys(tags).forEach(k => {\n      // assigned from plugin, for example\n      if (tags[k].color) {\n        tags[k].color = tags[k].color;\n        return;\n      } // defined above\n\n\n      if (colorMap[k]) {\n        tags[k].color = colorMap[k];\n        return;\n      }\n\n      tags[k].isA.some(t => {\n        if (colorMap[t]) {\n          tags[k].color = colorMap[t];\n          return true;\n        }\n\n        return false;\n      });\n    });\n    return tags;\n  };\n\n  var _color = addColors;\n\n  const unique$4 = function (arr) {\n    return arr.filter((v, i, a) => a.indexOf(v) === i);\n  }; //add 'downward' tags (that immediately depend on this one)\n\n\n  const inferIsA$1 = function (tags) {\n    Object.keys(tags).forEach(k => {\n      let tag = tags[k];\n      let len = tag.isA.length;\n\n      for (let i = 0; i < len; i++) {\n        let down = tag.isA[i];\n\n        if (tags[down]) {\n          tag.isA = tag.isA.concat(tags[down].isA);\n        }\n      } // clean it up\n\n\n      tag.isA = unique$4(tag.isA);\n    });\n    return tags;\n  };\n\n  var _isA = inferIsA$1;\n\n  const unique$3 = function (arr) {\n    return arr.filter((v, i, a) => a.indexOf(v) === i);\n  }; // crawl the tag-graph and infer any conflicts\n  // faster than doing this at tag-time\n\n\n  const inferNotA$1 = function (tags) {\n    let keys = Object.keys(tags);\n    keys.forEach(k => {\n      let tag = tags[k];\n      tag.notA = tag.notA || [];\n      tag.isA.forEach(down => {\n        if (tags[down] && tags[down].notA) {\n          // borrow its conflicts\n          let notA = typeof tags[down].notA === 'string' ? [tags[down].isA] : tags[down].notA || [];\n          tag.notA = tag.notA.concat(notA);\n        }\n      }); // any tag that lists us as a conflict, we conflict it back.\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n\n        if (tags[key].notA.indexOf(k) !== -1) {\n          tag.notA.push(key);\n        }\n      } // clean it up\n\n\n      tag.notA = unique$3(tag.notA);\n    });\n    return tags;\n  };\n\n  var _notA = inferNotA$1;\n\n  const inferLineage = function (tags) {\n    let keys = Object.keys(tags);\n    keys.forEach(k => {\n      let tag = tags[k];\n      tag.lineage = []; // find all tags with it in their 'isA' set\n\n      for (let i = 0; i < keys.length; i++) {\n        if (tags[keys[i]].isA.indexOf(k) !== -1) {\n          tag.lineage.push(keys[i]);\n        }\n      }\n    });\n    return tags;\n  };\n\n  var _lineage = inferLineage;\n\n  const inferColor = _color;\n  const inferIsA = _isA;\n  const inferNotA = _notA;\n  const lineage = _lineage;\n\n  const validate = function (tags) {\n    // cleanup format\n    Object.keys(tags).forEach(k => {\n      let tag = tags[k]; // ensure isA is an array\n\n      tag.isA = tag.isA || [];\n\n      if (typeof tag.isA === 'string') {\n        tag.isA = [tag.isA];\n      } // ensure notA is an array\n\n\n      tag.notA = tag.notA || [];\n\n      if (typeof tag.notA === 'string') {\n        tag.notA = [tag.notA];\n      }\n    });\n    return tags;\n  }; // build-out the tag-graph structure\n\n\n  const inferTags$1 = function (tags) {\n    // validate data\n    tags = validate(tags); // build its 'down tags'\n\n    tags = inferIsA(tags); // infer the conflicts\n\n    tags = inferNotA(tags); // debug tag color\n\n    tags = inferColor(tags); // find incoming links\n\n    tags = lineage(tags);\n    return tags;\n  };\n\n  var inference = inferTags$1;\n\n  const nouns$1 = nouns$2;\n  const verbs$1 = verbs$2;\n  const values = values$1;\n  const misc$2 = misc$3;\n  const inferTags = inference; //extend tagset with new tags\n\n  const addIn = function (obj, tags) {\n    Object.keys(obj).forEach(k => {\n      tags[k] = obj[k];\n    });\n  };\n\n  const build = () => {\n    let tags = {};\n    addIn(nouns$1, tags);\n    addIn(verbs$1, tags);\n    addIn(values, tags);\n    addIn(misc$2, tags); // do the graph-stuff\n\n    tags = inferTags(tags);\n    return tags;\n  };\n\n  var tags = build();\n\n  var _data = {\n    \"Comparative\": \"true¦better\",\n    \"Superlative\": \"true¦earlier\",\n    \"PresentTense\": \"true¦is,sounds\",\n    \"Value\": \"true¦a few\",\n    \"Noun\": \"true¦a5b4c2f1here,ie,lit,m0no doubt,pd,tce;a,d;t,y;a,ca,o0;l,rp;a,l;d,l,rc\",\n    \"Copula\": \"true¦a1is,w0;as,ere;m,re\",\n    \"PastTense\": \"true¦be3came,d2had,lied,meant,sa2taken,w0;as,e0;nt,re;id;en,gan\",\n    \"Condition\": \"true¦if,lest,unless\",\n    \"Preposition\": \"true¦'o,-,aLbIcHdGexcept,fFiDmidQnotwithstandiRoBpSqua,sAt6u3vi2w0;/o,hereNith0;!in,oR;a,s-a-vis;n1p0;!on;like,til;h0ill,owards;an,r0;ough0u;!oJ;ans,ince,o that;',f0n2ut;!f;f,n0;!to;or,rom;espite,own,u3;hez,irca;ar1e0oAy;sides,tween;ri6;',bo7cross,ft6lo5m3propos,round,s1t0;!op;! long 0;as;id0ong0;!st;ng;er;ut\",\n    \"Gerund\": \"true¦accord0be0develop0go0result0stain0;ing\",\n    \"Negative\": \"true¦n0;ever,o0;!n,t\",\n    \"QuestionWord\": \"true¦how3wh0;at,e1ich,o0y;!m,se;n,re; come,'s\",\n    \"Plural\": \"true¦records\",\n    \"Conjunction\": \"true¦&,aFbBcuz,how9in caEno8o7p5supposing,t2v1wh0yet;eth9ile;ers4s;h0o;eref9o0;!uC;l0rovided that;us;r,therwi6; matt1r;!ev0;er;e0ut;cau1f0;ore;se;lthou1nd,s 0;far as,if;gh\",\n    \"Abbreviation\": \"true¦a0Jb0Gc0Ad08e05f02g01h00iYjWkanVlTmNnKoJpFque,rDs8t6u5v2w0;is0r,y0B;!c;a,b,e1i0ol,s,t;tro,vo;r,t;niv,safa,t;ce,e0;l,mp,nn,x;ask,e2fc,gt,i1q,r,s,t,u0;pt,rg;r,tu;c,nJp0;!t;b,d,e0;pGs,v;a,d,ennNhd,l,p,r1s0vt;!eud;ef,o0;b,f,n;ct,kla,nt;e0ov;b0e;!r;a4d,essrs,i1lle,me,r7s0t;!tr;n1s0;c,ter;!n;!j,r,sc;at,it,lb,ng,t0;!d;!s;an,d,r,u0;l,n;a,da,e,n0;c,f;on,wy;a,en,ov;e1ig,l0m,r,t,y;!a;b,m;a,g,ng,s1tc,x0;!p;p,q,t;ak,e0ist,r;c,f,pt,t;a3ca,l,m2o0pl,res,yn;!l0m1nn,rp;!o;dr;!l0pt;!if;a,c,l1r0;ig,os;!dg,vd;d4l3p2r1ss0tty,ug,ve;n,t;c,iz;prox,r,t;!ta;!j,m,v\",\n    \"Pronoun\": \"true¦'em,elle,h4i3me,ourselves,she5th1us,we,you0;!rself;e0ou;m,y;!l,t;e0im;!'s\",\n    \"Singular\": \"true¦0:16;1:13;2:19;a16b0Tc0Kd0De0Af05g00hWiVjel0kitty,lTmPnOoNpHquestionGrEs9t6u4w3;ay,om03;nc10s 3;doll0Lst0N; rex,a4h3ic,ragedy,v show;ere,i2;l0x return;i6ky,omeoNt3uper bowl,yst15;ep4ri2u3;de0Yff;faTmoT;st1ze;al0i2o3;om,se;! mark;a7i1la6r4u3;dQrpoI;e3ie0Hobl0V;roga00ss releaG;te,y1;rt,te0N;bjWceJthers,verview;othi2umb1;a5ee08o3;del,m3nopo0rni2th1;!my;n,yf0;i3unch;ne;ci2nsect;ead start,o3uman right;l0me4u3;se;! run;adf0entlem6irl02laci1od,rand4u3;l0y; slam,fa3mo3;th1;an;a6ella,ly,ol0r4un3;di2;ee market,iWo3;nti1sP;mi0th1;conomy,gg,ner7ven4x3;ampTecu9;i2t;ad8e5inn1o3ragonf0ude;cumentGg3i0l0or;gy;ath,t3;ec3;tive;!dy;a9eili2h7i5o3redit card;ttage,u3;ri1sin;ty,vil w3;ar;andeli1ocol3;ate;n3rF;ary;aCel0lesJo8r5u3;n3tterf0;ti2;eakfa4o3;!th1;st;dy,tt5y3;!fri3;end;le;nki2r3;ri1;er;d5l0noma0u3;nt;ly; homin5verti3;si2;ng;em\",\n    \"FemaleName\": \"true¦0:J3;1:J7;2:IG;3:IF;4:IX;5:IK;6:JO;7:H0;8:JG;9:JK;A:HN;B:HY;C:IT;D:IP;E:JD;F:HC;G:I0;aGRbFLcDPdCYeBOfB4gADh9Ti9Gj8Gk7Gl60m49n3No3Jp37qu36r2Ds16t0Eu0Cv02wVxiTyOzH;aLeIineb,oHsof2;e3Uf2la,ra;h3iKlIna,ynH;ab,ep;da,ma;da,h3iHra;nab;aKeJi0Fol5BuIvH;etAonDO;i0na;le0sen2;el,gm3Jn,rGJs8W;aoHme0nyi;m62yAE;aMendDYhiDFiH;dele8lJnH;if48niHo0;e,f47;a,helmi0lHma;a,ow;ka0nB;aNeKiHusa5;cIktoriBMlAole7viH;anC3enJ0;kF9tor2;da,lA9nus,rHs0;a,nHoniH4;a,iFQ;leHnesH4;nIHrH;i1y;g8rHxH5;su5te;aYeUhRiNoLrIuHy3;i,la;acIZiHu0L;c2na,sH;hBPta;nHr0H;iBNya;aJffaEOnHs6;a,gtiH;ng;!nFQra;aIeHomasi0;a,l9Po8Ares1;l2ndolwethu;g9Go88rIssH;!a,ie;eHi,ri9;sa,za;bPlNmLnJrIs6tHwa0;ia0um;a63yn;iHya;a,ka,s6;arB6e3iHmEDra;!ka;a,iH;a,t6;at6it6;a0Fcarlet3We0BhXiTkye,neza0oRtNuIyH;bIBlvi1;e,ha,mayIEni7sIzH;an3MetAie,y;anHi9;!a,e,nH;aDe;aJeH;fHl5GphH;an4;cHZr5;b2fiA8m0OnHphi1;d3ia,ja,ya;er3lJmon1nIobh8PtH;a,i;dy;lEPv2;aMeIirHo0risF7y5;a,lDK;ba,e0i5lJrH;iHrDOyl;!d8Hfa;ia,lDX;hd,iMki3nJrIu0w0yH;la,ma,na;i,le8on,ron;aIda,ia,nHon;a,on;!ya;k6mH;!aa;lJrItaye81vH;da,inj;e0ife;en1i0ma;anA5bNd3Nh1RiBkMlLmJndIrHs6vannaD;aDi0;ra,y;aHi3;nt6ra;lDKma,ome;ee0in8Ru3;in1ri0;a05e00hYiVoIuH;by,thDH;bScRghQl2KnPsJwIxH;anAXie,y;an,e0;aIeHie,lE; merBLann9ll1marDBt7;!lHnn1;iHyn;e,nH;a,d9K;da,i,na;ayy8D;hel62io;bDKer7yn;a,cIkHmas,n9Fta,ya;ki,o;helGki;ea,iannGDoH;da,n1K;an0bJem9Agi0iInHta,y0;a88ee;han83na;a,eH;cEAkaD;bi0chIe,i0mo0nHquEKvCy0;di,ia;aEIelHiB;!e,le;een4ia0;aNeMhKipaluk,oJrHute66;iHudenCQ;scil3LyamvaB;lly,rt2;ilome0oebe,ylH;is,lis;arl,ggy,nelope,r5t3;ige,m0TnKo5rvaDGtIulH;a,etAin1;ricHsy,tBY;a,e,ia;do3i06;ctav2dIfCZis6lHphCZumC3yunbileg;a,ga,iv2;eHvAC;l2tA;aWeUiMoIurHy5;!ay,ul;a,eJor,rIuH;f,r;aDeCma;ll1mi;aNcLhariBOkKlaJna,sHta,vi;anHha;ur;!y;a,iDTki;hoGk9VolH;a,eDJ;!mh;hir,lHna,risFsreC;!a,lBT;asuLdKh2i6CnJomi9rgEPtHzanin zah3;aHhal4;li1s6;cy,etA;a,e8iEV;nngu30;a09ckenz4e01iMoJrignayani,uriDDyH;a,rH;a,lNna,tG;bi0i3llBInH;a,iH;ca,ka,qD3;a,cTkaSlNmi,nLrItzi,yH;ar;aIiam,lH;anEO;!l,nB;dy,eHh,n4;nhGrva;aKdJiCPlH;iHy;cent,e;red;!gros;!e5;ae5hH;ae5el3Z;ag5EgNi,lKrH;edi79iIjem,on,yH;em,l;em,sF;an4iHliF;nHsCE;a,da;!an,han;b0DcASd0Be,g09ha,i08ja,l06n04rLsoum60tKuIv82x9IyHz4;a,bell,ra,soB9;de,rH;a,eC;h8Fild1t4;a,cYgUiKjor4l7Sn4s6tJwa,yH;!aHbe6Wja8lAE;m,nBH;a,ha,in1;!aJbCBeIja,lEna,sHt64;!a,ol,sa;!l1H;! Jh,mInH;!a,e,n1;!awit,i;aliAHcJeduarBfernIjHlui5Y;o6Ful2;anB;ecil2la3;arJeIie,oHr44ueriA;!t;!ry;et42i37;el4Ui76y;dHon,ue5;akran7y;ak,en,iHk,lo3O;a,ka,nB;a,re,s4te;daHg4;!l3A;alEd4elHge,isDBon0;ei8in1yn;el,le;a0Ne0CiYoQuLyH;d2la,nH;!a,dIeBGnHsCL;!a,eBF;a,sCJ;aCWcJel0PiFlIna,pHz;e,i7;a,u,wa;iHy;a0Se,ja,l2JnB;is,l1SrJttIuHvel4;el5is1;e,ie;aKeIi9na,rH;a86i9;lHn1t7;ei;!in1;aSbb9CdRepa,lMnJsIv2zH;!a,be5LetAz4;a,etA;!a,dH;a,sHy;ay,ey,i,y;a,iJja,lHy;iHy;aA0e;!aH;!n5F;ia,ya;!nH;!a,ne;aPda,e0iNjYla,nMoKsJtHx4y5;iHt4;c2t2;e2LlCG;la,nHra;a,ie,o3;a,or1;a,gh,laH;!ni;!h,nH;a,d3e,n5P;cOdon97iNkes6mi9Ana,rMtJurIvHxmi,y5;ern1in2;a,e54ie,yn;as6iIoH;nya,ya;fa,s6;a,isF;a,la;ey,ie,y;a04eZhXiOlAKoNrJyH;lHra;a,ee,ie;istHy6D;a,en,iIyH;!na;!e,n59;nul,ri,urtnB0;aOerNlAZmJrHzzy;a,stH;en,in;!berlImernH;aq;eHi,y;e,y;a,stC;!na,ra;aHei3ongordzol;dij1w5;el7QiKjsi,lJnIrH;a,i,ri;d3na,za;ey,i,lBDs4y;ra,s6;bi7cAJdiat7IeB2iRlQmPnyakuma19rNss6KtKvi7yH;!e,lH;a,eH;e,i8L;a6DeIhHi4NlEri0y;ar6Ber6Bie,leCrB2y;!lyn8Gri0;a,en,iHl5Soli0yn;!ma,n3VsF;a5il1;ei8Ei,l4;a,tl6L;a07eYiVoNuH;anLdKliHst63;a8HeHsF;!n8tH;!a,te;e5Ji3Jy;a,i7;!anNcelEd6RelGhan7RlLni,sIva0yH;a,ce;eHie;fHlEph5U;a,in1;eHie;en,n1;!a,e,n41;lHng;!i1ClH;!i1B;anMle0nJrIsH;i8Csi8C;i,ri;!a,elGif2CnH;a,etAiHy;!e,f2A;a,e8EiInH;a,e8DiH;e,n1;cMd1mi,nIque4Xsmin3Ovie3y8zH;min9;a9eIiH;ce,e,n1s;!lHsFt0F;e,le;inIk4lEquelH;in1yn;da,ta;lRmPnOo0rNsIvaHzaro;!a0lu,na;aJiIlaHob84;!n9N;do3;!belHdo3;!a,e,l39;a77en1i0ma;a,di3es,gr6Yji;a8elBogH;en1;a,e8iHo0se;a0na;aSeOiJoHusFyacin2B;da,ll4rten23snH;a,i9Q;lImaH;ri;aIdHlaI;a,egard;ry;ath1CiJlInriet7rmi8sH;sa,t1B;en2Sga,mi;di;bi2Dil8IlNnMrJsItHwa,yl8Iz7H;i5St4;n5Yti;iHmo51ri52;etH;!te;aDnaD;a,ey,l4;a03eXiSlQoOrKunJwH;enHyne1Q;!dolE;ay,el;acIetHiselB;a,chC;e,ieH;!la;ld1AogooH;sh;adys,enHor2yn2H;a,da,na;aKgi,lIna,ov89selHta;a,e,le;da,liH;an;!n0;mLnJorgIrH;ald3Pi,m3Ctru8B;etAi4W;a,eHna;s26vieve;ma;bIil,le,mHrnet,yG;al5Ni5;i5FrielH;a,l1;aVeSiRloOoz2rH;anJeIiH;da,eB;da,ja;!cH;esIiHoi0O;n1s61;!ca;!rH;a,encH;e,ia;en,o0;lIn0rnH;!anB;ec2ic2;jr,n7rKtHy9;emIiHma,ouma7;ha,ma,n;eh;ah,iBrah,za0;cr4Nd0Ne0Mi0Lk7l04mWn4YrTsNtMuLvH;aJelIiH;!e,ta;in0Gyn;!ngel2S;geni1la,ni45;h5Sta;mLperanKtH;eIhHrel5;er;l30r9;za;a,eralB;iHma,nest2Jyn;cHka,n;a,ka;a,eMiJmH;aHie,y;!li8;lHn1;ee,iHy;a,e,ja;lHrald;da,y;aWeUiNlMma,no3oKsJvH;a,iH;na,ra;a,ie;iHuiH;se;a,en,ie,y;a0c2da,f,nMsJzaH;!betHve7;e,h;aHe,ka;!beH;th;!a,or;anor,nH;!a;!in1na;leCs6;vi;eIiHna,wi0;e,th;l,n;aYeMh2iLjeneKoHul30;lor5Tminiq4In3FrHtt4;a,eCis,la,othHthy;ea,y;ba;an0AnaDon8x4ya;anQbPde,eOiMja,lJmetr2nHsir5K;a,iH;ce,se;a,iIla,orHphi8;es,is;a,l6D;dHrdH;re;!d5Cna;!b2HoraDra;a,d3nH;!a,e;hl2i0l0HmNnLphn1rIvi1XyH;le,na;a,by,cIia,lH;a,en1;ey,ie;a,etAiH;!ca,el1Cka,z;arHia;is;a0Se0Oh05i03lVoKrIynH;di,th2;istHy05;al,i0;lPnMrIurH;tn1E;aJd2NiHn2Nri8;!nH;a,e,n1;!l1X;cepci59n4sH;tanHuelo;ce,za;eHleC;en,tA;aJeoIotH;il51;!pat3;ir9rJudH;etAiH;a,ne;a,e,iH;ce,sZ;a3er3ndH;i,y;aReNloe,rH;isJyH;stH;al;sy,tH;a1Ren,iHy;!an1e,n1;deJlseIrH;!i9yl;a,y;li8;nMrH;isKlImH;ai8;a,eHotA;n1tA;!sa;d3elGtH;al,elG;cIlH;esAi44;el2ilH;e,ia,y;itlZlYmilXndWrOsMtHy5;aKeJhHri0;erHleCrEy;in1;ri0;li0ri0;a33sH;a32ie;a,iNlLmeJolIrH;ie,ol;!e,in1yn;lHn;!a,la;a,eHie,o7y;ne,y;na,sF;a0Hi0H;a,e,l1;is7l4;in,yn;a0Ie02iZlXoUrH;andSeQiJoIyH;an0nn;nwEok9;an3DdgLg0XtH;n2XtH;!aInH;ey,i,y;ny;etH;!t9;an0e,nH;da,na;i9y;bbi9glarIlo05nH;i7n4;ka;ancHossom,ythe;a,he;an17lja0nHsm3I;i7tH;ou;aUcky,linTni7rPssOtJulaDvH;!erlH;ey,y;hJsy,tH;e,iHy9;e,na;!anH;ie,y;!ie;nHt6yl;adIiH;ce;etAi8;ay,da;!triH;ce,z;rbJyaH;rmH;aa;a3ie,o3ra;a2Sb2Md23g1Zi1Qj5l16m0Xn09oi,r04sUtTuPvOwa,yIzH;ra,u0;aKes6gJlIseH;!l;in;un;!nH;a,na;a,i2Ir2J;drJgus1RrIsteH;ja;el2;a,ey,i,y;aahua,he0;hIi2Gja,mi7s2DtrH;id;aMlIraqHt21;at;eIi9yH;!n;e,iHy;gh;!nH;ti;iJleIo6pi7;ta;en,n1tA;aHelG;!n1J;a00dje5eYgUiSjQnJohito,toHya;inetAnH;el5ia;!aKeIiHmJ;e,ka;!mHtA;ar4;!belIliFmU;sa;!le;a,eliH;ca;ka,sHta;a,sa;elHie;a,iH;a,ca,n1qH;ue;!tA;te;! JbImHstasiNya;ar2;el;cla3jul2pau5;aLberKeliJiHy;e,l2naH;!ta;a,ja;!ly;hGiIl2nB;da;a,ra;le;aWba,ePiMlKma,thJyH;a,c2sH;a,on,sa;ea;iHys0N;e,s0M;a,cIn1sHza;a,e,ha,on,sa;e,ia,ja;c2is6jaKksaKna,sJxH;aHia;!nd3;ia,saH;nd3;ra;ia;i0nIyH;ah,na;a,is,naDoud;la;c6da,leCmNnLsH;haDlH;inHyY;g,n;!h;a,o,slH;ey;ee;en;at6g4nIusH;ti0;es;ie;aWdiTelMrH;eJiH;anMenH;a,e,ne;an0;na;!aLeKiIyH;nn;a,n1;a,e;!ne;!iH;de;e,lEsH;on;yn;!lH;i8yn;ne;aKbIiHrL;!gaK;ey,i9y;!e;gaH;il;dKliyJradhIs6;ha;ya;ah;a,ya\",\n    \"Actor\": \"true¦aJbGcFdCengineIfAgardenIh9instructPjournalLlawyIm8nurse,opeOp5r3s1t0;echnCherapK;ailNcientJecretary,oldiGu0;pervKrgeon;e0oofE;ceptionGsearC;hotographClumbColi1r0sychologF;actitionBogrammB;cem6t5;echanic,inist9us4;airdress8ousekeep8;arm7ire0;fight6m2;eputy,iet0;ici0;an;arpent2lerk;ricklay1ut0;ch0;er;ccoun6d2ge7r0ssis6ttenda7;chitect,t0;ist;minist1v0;is1;rat0;or;ta0;nt\",\n    \"Honorific\": \"true¦a01bYcQdPeOfiJgIhon,jr,king,lHmCoffic00p7queen,r3s0taoiseach,vice6;e1fc,gt,ir,r,u0;ltRpt,rg;cond liInBrgeaJ;abbi,e0;ar1p9s,v0;!erend; admirX;astOhd,r0vt;esideDi1of0;!essM;me mini4nce0;!ss;a3essrs,i2lle,me,r1s0;!tr;!s;stK;gistrate,j,r6yF;i3lb,t;en,ov;eld mar3rst l0;ady,i0;eutena0;nt;shG;sq,xcellency;et,oct6r,utchess;apt6hance4mdr,o0pl;lonel,m2ngress0unci3;m0wom0;an;dr,mand5;ll0;or;!ain;ldg,rig0;!adi0;er;d0sst,tty,yatullah;j,m0v;!ir0;al\",\n    \"SportsTeam\": \"true¦0:1A;1:1H;2:1G;a1Eb16c0Td0Kfc dallas,g0Ihouston 0Hindiana0Gjacksonville jagua0k0El0Bm01newToQpJqueens parkIreal salt lake,sAt5utah jazz,vancouver whitecaps,w3yW;ashington 3est ham0Rh10;natio1Oredski2wizar0W;ampa bay 6e5o3;ronto 3ttenham hotspur;blue ja0Mrapto0;nnessee tita2xasC;buccanee0ra0K;a7eattle 5heffield0Kporting kansas0Wt3;. louis 3oke0V;c1Frams;marine0s3;eah15ounG;cramento Rn 3;antonio spu0diego 3francisco gJjose earthquak1;char08paA; ran07;a8h5ittsburgh 4ortland t3;imbe0rail blaze0;pirat1steele0;il3oenix su2;adelphia 3li1;eagl1philNunE;dr1;akland 3klahoma city thunder,rlando magic;athle0Mrai3;de0; 3castle01;england 7orleans 6york 3;city fc,g4je0FknXme0Fred bul0Yy3;anke1;ian0D;pelica2sain0C;patrio0Brevolut3;ion;anchester Be9i3ontreal impact;ami 7lwaukee b6nnesota 3;t4u0Fvi3;kings;imberwolv1wi2;rewe0uc0K;dolphi2heat,marli2;mphis grizz3ts;li1;cXu08;a4eicesterVos angeles 3;clippe0dodDla9; galaxy,ke0;ansas city 3nE;chiefs,roya0E; pace0polis colU;astr06dynamo,rockeTtexa2;olden state warrio0reen bay pac3;ke0;.c.Aallas 7e3i05od5;nver 5troit 3;lio2pisto2ti3;ge0;broncZnuggeM;cowbo4maver3;ic00;ys; uQ;arCelKh8incinnati 6leveland 5ol3;orado r3umbus crew sc;api5ocki1;brow2cavalie0india2;bengaWre3;ds;arlotte horAicago 3;b4cubs,fire,wh3;iteB;ea0ulR;diff3olina panthe0; c3;ity;altimore 9lackburn rove0oston 5rooklyn 3uffalo bilN;ne3;ts;cel4red3; sox;tics;rs;oriol1rave2;rizona Ast8tlanta 3;brav1falco2h4u3;nited;aw9;ns;es;on villa,r3;os;c5di3;amondbac3;ks;ardi3;na3;ls\",\n    \"Uncountable\": \"true¦0:1J;a1Qb1Ic19d16e0Zf0Tg0Mh0Hi0Dj0Cknowled1Pl07mXnWoVpRrMsBt6vi5w1;a3ea0Ai2oo1;d,l;ldlife,ne;rmth,t0;neg16ol0Btae;e4h3oothpaste,r1una;affSou1;ble,sers,t;ermod1Lund0;a,nnis;a9cene09eri0Wh8il7kittl0Wnow,o6p4t2u1;g0Znshi0P;ati1Ke1;am,el;ace1De1;ci0Red;ap,cc0;k,v0;eep,ingl0O;d0Cfe17l1nd,tish;m10t;a4e2ic1;e,ke0L;c1laxa0Hsearch;ogni0Grea0G;bi0Hin;aOe3hys17last8o1ress03;l1rk,w0;it15y9;a11trY;bstetr13il,xygen;ational securi0Vews;a8e6ilk,o3u1;mps,s1;ic;n1o0G;ey,o1;gamy;a1chan0V;sl03t;chine1il,themat0T; learn09ry;aught0e3i2ogi0Qu1;ck,g0G;ce,ghtn06ngui0OteratL;a1isK;th0;ewel8usti0J;ce,mp1nformaStself;a1ortan0H;ti1;en0F;a4isto3o1;ck1mework,n1spitali09;ey;ry;ir,libut,ppiB;ene4o2r1um,ymna0B;aAound;l1ssip;d,f; 1t08;editOpo1;ol;i5lour,o2urnit1;ure;od,rgive1uri0wl;ne1;ss;c7sh;conomZduca6lectr5n3quip4thZvery1;body,o1thF;ne;joy1tertain1;ment;iciNonU;tiG;ar2iabet1raugh2;es;ts;a8elcius,h4ivPl3o1urrency;al,ld w1nfusiBttB;ar;assMoth3;aos,e1;e2w1;ing;se;r5sh;a5eef,i2lood,owls,read,utt0;er;lliar2s1;on;ds;g1ss;ga1;ge;c6dvi5ero3ir2mnes1rt,thlet8;ty;craft;b5d1naut5;ynam4;ce;id,ou1;st1;ics\",\n    \"Infinitive\": \"true¦0:6S;1:76;2:5C;3:74;4:73;5:67;6:6F;7:6Y;8:6Q;9:72;A:70;B:5X;C:6X;D:6L;E:77;F:5B;a6Kb66c57d4De3Xf3Jg3Dh37i2Uj2Sk2Ql2Hm26n23o1Yp1Jr0Rs06tYuTvOwHyG;awn,e31ield;aJe1Zhist6iIoGre6D;nd0rG;k,ry;pe,sh,th0;lk,nHrGsh,tDve;n,raE;d0t;aJiHoG;te,w;eGsC;!w;l6Jry;nHpGr4se;gra4Pli41;dGi9lo5Zpub3Q;erGo;mi5Cw1I;aMeLhKig5SoJrHuGwi7;ne,rn;aGe0Mi5Uu7y;de,in,nsf0p,v5J;r2ZuD;ank,reatB;nd,st;ke pa53lk,rg1Qs9;aZcWeVhTi4Dkip,lSmRnee3Lo52pQtJuGwitD;bmCck,ff0gge7ppHrGspe5;ge,pri1rou4Zvi3;ly,o36;aLeKoJrHuG;dy,mb6;aFeGi3;ngthBss,tD;p,re;m,p;in,ke,r0Qy;la58oil,rink6;e1Zi6o3J;am,ip;a2iv0oG;ck,rtBut;arDem,le5n1r3tt6;aHo2rG;atDew;le,re;il,ve;a05eIisk,oHuG;in,le,sh;am,ll;a01cZdu8fYgXje5lUmTnt,pQquPsKtJvGwa5V;eGiew,o36;al,l,rG;se,t;aFi2u44;eJi7oItG;!o2rG;i5uc20;l3rt;mb6nt,r3;e7i2;air,eHlGo43r0K;a8y;at;aFemb0i3Zo3;aHeGi3y;a1nt;te,x;a5Dr0J;act1Yer,le5u1;a13ei3k5PoGyc6;gni2Cnci6rd;ch,li2Bs5N;i1nG;ge,k;aTerSiRlOoMrIuG;b21ll,mp,rGsh;cha1s4Q;ai1eIiEoG;cGdu8greAhibCmi1te7vi2W;eAlaim;di5pa2ss,veE;iEp,rtr46sGur;e,t;aHead,uG;g,n4;n,y;ck,le;fo34mCsi7;ck,iErt4Mss,u1;bJccur,ff0pera9utweIverGwe;co47lap,ta22u1wG;helm;igh;ser3taF;eHotG;e,i8;ed,gle5;aMeLiIoHuG;ltip3Grd0;nit13ve;nHrr12sreprG;eseE;d,g6us;asu2lt,n0Nr4;intaFna4rHtG;ch,t0;ch,kGry;et;aMeLiJoGu1C;aHck,oGve;k,sB;d,n;ft,g35ke,mCnk,st2YveG;!n;a2Fc0Et;b0Nck,uG;gh,nD;iGno34;ck,ll,ss;am,oFuG;d4mp;gno2mQnGss3H;cOdica9flu0MhNsKtIvG;eGol3;nt,st;erGrodu8;a5fe2;i7tG;aGru5;ll;abCibC;lu1Fr1D;agi24pG;lemeEo22ro3;aKeIi2oHuG;nt,rry;n02pe,st;aGlp;d,t;nd6ppBrm,te;aKloAove1PrIuG;arGeAi15;ant39d;aGip,ow,umb6;b,sp;in,th0ze;aReaQiOlMoJrHuncG;ti3J;acGeshB;tu2;cus,lHrG;ce,eca7m,s30;d,l24;a1ZoG;at,od,w;gu2lGni1Xt,x;e,l;r,tu2;il,stBvG;or;a15cho,le5mSnPstNvalua9xG;a0AcLerKi7pGte19;a18eHi2laFoGreA;rt,se;ct,riG;en8;ci1t;el,han4;abGima9;li1J;ab6couXdHfor8ga4han8j03riDsu2t0vG;isi2Vy;!u2;body,er4pG;hasiGow0;ze;a07eUiLoKrHuG;mp;aHeAiG;ft;g,in;d4ubt;ff0p,re5sHvG;iZor8;aKcHliGmiApl1Btingui14;ke;oGuA;uGv0;ra4;gr1YppG;ear,ro3;cOeNfLliv0ma0Fny,pKsHterG;mi0G;cribe,er3iHtrG;oy;gn,re;a0Be0Ai5osC;eGi0By;at,ct;m,pB;iIlHrG;ea1;a2i06;de;ma4n8rGte;e,kB;a0Ae09h06i9l04oJrG;aHeGoAu0Hy;a9dC;ck,ve;llZmSnHok,py,uGv0;gh,nt;cePdu5fMsKtIvG;eGin8;rt,y;aFin0VrG;a7ibu9ol;iGtitu9;d0st;iHoGroE;rm;gu2rm;rn;biLfoKmaJpG;a2laF;in;re;nd;rt;ne;ap1e5;aGip,o1;im,w;aHeG;at,ck,w;llen4n4r4se;a1nt0;ll,ncIrGt0u1;eGry;!en;el;aSePloOoMrIuG;lGry;ly;igHuG;sh;htB;en;a7mb,o7rrGth0un8;ow;ck;ar,lHnefCtrG;ay;ie3ong;ng,se;band0Jc0Bd06ffo05gr04id,l01mu1nYppTrQsKttGvoid,waC;acIeHra5;ct;m0Fnd;h,k;k,sG;eIiHocia9uG;me;gn,st;mb6rt;le;chHgGri3;ue;!i3;eaJlIroG;aDve;ch;aud,y;l,r;noun8sw0tG;icipa9;ce;lHt0;er;e4ow;ee;rd;aRdIju7mCoR;it;st;!reA;ss;cJhie3knowled4tiva9;te;ge;ve;eIouEu1;se;nt;pt;on\",\n    \"Unit\": \"true¦0:19;a14b12c0Od0Ne0Lf0Gg0Ch09in0Hjoule0k02l00mNnMoLpIqHsqCt7volts,w6y4z3°2µ1;g,s;c,f,n;b,e2;a0Nb,d0Dears old,o1;tt0H;att0b;able4b3d,e2on1sp;!ne0;a2r0D;!l,sp;spo04; ft,uare 1;c0Id0Hf3i0Fkilo0Jm1ya0E;e0Mil1;e0li0H;eet0o0D;t,uart0;ascals,e2i1ou0Pt;c0Mnt0;rcent,t02;hms,uYz;an0JewtT;/s,b,e9g,i3l,m2p1²,³;h,s;!²;!/h,cro5l1;e1li08;! pFs1²;! 1;anEpD;g06s0B;gQter1;! 2s1;! 1;per second;b,i00m,u1x;men0x0;b,elvin0g,ilo2m1nR;!/h,ph,²;byZgXmeter1;! p2s1;! p1;er1; hour;e1g,r0z;ct1rtz0;aXogQ;al2b,igAra1;in0m0;!l1;on0;a4emtPl2t1;²,³; oz,uid ou1;nce0;hrenheit0rad0;b,x1;abyH;eciCg,l,mA;arat0eAg,m9oulomb0u1;bic 1p0;c5d4fo3i2meAya1;rd0;nch0;ot0;eci2;enti1;me4;!²,³;lsius0nti1;g2li1me1;ter0;ram0;bl,y1;te0;c4tt1;os1;eco1;nd0;re0;!s\",\n    \"Organization\": \"true¦0:46;a3Ab2Qc2Ad21e1Xf1Tg1Lh1Gi1Dj19k17l13m0Sn0Go0Dp07qu06rZsStFuBv8w3y1;amaha,m0Xou1w0X;gov,tu2S;a3e1orld trade organizati41;lls fargo,st1;fie22inghou16;l1rner br3D;-m11gree31l street journ25m11;an halNeriz3Wisa,o1;dafo2Gl1;kswagLvo;bs,kip,n2ps,s1;a tod2Rps;es35i1;lev2Xted natio2Uv; mobi2Kaco bePd bMeAgi frida9h3im horto2Tmz,o1witt2W;shiba,y1;ota,s r Y;e 1in lizzy;b3carpen33daily ma2Xguess w2holli0rolling st1Ms1w2;mashing pumpki2Ouprem0;ho;ea1lack eyed pe3Fyrds;ch bo1tl0;ys;l2s1;co,la m12;efoni07us;a6e4ieme2Gnp,o2pice gir5ta1ubaru;rbucks,to2N;ny,undgard1;en;a2Rx pisto1;ls;few25insbu26msu1X;.e.m.,adiohead,b6e3oyal 1yan2X;b1dutch she4;ank;/max,aders dige1Ed 1vl32;bu1c1Uhot chili peppe2Klobst28;ll;c,s;ant2Vizno2F;an5bs,e3fiz24hilip morrBi2r1;emier27octer & gamb1Rudenti14;nk floyd,zza hut;psi28tro1uge08;br2Qchina,n2Q; 2ason1Xda2G;ld navy,pec,range juli2xf1;am;us;a9b8e5fl,h4i3o1sa,wa;kia,tre dame,vart1;is;ke,ntendo,ss0K;l,s;c,st1Etflix,w1; 1sweek;kids on the block,york08;a,c;nd1Us2t1;ional aca2Fo,we0Q;a,cYd0O;aAcdonald9e5i3lb,o1tv,yspace;b1Nnsanto,ody blu0t1;ley crue,or0O;crosoft,t1;as,subisO;dica3rcedes2talli1;ca;!-benz;id,re;'s,s;c's milk,tt13z1Y;'ore09a3e1g,ittle caesa1Ktd;novo,x1;is,mark; pres5-z-boy,bour party;atv,fc,kk,m1od1K;art;iffy lu0Lo3pmorgan1sa;! cha1;se;hnson & johns1Sy d1R;bm,hop,n1tv;c,g,te1;l,rpol; & m,asbro,ewlett-packaTi3o1sbc,yundai;me dep1n1J;ot;tac1zbollah;hi;eneral 6hq,l5mb,o2reen d0Iu1;cci,ns n ros0;ldman sachs,o1;dye1g0B;ar;axo smith kliZencore;electr0Im1;oto0V;a3bi,da,edex,i1leetwood mac,oGrito-l0A;at,nancial1restoV; tim0;cebook,nnie mae;b06sa,u3xxon1; m1m1;ob0H;!rosceptics;aiml0Ae5isney,o3u1;nkin donuts,po0Wran dur1;an;j,w j1;on0;a,f leppa3ll,p2r spiegZstiny's chi1;ld;eche mode,t;rd;aEbc,hBi9nn,o3r1;aigsli5eedence clearwater reviv1ossra05;al;!ca c5l4m1o0Ast05;ca2p1;aq;st;dplMgate;ola;a,sco1tigroup;! systems;ev2i1;ck fil-a,na daily;r0Hy;dbury,pital o1rl's jr;ne;aGbc,eCfAl6mw,ni,o2p,r1;exiteeWos;ei3mbardiJston 1;glo1pizza;be;ng;ack & deckFo2ue c1;roX;ckbuster video,omingda1;le; g1g1;oodriN;cht3e ge0n & jer2rkshire hathaw1;ay;ryH;el;nana republ3s1xt5y5;f,kin robbi1;ns;ic;bXcSdidRerosmith,ig,lLmFnheuser-busEol,ppleAr7s3t&t,v2y1;er;is,on;hland2s1;n,ociated F; o1;il;by4g2m1;co;os; compu2bee1;'s;te1;rs;ch;c,d,erican3t1;!r1;ak; ex1;pre1;ss; 4catel2t1;air;!-luce1;nt;jazeera,qae1;da;as;/dc,a3er,t1;ivisi1;on;demy of scienc0;es;ba,c\",\n    \"Demonym\": \"true¦0:16;1:13;a0Wb0Nc0Cd0Ae09f07g04h02iYjVkTlPmLnIomHpDqatari,rBs7t5u4v3wel0Rz2;am0Fimbabwe0;enezuel0ietnam0H;g9krai1;aiwThai,rinida0Iu2;ni0Qrkmen;a4cot0Ke3ingapoOlovak,oma0Tpa05udRw2y0X;edi0Kiss;negal0Br08;mo0uU;o6us0Lw2;and0;a3eru0Hhilipp0Po2;li0Ertugu06;kist3lesti1na2raguay0;ma1;ani;amiZi2orweP;caragu0geri2;an,en;a3ex0Mo2;ngo0Erocc0;cedo1la2;gasy,y08;a4eb9i2;b2thua1;e0Dy0;o,t02;azakh,eny0o2uwaiti;re0;a2orda1;ma0Bp2;anN;celandic,nd4r2sraeli,ta02vo06;a2iT;ni0qi;i0oneV;aiDin2ondur0unN;di;amDe2hanai0reek,uatemal0;or2rm0;gi0;i2ren7;lipino,n4;cuadoVgyp6ngliJsto1thiopi0urope0;a2ominXut4;niH;a9h6o4roa3ub0ze2;ch;ti0;lom2ngol5;bi0;a6i2;le0n2;ese;lifor1m2na3;bo2eroo1;di0;angladeshi,el8o6r3ul2;gaG;aziBi2;ti2;sh;li2s1;vi0;aru2gi0;si0;fAl7merBngol0r5si0us2;sie,tr2;a2i0;li0;gent2me1;ine;ba1ge2;ri0;ni0;gh0r2;ic0;an\",\n    \"Possessive\": \"true¦anyAh5its,m3noCo1sometBthe0yo1;ir1mselves;ur0;!s;i8y0;!se4;er1i0;mse2s;!s0;!e0;lf;o1t0;hing;ne\",\n    \"Currency\": \"true¦$,aud,bScQdLeurKfJgbp,hkd,iIjpy,kGlEp8r7s3usd,x2y1z0¢,£,¥,ден,лв,руб,฿,₡,₨,€,₭,﷼;lotySł;en,uanR;af,of;h0t5;e0il5;k0q0;elM;iel,oubleLp,upeeL;e2ound st0;er0;lingI;n0soH;ceGn0;ies,y;e0i8;i,mpi7;n,r0wanzaCyatC;!onaBw;ls,nr;ori7ranc9;!o8;en3i2kk,o0;b0ll2;ra5;me4n0rham4;ar3;ad,e0ny;nt1;aht,itcoin0;!s\",\n    \"City\": \"true¦0:73;1:61;2:6G;3:5U;4:5R;a68b54c4Id4Ae46f3Yg3Jh38i2Zj2Uk2Dl22m1Kn19o16p0Uq0Sr0Ls01tPuOvLwDxiBy9z5;a7h5i4Muri4O;a5e5ongsh0;ng3J;greb,nzib5G;ang2e5okoha3Uunfu;katerin3Jrev0;a5n0O;m5Hn;arsBeAi6roclBu5;h0xi,zh5P;c7n5;d5nipeg,terth4;hoek,s1K;hi5Zkl3C;l63xford;aw;a6ern2i5ladivost5Molgogr6K;en3lni6R;lenc6Dncouv2Yr3ughn;lan bat1Drumqi,trecht;aDbilisi,eCheBi9o8r7u5;l21n63r5;in,ku;ipoli,ondh62;kyo,m34ron1QulouS;an5jua3l2Zmisoa6Era3;j4Xshui; hag65ssaloni2L;gucigal28hr0l av1W;briz,i6llinn,mpe5Ang5rtu,shk2X;i2Msh0;an,chu1n0p2Iyu0;aEeDh8kopje,owe1It7u5ydney;ra5zh51;ba0Jt;aten is59ockholm,rasbou6Auttga31;an8e6i5;jiazhua1llo1m60y0;f54n5;ya1zh4L;gh3Ot4U;att4Ao1Yv49;cramen18int DlBn5o paulo,ppo3Wrajevo; 7aa,t5;a 5ia3Io domin3I;a3fe,m1O;antonCdie3Gfrancisco,j5ped3Ssalv8;o5u0;se;em,v5z2B;ad0I;lou59peters29;aAe9i7o5;me,sar5t5A;io;ga,o5yadh;! de janei3I;cife,ykjavik;b4Uip4lei2Mnc2Swalpindi;ingdao,u5;ez2i0Q;aEeDhCiBo8r7u6yong5;ya1;eb5Aya1;ag54etor53;rt5zn0; 5la4Fo;au prin0Nelizabe29sa05;ls3Srae5Ctts2B;iladelph4Ynom pe1Doenix;r26tah tik3I;ler00naji,r4Pt5;na,r36;ak47des0Lm1Rr6s5ttawa;a3Ylo;an,d07;a8ew6i5ovosibir1Oyc;ng2Hs; 5cast39;del27orlea46taip16york;g8iro4Xn5pl2Zshv36v0;ch6ji1t5;es,o1;a1o1;a6o5p4;ya;no,sa0Y;aFeCi9o6u5;mb2Cni28sc40;gadishu,nt6s5;c17ul;evideo,re31;ami,l6n18s5;kolc,sissauga;an,waukee;cca,d5lbour2Pmph41;an,ell5i3;in,ín;cau,drAkass2Tl9n8r5shh4A;aca6ib5rakesh,se2N;or;i1Ty;a4EchEdal12i47;mo;id;aCeiAi8o6u5vRy2;anLckn0Rdhia3;n5s angel28;d2g bea1O;brev2De3Kma5nz,sb2verpo2A;!ss29;c5pzig;est0C; p6g5ho2Yn0Gusan27;os;az,la35;aHharFiClaipeBo9rak0Hu7y5;iv,o5;to;ala lump4n5;mi1sh0;be,hi0Llka2Zpavog4si5wlo2;ce;da;ev,n5rkuk;gSsha5;sa;k5toum;iv;bIdu3llakuric0Tmpa3Gn6ohsiu1ra5un1Lwaguc0T;c0Sj;d5o,p4;ah1Vy;a7e6i5ohannesZ;l1Xn0;dd37rusalem;ip4k5;ar2J;bad0mph1QnBrkutYs8ta01z5̇zm7;m6tapala5;pa;ir;fah0l6tanb5;ul;am2Zi2I;che2d5;ianap2Lo21;aBe8o5yder2W; chi mi6ms,nolulu,u5;st2;nh;f6lsin5rakli2;ki;ei;ifa,lifax,m7n5rb1Dva3;gAnov5oi;er;bu2Wilt2;aFdanEenDhCiPlasgBo9raz,u5;a5jr21;dal6ng5yaquil;zh1H;aja2Lupe;ld coa18then5;bu2P;ow;ent;e0Toa;sk;lw7n5za;dhi5gt1C;nag0S;ay;aisal26es,o8r6ukuya5;ma;ankfu5esno;rt;rt5sh0; wor6ale5;za;th;d5indhov0Nl paso;in5mont2;bur5;gh;aAe8ha0Visp4o7resd0Ju5;b5esseldorf,rb0shanbe;ai,l0G;ha,nggu0rtmu11;hradRl5troit;hi;donghHe5k08li0masc1Xr es sala1HugavpiY;gu,je2;aKebu,hAo5raio03uriti1P;lo7n6penhag0Ar5;do1Nk;akLst0V;gVm5;bo;aBen8i6ongqi1ristchur5;ch;ang m7ca5ttago1;go;g6n5;ai;du,zho1;n5ttogr12;digarh,g5;ch8sha,zh06;i9lga8mayenJn6pe town,r5;acCdiff;ber18c5;un;ry;ro;aUeMhJirmingh0ToIr9u5;chareRdapeRenos air7r5s0tu0;g5sa;as;es;a9is6usse5;ls;ba6t5;ol;ne;sil0Mtisla7zzav5;il5;le;va;goZst2;op6ubaneshw5;ar;al;iBl9ng8r5;g6l5n;in;en;aluru,hazi;fa5grade,o horizonte;st;ji1rut;ghd0BkGnAot9r7s6yan n4;ur;el,r07;celo3ranquil09;na;ou;du1g6ja lu5;ka;alo6k5;ok;re;ng;ers5u;field;a04b01cc00ddis abaZgartaYhmedWizawl,lQmNnHqaZrEsBt7uck5;la5;nd;he7l5;an5;ta;ns;h5unci2;dod,gab5;at;li5;ngt2;on;a6chora5kaNtwerp;ge;h7p5;ol5;is;eim;aravati,m0s5;terd5;am; 8buquerq7e5giers,maty;ppo,xandr5;ia;ue;basrah al qadim5mawsil al jadid5;ah;ab5;ad;la;ba;ra;idj0u dha5;bi;an;lbo6rh5;us;rg\",\n    \"Country\": \"true¦0:39;1:2M;a2Xb2Ec22d1Ye1Sf1Mg1Ch1Ai14j12k0Zl0Um0Gn05om3DpZqat1KrXsKtCu6v4wal3yemTz2;a25imbabwe;es,lis and futu2Y;a2enezue32ietnam;nuatu,tican city;.5gTkraiZnited 3ruXs2zbeE;a,sr;arab emirat0Kkingdom,states2;! of am2Y;k.,s.2; 28a.;a7haBimor-les0Bo6rinidad4u2;nis0rk2valu;ey,me2Ys and caic1U; and 2-2;toba1K;go,kel0Znga;iw2Wji2nz2S;ki2U;aCcotl1eBi8lov7o5pa2Cri lanka,u4w2yr0;az2ed9itzerl1;il1;d2Rriname;lomon1Wmal0uth 2;afr2JkLsud2P;ak0en0;erra leoEn2;gapo1Xt maart2;en;negKrb0ychellY;int 2moa,n marino,udi arab0;hele25luc0mart20;epublic of ir0Dom2Duss0w2;an26;a3eHhilippinTitcairn1Lo2uerto riM;l1rtugE;ki2Cl3nama,pua new0Ura2;gu6;au,esti2;ne;aAe8i6or2;folk1Hth3w2;ay; k2ern mariana1C;or0N;caragua,ger2ue;!ia;p2ther19w zeal1;al;mib0u2;ru;a6exi5icro0Ao2yanm05;ldova,n2roc4zamb9;a3gol0t2;enegro,serrat;co;c9dagasc00l6r4urit3yot2;te;an0i15;shall0Wtin2;ique;a3div2i,ta;es;wi,ys0;ao,ed01;a5e4i2uxembourg;b2echtenste11thu1F;er0ya;ban0Hsotho;os,tv0;azakh1Ee3iriba03o2uwait,yrgyz1E;rWsovo;eling0Jnya;a2erF;ma15p1B;c6nd5r3s2taly,vory coast;le of m19rael;a2el1;n,q;ia,oI;el1;aiSon2ungary;dur0Mg kong;aAermany,ha0Pibralt9re7u2;a5ern4inea2ya0O;!-biss2;au;sey;deloupe,m,tema0P;e2na0M;ce,nl1;ar;bTmb0;a6i5r2;ance,ench 2;guia0Dpoly2;nes0;ji,nl1;lklandTroeT;ast tim6cu5gypt,l salv5ngl1quatorial3ritr4st2thiop0;on0; guin2;ea;ad2;or;enmark,jibou4ominica3r con2;go;!n B;ti;aAentral african 9h7o4roat0u3yprQzech2; 8ia;ba,racao;c3lo2morPngo-brazzaville,okFsta r03te d'ivoiK;mb0;osD;i2ristmasF;le,na;republic;m2naTpe verde,yman9;bod0ero2;on;aFeChut00o8r4u2;lgar0r2;kina faso,ma,undi;azil,itish 2unei;virgin2; is2;lands;liv0nai4snia and herzegoviGtswaGuvet2; isl1;and;re;l2n7rmuF;ar2gium,ize;us;h3ngladesh,rbad2;os;am3ra2;in;as;fghaFlCmAn5r3ustr2zerbaijH;al0ia;genti2men0uba;na;dorra,g4t2;arct6igua and barbu2;da;o2uil2;la;er2;ica;b2ger0;an0;ia;ni2;st2;an\",\n    \"Region\": \"true¦0:2M;1:2S;2:2J;a2Pb2Cc1Yd1Tes1Sf1Qg1Kh1Gi1Bj17k12l0Zm0On07o05pZqWrTsKtFuCv9w5y3zacatec2T;akut0o0Du3;cat2k07;a4est 3isconsin,yomi1L;bengal,vi6;rwick2Ashington3;! dc;er4i3;rgin0;acruz,mont;dmurt0t3;ah,tar3; 2Ka0W;a5e4laxca1Qripu1Wu3;scaDva;langa1nnessee,x2E;bas0Um3smNtar24;aulip2Cil nadu;a8i6o4taf10u3ylh1E;ffYrr03s19;me1Bno1Puth 3;cVdU;ber0c3kkim,naloa;hu2ily;n4skatchew2xo3;ny; luis potosi,ta catari1;a3hode9;j3ngp06;asth2shahi;ingh24u3;e3intana roo;bec,en5reta0Q;ara7e5rince edward3unjab; i3;sl0A;i,nnsylv3rnambu0A;an0;!na;axa0Xdisha,h3klaho1Zntar3reg6ss0Ax0F;io;aIeDo5u3;evo le3nav0V;on;r3tt16va scot0;f8mandy,th3; 3ampton15;c5d4yo3;rk13;ako1M;aroli1;olk;bras1Lva0Bw3; 4foundland3;! and labrador;brunswick,hamp0Wjers3mexiRyork state;ey;galOyarit;a9eghala0Mi5o3;nta1r3;dov0elos;ch5dlanCn4ss3zor11;issippi,ouri;as geraOneso18;ig2oac2;dhy12harasht0Gine,ni4r3ssachusetts;anhao,i el,ylF;p3toba;ur;anca0Ie3incoln0IouisH;e3iR;ds;a5e4h3omi;aka06ul1;ntucky,ra01;bardino,lmyk0ns0Qr3;achay,el0nata0X;alis5har3iangxi;kh3;and;co;daho,llino6n3owa;d4gush3;et0;ia1;is;a5ert4i3un2;dalFm0D;fordZ;mpYrya1waii;ansu,eorg0lou7oa,u3;an4erre3izhou,jarat;ro;ajuato,gdo3;ng;cesterS;lori3uji2;da;sex;ageTe6o4uran3;go;rs3;et;lawaLrbyK;aEeaDh8o3rimea ,umbr0;ahui6l5nnectic4rsi3ventry;ca;ut;i02orado;la;e4hattisgarh,i3uvash0;apQhuahua;chn4rke3;ss0;ya;ra;lFm3;bridge6peche;a8ihar,r7u3;ck3ryat0;ingham3;shi3;re;emen,itish columb0;h0ja cal7lk6s3v6;hkorto3que;st2;an;ar0;iforn0;ia;dygea,guascalientes,lAndhr8r4ss3;am;izo1kans4un3;achal 6;as;na;a 3;pradesh;a5ber4t3;ai;ta;ba4s3;ka;ma\",\n    \"Place\": \"true¦a0Eb0Bc04d03e02f00gVhUiRjfk,kOlMmJneGoFpBque,rd,s9t6u5v4w1y0;akutOyz;ake isFis1y0;!o;!c;a,ostok,t;laanbaatar,p02safa,t;ahiti,e1he 0;bronx,hamptons;nn,x;a0fo,oho,t,under7yd;khalNsk;a2e1h0itcairn;l,x;k,nnN;!cif04;kla,nt,rd;b1w eng0;land;!r;a1co,i0t,uc;dNnn;gadZlibu,nhattZ;a0gw,hr;s,x;an1osrae,rasnoyar0ul;sk;!s;a1cn,da,nd0st;ianRochina;!x;arlem,kg,nd,oHwy;a3re0;at 0enwich;brita0lakH;in;!y village;co,l0ra;!a;urope,vergladC;ak,en,fw,ist,own4xb;al5dg,gk,h2l1o0rA;lo,nn;!t;a1ina0uuk;town;morro,tham;!if;cn,e1kk,l0rooklyn;vd;l air,verly hills;frica,lta,m7n3r2sia,tl1ve,zor0;es;!ant2;ct1iz;adyr,tarct0;ic0; oce0;an;ericas,s\",\n    \"MaleName\": \"true¦0:E4;1:D5;2:DN;3:AX;4:D1;5:CF;6:B5;7:CV;8:C7;9:DJ;A:DK;B:A5;C:C1;aCNbBKcAId9Ge8Mf84g7Hh6Ti6Dj5Dk51l4Cm34n2So2Mp2Equ2Cr1Ls11t0Eu0Dv07wTxSyIzD;aDor0;cDh9Skaria,n5V;hEkD;!aCL;ar5VeCK;aLoFuD;sDu2JvBX;if,uf;nFsEusD;ouf,sD;ef;aDg;s,tD;an,h0;hli,nBLssX;avi3ho4;aMeKiFoDyaC1;jcie8Blfgang,odrow,utD;!er;lDnst1;bFey,frD0lD;aBCiD;am,e,s;e9Eur;i,nde6sD;!l8t1;de,lErrAyD;l1ne;lDt3;aA9y;aGiDladimir,ojte7Y;cEha0kt68nceDrgAIva0;!nt;e3Ut66;lentDnA4;in4X;ghBUlyss5Bnax,sm0;aXeShOiMoHrFuEyD;!l3ro7s1;n9r5B;avAVeDist0oy,um0;ntANv5Yy;bGdFmDny;!as,mDoharu;aCSie,y;!d;iBy;mDt5;!my,othy;adFeoEia8FomD;!as;!do8O;!de5;dGrD;en9KrD;an9JeDy;ll,n9I;!dy;dgh,ha,iDnn3req,tsu4S;cB4ka;aTcotRePhLiJoHpenc3tDur1Uylve9Jzym1;anFeDua8C;f0phBSvDwa8B;e61ie;!islaw,l8;lom1nBEuD;leyma7ta;dDlBm1yabonga;!dhart7An8;aFeD;lDrm0;d1t1;h7Tne,qu0Zun,wn,y7;aDbasti0k29l4Qrg4Nth,ymoAT;m5n;!tD;!ie,y;lEmDnti2Dq5Aul;!ke5LmCu4;ik,vato7W;aXeTheA9iPoHuEyD;an,ou;b7MdEf5pe7RssD;!elBY;ol3Ey;an,bJc66dIel,geHh0landBPmGnFry,sEyD;!ce;coe,s;!aAGnC;an,eo;l46r;e5Ng3n8olfo,ri79;bCeB7;cDl8;ar6Pc6OhEkDo;!ey,ie,y;a99ie;gEid,ubAx,yDza;an1InY;gA8iD;naA4s;ch70fa4lHmGndFpha4sEul,wi2HyD;an,mo82;h7Vm5;alBDol2Uy;iATon;f,ph;ent2inD;cy,t1;aIeGhilFier72ol,rD;aka16eD;m,st1;!ip,lip;dALrcy,tD;ar,e3Gr1X;b4Kdra7Ft4ZulD;!o17;ctav3Fi3liv3mAFndrej,rHsEtDum9wA;is,to;aEc9k9m0vD;al5Z;ma;i,l53vL;aLeJiFoDu3A;aDel,j5l0ma0r3K;h,m;cEg4i49kD;!au,h7Uola;holBkDolB;!olB;al,d,il,ls1vD;il8Y;hom,thD;anDy;!a4i4;aZeWiMoHuEyD;l2Jr1;hamEr6XstaD;fa,p5C;ed,mH;di0We,hamFis2FntEsDussa;es,he;e,y;ad,ed,mD;ad,ed;cIgu4hai,kGlFnEtchD;!e6;a8Aik;house,o0Bt1;ae5YeA4olD;aj;ah,hDk8;aEeD;al,l;el,l;hElv2rD;le,ri6v2;di,met;ay0ck,hTjd,ks2DlRmadWnQrKs1tFuricExD;!imilian9Nwe6;e,io;eGhEiBtDus,yB;!eo,hew,ia;eDis;us,w;j,o;cHio,kGlFqu7Dsha6tDv2;iDy;!m,n;in,on;!el,oPus;!el9IoOus;iGu4;achDcolm,ik;ai,y;amEdi,eDmoud;sh;adDm5T;ou;aXeQiOlo3EoKuEyD;le,nd1;cGiFkDth3uk;aDe;!s;gi,s,z;as,iaD;no;g0nn7SrenFuDv8Jwe6;!iD;e,s;!zo;am,oD;n4r;a8Cevi,la5JnIoGst3thaFvD;eDi;nte;bo;!nD;!a6Sel;!ny;mFnErDur5Hwr5H;ry,s;ce,d1;ar,o5A;aLeGhaled,iDrist5Iu4Vy6X;er0p,rD;by,k,ollD;os;en0iGnDrmit,v44;!dEnDt5Z;e1Ay;a6ri59;r,th;cp3j5m66na73rEsp9them,uD;ri;im,l;a02eUiSoGuD;an,lDst2;en,iD;an,en,o,us;aNeLhnKkubBnIrGsD;eEhDi8Bue;!ua;!ph;dDge;an,i,on;!aDny;h,s,th5I;!ath5Hie,nC;!l,sDy;ph;o,qu2;an,mD;!mC;d,ffIrFsD;sDus;!e;a6BemEmai7oDry;me,ni0Y;i7Ty;!e60rD;ey,y;cKdAkImHrFsEvi3yD;!dAs1;on,p3;ed,od,rDv56;e5Nod;al,es4Xis1;a,e,oDub;b,v;k,ob,quD;es;aWbQchiPgNkeMlija,nuLonut,rJsFtDv0;ai,suD;ki;aEha0i7DmaDsac;el,il;ac,iaD;h,s;a,vinDw2;!g;k,nngu5S;!r;nacDor;io;ka;ai,rahD;im;aPeJoIuDyd9;be2KgGmber4WsD;eyEsD;a2e2;in,n;h,o;m3ra3Gsse2wa4B;aHctGitGnrErD;be2Dm0;iDy;!q11;or;th;bMlLmza,nKo,rFsEyD;a4JdA;an,s0;lGo50rFuDv8;hi4Gki,tD;a,o;is1y;an,ey;k,s;!im;ib;aVeRiPlenOoLrHuD;ilEsD;!tavo;herme,lerD;mo;aFegDov3;!g,orD;io,y;dy,h5Wnt;nzaErD;an,d1;lo;!n;lbe5Ano,oD;rg3Hvan5A;ne,oFrD;aDry;ld,rd5H;ffr8rge;brElArDv2;la28r3Sth,y;e3EielD;!i5;aTePiNlLorr0NrD;anFedDitz;!dCeDri2B;ri2A;cFkD;!ie,lD;in,yn;esLisD;!co,z36;etch3oD;yd;d4lDnn,onn;ip;deriFliEng,rnD;an06;pe,x;co;bi0di,hd;ar04dZfrYit0lSmKnHo2rFsteb0th0uge7vDymAzra;an,eD;ns,re36;gi,i0DnDrol,v2w2;est4Pie;oEriqDzo;ue;ch;aJerIiEmD;aIe2Z;lErD;!h0;!iD;o,s;s1y;nu4;be0Cd1iGliFmEt1viDwood;n,s;er,o;ot1Ys;!as,j4NsD;ha;a2en;!dCg9mGoEuEwD;a2Din;arD;do;o0Wu0W;l,nD;est;a01eRiOoHrGuFwEylD;an,l0;ay7ight;a7dl8nc0st2;ag0ew;minGnEri0ugDvydBy2D;!lB;!a2MnDov0;e6ie,y;go,iDykB;cDk;!k;armuEeDll1on,rk;go;id;anKj0lbeJmetri5nHon,rGsFvEwDxt3;ay7ey;en,in;hawn,mo0B;ek,ri0I;is,nDv3;is,y;rt;!dD;re;an,lNmLnKrGvD;e,iD;! lucDd;as,ca;en,iFne6rDyl;eDin,yl;l3Bn;n,o,us;!e,i4ny;iDon;an,en,on;e,lB;as;a09e07hYiar0lNoIrGuEyrD;il,us;rtD;!is;aDistob0U;ig;dy,lGnErD;ey,neli5y;or,rD;ad;by,e,in,l2t1;aIeFiDyK;fDnt;fo0Ft1;meEt5velaD;nd;nt;rFuEyD;!t1;de;enD;ce;aIeGrisEuD;ck;!tD;i0oph3;st3;er;d,rDs;b4leD;s,y;cDdric,s9;il;lGmer1rD;ey,lEro6y;ll;!os,t1;eb,v2;a07eZiVlaUoRrEuDyr1;ddy,rtK;aLeGiFuEyD;an,ce,on;ce,no;an,ce;nEtD;!t;dEtD;!on;an,on;dEndD;en,on;!foDl8y;rd;bErDyd;is;!by;i7ke;bFlEshD;al;al,lC;ek;nHrDshoi;at,nEtD;!r1C;aDie;rd14;!edict,iEjam2nC;ie,y;to;kaMlazs,nHrD;n8rDt;eDy;tt;ey;dDeE;ar,iD;le;ar17b0Vd0Rf0Pgust2hm0Mi0Jja0Il04m00nSputsiRrIsaHuFveEyDziz;a0kh0;ry;gust5st2;us;hi;aKchJiIjun,maHnFon,tDy0;hDu09;ur;av,oD;ld;an,nd0H;!el,ki;ie;ta;aq;as,dIgel0CtD;hoGoD;i7nD;!i09y;ne;ny;er,reDy;!as,i,s,w;iFmaDos;nu4r;el;ne,r,t;an,bePdAeJfHi,lGonFphXt1vD;aNin;on;so,zo;an,en;onTrD;edU;c,jaGksandFssaGxD;!andD;er,ru;ar,er;ndD;ro;rtN;ni;dAm9;ar;en;ad,eD;d,t;in;onD;so;aEi,olfDri0vik;!o;mDn;!a;dHeGraEuD;!bakr,lfazl;hDm;am;!l;allIelFoulaye,ulD;!lDrF;ah,o;! rD;ahm0;an;ah;av,on\",\n    \"LastName\": \"true¦0:9F;1:9V;2:9H;3:9X;4:9N;5:8J;6:9K;7:A0;8:9E;9:88;A:6E;B:77;C:6J;a9Ub8Lc7Kd6Xe6Rf6Dg5Vh58i54j4Pk45l3Nm2Rn2Eo26p1Nquispe,r17s0Ft05vVwOxNyGzD;aytsADhD;aDou,u;ng,o;aGeun7ZiDoshiA9un;!lD;diDmaz;rim,z;maDng;da,guc97mo6UsDzaB;aBhiA7;iao,u;aHeGiEoDright,u;jc8Sng;lDmm0nkl0sniewsB;liA1s3;b0iss,lt0;a5Rgn0lDng,tanabe;k0sh;aHeGiEoDukA;lk5roby5;dAllalDnogr2Zr0Zss0val37;ba,obos;lasEsel7N;lGn dFrg8EsEzD;qu7;ily9Oqu7silj9O;en b35ijk,yk;enzue95verde;aLeix1JhHi4j6ka3IoGrFsui,uD;om4ZrD;c4n0un1;an,embl8TynisB;dor95lst31m2rr9th;at5Mi7LoD;mErD;are6Ylaci64;ps3s0Y;hirAkah8Dnaka;a00chWeThPiNmKoItFuEvDzabo;en8Aobod34;ar7bot2lliv4zuB;aEein0oD;i67j3Lyan8V;l6rm0;kol5lovy5re6Psa,to,uD;ng,sa;iDy5Z;rn5tD;!h;l5YmDngh,rbu;mo6Do6J;aFeDimizu;hu,vchD;en7Cuk;la,r17;gu8mDoh,pulve8Trra4R;jDyD;on5;evi6Filtz,miDneid0roed0ulz,warz;dEtD;!z;!t;ar42h6ito,lFnDr2saBto,v2;ch7d0AtDz;a4Pe,os;as,ihAm3Zo0Q;aOeNiKoGuEyD;a66oo,u;bio,iz,sD;so,u;bEc7Bdrigue57g03j73mDosevelt,ssi,ta7Nux,w3Z;a4Be0O;ertsDins3;!on;bei0LcEes,vDzzo;as,e8;ci,hards3;ag4es,it0ut0y9;dFmEnDsmu7Zv5F;tan1;ir7os;ic,u;aSeLhJiGoErDut6;asad,if5Zochazk1W;lishc24pDrti62u55we66;e2Tov48;cEe09nD;as,to;as60hl0;aDillips;k,m,n5K;de3AetIna,rGtD;ersErovDtersC;!a,ic;en,on;eDic,ry,ss3;i8ra,tz,z;ers;h71k,rk0tEvD;ic,l3T;el,t2O;bJconnor,g2ClGnei5PrEzD;demir,turk;ella3MtDwe5N;ega,iz;iDof6GsC;vDyn1F;ei8;aPri1;aLeJguy1iFoDune44ym4;rodahl,vDwak;ak3Uik5otn56;eEkolDlsCx3;ic,ov6X;ls1miD;!n1;ils3mD;co42ec;gy,kaEray4varD;ro;jiDmu8shiD;ma;aXcVeQiPoIuD;lGnFrDssoli5T;atDpUr68;i,ov2;oz,te4B;d0l0;h4lIo0HrEsDza0Z;er,s;aFeEiDoz5r3Ete4B;!n6F;au,i8no,t4M;!l9;i2Rl0;crac5Ohhail5kke3Qll0;hmeGij0j2ElFndErci0ssiDyer19;!er;e3Bo2Z;n0Io;dAti;cartDlaughl6;hy;dMe6Dgnu5Ei0jer34kLmJnci59rFtEyD;er,r;ei,ic,su1N;iEkAqu9roqu6tinD;ez,s;a54c,nD;!o;a52mD;ad5;e5Oin1;rig4Ns1;aSeMiIoGuEyD;!nch;k2nDo;d,gu;mbarDpe2Rvr2;di;!nDu,yana1R;coln,dD;bDholm;erg;bed5TfeGhtFitn0kaEn6rDw2G;oy;!j;in1on1;bvDvD;re;iDmmy,rsCu,voie;ne,t11;aTennedy,h4iSlQnez46oJrGuEvar4woD;k,n;cerDmar58znets5;a,o2G;aDem0i2Zyeziu;sni3PvD;ch3U;bay4Frh0Jsk0TvaFwalDzl5;czDsB;yk;cFlD;!cDen3Q;huk;!ev2ic,s;e6uiveD;rt;eff0l2mu8nnun1;hn,lloe,minsBrEstra31to,ur,yDzl5;a,s0;j0GlsC;aMenLha2Pim0QoEuD;ng,r2;e2JhFnErge2Ju2NvD;anA;es,ss3;anEnsD;en,on,t3;nesDsC;en,s1;ki26s1;cGkob3RnsDrv06;en,sD;enDon;!s;ks3obs1;brahimAglesi3Ake4Ll0CnoZoneFshikEto,vanoD;u,v4A;awa;scu;aPeIitchcock,jaltal6oFrist46uD;!aDb0gh9ynh;m4ng;a23dz2fEjga2Sk,rDx3B;ak0Yvat;er,fm3B;iGmingw3NnErD;nand7re8;dDriks1;ers3;kkiEnD;on1;la,n1;dz2g1lvoLmJnsCqIrr0SsFuEyD;as36es;g1ng;anEhiD;mo0Q;i,ov08;ue;alaD;in1;rs1;aMeorgLheorghe,iJjonIoGrEuDw3;o,staf2Utierr7zm4;ayDg2iffitUub0;li1G;lub3Rme0JnD;calv9zale0I;aj,i;l,mDordaL;en7;iev3B;gnJlGmaFnd2No,rDs2Nuthi0;cDza;ia;ge;eaElD;agh0i,o;no;e,on;ab0erMiIjeldsted,lor9oGrFuD;cDent9ji3F;hs;an1Wiedm4;ntaDrt6st0urni0;na;lipEsD;ch0;ovD;!ic;hatAnandeVrD;arDei8;a,i;ov2;dHinste6riksCsDva0D;cob2ZpDtra2X;inoDosiM;za;en,s3;er,is3wards;aUeMiKjurhuJoHrisco0YuEvorakD;!oQ;arte,boEmitru,rDt2U;and,ic;is;g4he0Hmingu7n2Ord19tD;to;us;aDmitr29ssanayake;s,z; GbnaFlEmirDrvis1Lvi,w4;!ov2;gado,ic;th;bo0groot,jo03lEsilDvri9;va;a cruz,e3uD;ca;hl,mcevsBnErw6t2EviD;d5es,s;ieDku1S;ls1;ki;a05e00hNiobMlarkLoFrD;ivDuz;elli;h1lGntFop0rDs26x;byn,reD;a,ia;i,rer0O;em4liD;ns;!e;anu;aLeIiu,oGriDuJwe;stD;eDiaD;ns1;i,ng,uFwDy;!dhury;!n,onEuD;ng;!g;kEnDtterjee,v7;!d,g;ma,raboD;rty;bGl09ng2rD;eghetEnD;a,y;ti;an,ota0M;cer9lder3mpbeIrFstDvadi08;iDro;llo;doEt0uDvalho;so;so,zo;ll;es;a09eXhUiSlNoGrFyD;rne,tyD;qi;ank5iem,ooks,yant;gdan5nFruya,su,uchEyHziD;c,n5;ard;darDik;enD;ko;ov;aEondD;al;nEzD;ev2;co;ancRshwD;as;a01oDuiy4;umDwmD;ik;ckNethov1gu,ktLnJrD;gGisFnD;ascoDds1;ni;ha;er,mD;ann;gtDit7nett;ss3;asD;hi;er,ham;b2ch,ez,hMiley,kk0nHrDu0;bEnDua;es,i0;ieDosa;ri;dDik;a8yopadhyD;ay;ra;er;k,ng;ic;cosZdYguilXkhtXlSnJrGsl4yD;aEd6;in;la;aEsl4;an;ujo,ya;dFgelD;ovD;!a;ersGov,reD;aDjL;ss1;en;en,on,s3;on;eksejGiyGmeiFvD;ar7es;ez;da;ev;ar;ams;ta\",\n    \"WeekDay\": \"true¦fri2mon2s1t0wednesd3;hurs1ues1;aturd1und1;!d0;ay0;!s\",\n    \"Month\": \"true¦aBdec9feb7j2mar,nov9oct1sep0;!t8;!o8;an3u0;l1n0;!e;!y;!u1;!ru0;ary;!em0;ber;pr1ug0;!ust;!il\",\n    \"Date\": \"true¦ago,t2week0yesterd4; e0e0;nd;mr2o0;d0morrow;ay;!w\",\n    \"FirstName\": \"true¦aLblair,cHdevGgabrieFhinaEjCk9l8m4nelly,quinn,re3s0;h0umit;ay,e0iloh;a,lby;g6ne;a1el0ina,org5;!okuh9;naia,r0;ion,lo;ashawn,uca;asCe1ir0rE;an;lsAnyat2rry;am0ess6ie,ude;ie,m5;ta;le;an,on;as2h0;arl0eyenne;ie;ey,sidy;lex2ndr1ubr0;ey;a,ea;is\",\n    \"Person\": \"true¦ashton kutchTbScNdLeJgastOhHinez,jFkEleDmCnettKoBp9r4s3t2v0;a0irgin maH;lentino rossi,n go3;aylor,heresa may,iger woods,yra banks;addam hussain,carlett johanssKlobodan milosevic,uC;ay romano,e3o1ush limbau0;gh;d stewart,nald0;inho,o;ese witherspoFilly;a0ipJ;lmIris hiltD;prah winfrFra;essiaen,itt romnEubarek;bron james,e;anye west,iefer sutherland,obe bryant;aime,effers8k rowli0;ng;alle ber0itlBulk hogan;ry;ff0meril lagasse,zekiel;ie;a0enzel washingt2ick wolf;lt1nte;ar1lint0;on;dinal wols1son0;! palm2;ey;arack obama,rock;er\",\n    \"Verb\": \"true¦awak9born,cannot,fr8g7h5k3le2m1s0wors9;e8h3;ake sure,sg;ngth6ss6;eep tabs,n0;own;as0e2;!t2;iv1onna;ight0;en\",\n    \"PhrasalVerb\": \"true¦0:7L;1:79;2:7X;3:7N;4:72;5:80;6:7P;7:6V;8:78;9:7J;A:6W;B:5Z;C:7S;D:7K;a81b6Lc5Rd5Me5Lf4Kg41h3Kiron0j3Gk3Bl2Vm2Jn2Ho2Fp1Wquiet7Ar1Js0CtSuQvacuum 1wHyammer9zE;eroBip FonE;e0k0;by,up;aLeHhGiForErit5G;d 1k33;mp0n2Vpe0r7s7;eel Dip 85;aFiEn2J;gh 09rd0;n Dr E;d2in,o5J;it 61k7lk6rm 6Csh 7Nt6Qv51;rge9sE;e AherB;aTeRhPiLoJrGuEype 69;ckBrn E;d2in,o3Sup;aFiEot0y 2I;ckle6Rp 7T;ck6Qde Y;ne6Pp Es4O;d2o73up;ck GdFe Egh6Bme0p o0Gre0;aw3ba4d2in,up;e 61y 1;by,o7D;ink Erow 6D;ba4ov8up;aEe 5Zll53;m 1r X;ck9ke Flk E;ov8u54;aEba4d2in,o3Cup;ba4ft8p59w3;a0Jc0Ie0Ch08i05l01m00nZoYpTquare StKuIwE;earGiE;ngFtch E;aw3ba4o77; by;ck Eit 1m 1ss0;in,up;aJe0WiIoGrEuc3G;aigh1WiE;ke 6Gn3A;p Erm1Z;by,in,o6T;n3Br 1tc3T;c3Amp0nd Er6Zve6y 1;ba4d2up;d2o6Pup;ar37eHiGlFrEur9;ing9uc7;a3Fit 5B;l13n 1;e5Sll0;be2Wrt0;ap 4Sow D;ash 5Foke0;eep FiEow A;c3Wp 1;in,oE;ff,v8;gn 4XngFt Ez7;d2o5up; al54le0;aGoEu4T;ot Eut0w 6D;aw3ba4f3Go67;c2PdeBk58ve6;e Ill1And HtE; Etl4H;d2in,o5upE;!on;aw3ba4d2in,o27up;o5Mto;al51out0rap51;il6v7;aPeMiLoHuE;b 4Ule0n Estl7;aEba4d2in5Jo3Ut39u3S;c26w3;ll Got FuE;g2Tnd6;a27f30o5;arCin,o5;ng 53p6;aEel6inBnt0;c5Dd E;o31u0I;c24t0;aSeRiPlNoLrIsyc2HuE;ll Gt E;aEba4d2in,o1Ot3Gup;p3Lw3;ap3Kd2in,o5t3Eup;attle9ess FiHoE;p 1;ah1Oon;iEp 5Hr3Yur4Jwer 5H;nt0;ay4DuE;gBmp A;ck Eg0le9n Ap4A;o2Yup;el 4KncilB;c42ir 3Un0ss GtFy E;ba4o54; d2c24;aw3ba4o18;pEw3X;e3Wt D;arrow46erd0oE;d6te45;aMeJiIoGuE;ddl7lE;l 3I;c1Dp 1uth6ve E;al3Nd2in,o5up;ss0x 1;asur7lFss E;a1Gup;t A;ke Fn ArEs1Px0;k Ary6;do,o48up;aRePiKoEuck0;aIc3Hg HoEse0;k Ese3F;aft8ba4d2forw2Jin46ov8uE;nd8p;in,o0M;d A;e HghtGnFsEv1V;ten 4M;e 1k 1; 1e37;arCd2;av1Jt 37velE; o3U;c7p 1sh Etch9ugh6y20;in3Uo5;eFick6nock E;d2o3Q;eEyB;l 2Pp E;aw3ba4d2fTin,o07to,up;aGoFuE;ic7mpB;ke31t35;c3Azz 1;aQeLiIoFuE;nker32rry 1s0W;lEneBrse2X;d Ee 1;ba4d2fast,o01up;de Ft E;ba4on,up;aw3o5;aElp0;d Gl 2Ar Et 1;fEof;rom;in,oTu1H;c02m 1nFve Ez25;it,to;d Eg 2FkerG;d2in,o5;aTeMive Kloss 22oGrFunE; f0N;in3How 2B; Eof 21;aFb1Dit,oErCt0Pu18;ff,n,v8;bo5ft8hKw3;aw3ba4d2in,oEup,w3;ff,n,ut;aJek0t E;aFb17d2oErCup;ff,n,ut,v8;cFhEl1XrCt,w3;ead;ross;r 1;d aFnE;g 1;bo5;a08e01iSlOoKrGuE;cEel 1;k 1;eFighten Eown9y 1;aw3o2S;eEshe1N; 1z7;lGol E;aEwi1G;bo5rC;d Alow 1;aFeEip0;sh0;g Ake0mErE;e 2R;gLlJnHrFsEzzle0;h 2P;e Em 1;aw3ba4up;d0isE;h 1;e El 19;aw3fJ;ht ba4ure0;eJnFsE;s 1;cGd E;fEo25;or;e D;dVl 1;cIll Erm0t0W;ap04bGd2in,oFtE;hrough;ff,ut,v8;a4ehi20;e 0L;at0dge0nd 0Ky7;oHrE;aFess Aop E;aw3bUin,o1E;g9w9; 0Dubl7;aXhUlean AoHrEut 10;ack9eep Eoss D;by,d2oEup;n,ut;me HoFuntE; o1Q;k 1l E;d2o1I;aKbJforHin,oGtFuE;nd8;ogeth8;ut,v8;th,wE;ard;a4y;pErCw3;art;eEipB;ck Der E;on,up;lKncel0rHsGtch FveB; in;o19up;h Dt6;ry FvE;e Y;aw3o15;l Em05;aEba4d2o13up;rCw3;a0Ke0Bl04oVrJuE;bblGcklWil02lk AndlWrn 08st FtEy 13zz6;t D;in,o5up;e E;ov8;anOeaMiFush E;o0Oup;ghIng E;aFba4d2forEin,o5up;th;bo5lErCw3;ong;teE;n 1;k E;d2in,o5up;ch0;arLgKil An7oHssGttlFunce Ex D;aw3ba4;e A; arC;k Dt 1;e 1;d2up; d2;d 1;aJeed0oEurt0;cGw E;aw3ba4d2o5up;ck;k E;in,oL;ck0nk0st6; oKaHef 1nd E;d2ov8up;er;up;r0t E;d2in,oEup;ff,ut;ff,nE;to;ck Kil0nGrgFsE;h D;ain9e D;g Dk9; on;in,o5; o5;aw3d2o5up;ay;cNdJsk Guction6; oE;ff;arCo5;ouE;nd;d E;d2oEup;ff,n;own;t E;o5up;ut\",\n    \"Modal\": \"true¦c5lets,m4ought3sh1w0;ill,o5;a0o4;ll,nt;! to,a;ay,ight,ust;an,o0;uld\",\n    \"Adjective\": \"true¦0:7P;1:84;2:83;3:8A;4:7W;5:5S;6:4N;7:4O;8:58;9:6I;A:81;a6Wb6Gc63d5Je54f4Hg49h3Wi39j37k36l2Vm2Ln2Bo1Wp1Dquack,r12s0Ft07uMvJwByear5;arp0eFholeEiDoB;man5oBu6P;d6Rzy;despr7Ls5S;!sa7;eClBste2A;co1Nl o4W;!k5;aCiBola4M;b89ce versa,ol5H;ca3gabo6Gnilla;ltUnHpCrb5Msu4tterB;!mo7G; Eb1SpDsBti1M;ca7etBide dKtairs;!ti2;er,i3U;f36to da1;aLbeco75convin29deIeHfair,ivers4knGprecedVrEsCwB;iel3Nritt6A;i1XuB;pervis0spec3Y;eBu5;cognHgul6Tl6T;own;ndi2v64xpect0;cid0rB;!grou5ZsB;iz0tood;b7pp0Dssu6UuthorB;iz0;i26ra;aGeEhDi6AoCrB;i1oubl0us3M;geth8p,rp6Vuc67;ough4Wril33;en60l32mpBrr2X;o6Ati2;boo,lBn;ent0;aWcVeThSiQmug,nobbi3LoOpNqueami3LtFuBymb6H;bDi gener5DpBrpri6D;erBre0N;! dup8b,i2C;du0seq52;anda77eGiFrBunni2y3F;aightCiB;ki2p0; fBfB;or5K;ll,r5S;aBreotyp0;dfa6Cmi2;a55ec2Gir1Hlend6Cot on; call0le,mb8phist1XrBu0Vvi48;d6Ary;gnifica3nB;ce51g7;am2Re8ocki2ut;cBda1em5lfi32ni1Wpa6Jre6;o1Er42;at5Gient28reec5G;cr0me;aJeEiCoB;bu60tt51uQy4;ghtBv4;!-2Bf9;ar,bel,condi1du6Dfres5AlEpublic42sCtard0vB;ea26;is4CoB;lu1na3;aQe1Cuc4A;b5TciBllyi2;al,st;aOeLicayu6lac5Ropuli5QrCuB;bl5Jmp0n51;eGiDoB;!b07fu5RmiBp8;ne3si2;mCor,sBva1;ti6;a53e;ci5MmB;a0EiB;er,um;ac20rBti1;feAma2XpleBv38;xi2;rBst;allelDtB;-tiBi4;me;!ed;bLffJkIld fashion0nHpGrg1Eth8utFvB;al,erB;!all,niCt,wB;eiBrouB;ght;do0Ter,g2Qsi4B;en,posi1; boa5Og2Oli6;!ay; gua5MbBli6;eat;eDsB;cBer0Eole1;e6u3O;d2Xse;aJeIiHoBua4X;nFrCtB;ab7;thB;!eB;rn;chala3descri58stop;ght5;arby,cessa44ighbor5xt;k0usia1A;aIeGiDoBultip7;bi7derBl0Vnth5ot,st;a1n;nBx0;dblo0RiaBor;tu37;ande3Qdi4NnaBre;ci2;cBgenta,in,j01keshift,le,mmoth,ny,sculi6;ab33ho;aKeFiCoBu15;uti14vi2;mCteraB;l,te;it0;ftEgBth4;al,eCitiB;ma1;nda3K;!-0C;ngu3Zst,tt8;ap1Xind5no0A;agg0uB;niMstifi0veni7;de4gno4Klleg4mQnEpso 20rB;a1rB;eleBita0J;va3; KaJbr0corIdGfluenQiQnFsEtCviB;go0Fti2;aAen3SoxB;ic3B;a6i2Vul0D;a1er,oce3;iCoB;or;reA;deq3Qppr33;fBsitu,vitro;ro3;mFpB;arDerfeAoBrop8;li1rtB;a3ed;ti4;eBi0S;d2Vn3C;aIeFiDoBumdr3I;ne36ok0rrBs08ur5;if2Z;ghfalut1QspB;an2X;aClB;liYpf9;li2;lEnDrB;d04roB;wi2;dy;f,low0;ainf9ener2Oiga24lHoGraDuB;ilBng ho;ty;cCtB;ef9is;ef9;ne,od;ea2Iob4;aTeNinMlKoFrB;a1VeDoz1MustB;raB;ti2;e2Gq10tf9;oDrB; keeps,eBm8tuna1;g03ign;liB;sh;aBue3;g31tte1P;al,i1;dFmCrB;ti7;a7ini6;ne;le; up;bl0i3l27r Cux,voB;ri1uri1;oBreac1E;ff;aLfficie3lKmHnFreAthere4veExB;aAcess,pe1QtraCuB;be2Nl0E;!va1E;n,ryday; BcouraEti0O;rou1sui1;erCiB;ne3;gi2;abo23dMe17i1;g8sB;t,ygB;oi2;er;aReJiDoBrea14ue;mina3ne,ubB;le,tf9;dact1Bfficu1OsCvB;er1K;creDeas0gruntl0hone1FordCtB;a3ressM;er5;et; HadpGfFgene1PliDrang0spe1PtCvoB;ut;ail0ermin0;be1Mca1ghB;tf9;ia3;an;facto;i5magBngeroUs0G;ed,i2;ly;ertaMhief,ivil,oDrB;aBowd0u0G;mp0vZz0;loImGnCrrBve0P;eAu1I;cre1fu0LgrDsCtB;empo0Dra0E;ta3;ue3;mer08pleB;te,x;ni4ss4;in;aNeIizarHlFoCrB;and new,isk,okN;gCna fiUttom,urgeoB;is;us;ank,indB;!i2;re;autif9hiDloCnBst,yoD;eUt;v0w;nd;ul;ckCnkru0WrrB;en;!wards; priori,b0Mc0Jd09fra08g04h03lYmWntiquVppSrMsIttracti06utheHvEwB;aCkB;wa0T;ke,re;ant garCerB;age;de;ntU;leep,piDsuDtonB;isB;hi2;ri2;ab,bitEroDtiB;fiB;ci4;ga3;raB;ry;are3etiNrB;oprB;ia1;at0;aJuB;si2;arEcohCeBiIl,oof;rt;olB;ic;mi2;ead;ainDgressiConiB;zi2;ve;st;id; IeGuFvB;aCerB;se;nc0;ed;lt;pt,qB;ua1;hoc,infinitB;um;cuCtu4u1;al;ra1;erLlKoIruHsCuB;nda3;e3oCtraA;ct;lu1rbi2;ng;te;pt;aBve;rd;aze,e;ra3;nt\",\n    \"Comparable\": \"true¦0:41;1:4I;2:45;3:2Y;4:4B;5:3X;a4Ob44c3Od3De35f2Rg2Fh24i1Vj1Uk1Rl1Jm1Dn17o15p0Vqu0Tr0KsTtMuIvFw7y6za13;ell27ou4;aBe9hi1Yi7r6;o4y;ck0Ode,l6n1ry,se;d,y;a6i4Mt;k,ry;n1Tr6sK;m,y;a7e6ulgar;nge5rda2xi4;g9in,st;g0n6pco3Mse5;like0t6;i1r6;ue;aAen9hi8i7ough,r6;anqu2Oen1ue;dy,g3Sme0ny,r09;ck,n,rs2P;d40se;ll,me,rt,s6wd45;te5;aVcarUeThRiQkin0FlMmKoHpGqua1FtAu7w6;eet,ift;b7dd13per0Gr6;e,re2H;sta2Ft3;aAe9iff,r7u6;pXr1;a6ict,o4;ig3Fn0U;a1ep,rn;le,rk;e22i3Fright0;ci28ft,l7o6re,ur;n,thi4;emn,id;a6el0ooth;ll,rt;e8i6ow,y;ck,g35m6;!y;ek,nd3D;ck,l0mp3;a6iTort,rill,y;dy,ll0Xrp;cu0Rve0Rxy;ce,ed,y;d,fe,int0l1Vv14;aBe9i8o6ude;mantic,o1Isy,u6;gh,nd;ch,pe,tzy;a6d,mo0H;dy,l;gg7ndom,p6re,w;id;ed;ai2i6;ck,et;aEhoDi1QlCoBr8u6;ny,r6;e,p3;egna2ic7o6;fouYud;ey,k0;li04or,te1B;ain,easa2;ny;in5le;dd,f6i0ld,ranQ;fi10;aAe8i7o6;b3isy,rm15sy;ce,mb3;a6w;r,t;ive,rr01;aAe8ild,o7u6;nda19te;ist,o1;a6ek,llX;n,s0ty;d,tuQ;aBeAi9o6ucky;f0Un7o1Du6ve0w17y0T;d,sy;e0g;g1Tke0tt3ve0;an,wd;me,r6te;ge;e7i6;nd;en;ol0ui1P;cy,ll,n6;sBt6;e6ima8;llege2r6;es7media6;te;ti4;ecu6ta2;re;aEeBiAo8u6;ge,m6ng1R;b3id;ll6me0t;ow;gh,l0;a6f04sita2;dy,v6;en0y;nd1Hppy,r6te5;d,sh;aGenFhDiClBoofy,r6;a9e8is0o6ue1E;o6ss;vy;at,en,y;nd,y;ad,ib,ooI;a2d1;a6o6;st0;t3uiY;u1y;aIeeb3iDlat,oAr8u6;ll,n6r14;!ny;aHe6iend0;e,sh;a7r6ul;get5mG;my;erce8n6rm;an6e;ciC;! ;le;ir,ke,n0Fr,st,t,ulA;aAerie,mp9sse7v6xtre0Q;il;nti6;al;ty;r7s6;tern,y;ly,th0;aFeCi9r7u6;ll,mb;u6y;nk;r7vi6;ne;e,ty;a6ep,nD;d6f,r;!ly;mp,pp03rk;aHhDlAo8r7u6;dd0r0te;isp,uel;ar6ld,mmon,ol,st0ward0zy;se;e6ou1;a6vW;n,r;ar8e6il0;ap,e6;sy;mi4;gey,lm8r6;e5i4;ful;!i4;aNiLlIoEr8u6;r0sy;ly;aAi7o6;ad,wn;ef,g7llia2;nt;ht;sh,ve;ld,r7un6;cy;ed,i4;ng;a7o6ue;nd,o1;ck,nd;g,tt6;er;d,ld,w1;dy;bsu9ng8we6;so6;me;ry;rd\",\n    \"TextOrdinal\": \"true¦bGeDf9hundredHmGnin7qu6s4t0zeroH;enGh1rFwe0;lfFn9;ir0ousandE;d,t4;e0ixt9;cond,ptAvent8xtA;adr9int9;et0th;e6ie8;i2o0;r0urt3;tie5;ft1rst;ight0lev1;e0h,ie2;en1;illion0;th\",\n    \"Cardinal\": \"true¦bHeEf8hundred,mHnineAone,qu6s4t0zero;en,h2rGw0;e0o;lve,n8;irt9ousandEree;e0ix5;pt1ven4xt1;adr0int0;illion;i3o0;r1ur0;!t2;ty;ft0ve;e2y;ight0lev1;!e0y;en;illion0;!s\",\n    \"Expression\": \"true¦a02b01dXeVfuck,gShLlImHnGoDpBshAtsk,u7voi04w3y0;a1eLu0;ck,p;!a,hoo,y;h1ow,t0;af,f;e0oa;e,w;gh,h0;! 0h,m;huh,oh;eesh,hh,it;ff,hew,l0sst;ease,z;h1o0w,y;h,o,ps;!h;ah,ope;eh,mm;m1ol0;!s;ao,fao;a4e2i,mm,oly1urr0;ah;! mo6;e,ll0y;!o;ha0i;!ha;ah,ee,o0rr;l0odbye;ly;e0h,t cetera,ww;k,p;'oh,a0uh;m0ng;mit,n0;!it;ah,oo,ye; 1h0rgh;!em;la\",\n    \"Adverb\": \"true¦a08by 06d02eYfShQinPjustOkinda,mMnJoEpCquite,r9s5t2up1very,well,ye0;p,s; to,wards5;h1iny bit,o0wiO;o,t6ward;en,us;eldom,o0uch;!me1rt0; of;hYtimes,w09;a1e0;alT;ndomSthN;ar excellDer0oint blank; Nhaps;f3n0;ce0ly;! 0;ag02moW; courIten;ewKo0; longEt 0;onIwithstanding;aybe,eanwhiAore0;!ovB;! aboU;deed,steV;en0;ce;or2u0;lArther0;!moJ; 0ev3;examp0good,suH;le;n1v0;er; mas0ough;se;e0irect1; 1finite0;ly;ju8trop;far,n0;ow; DbroCd nauseam,gBl6ny3part,s2t 0w4;be6l0mo6wor6;arge,ea5; soon,ide;mo1w0;ay;re;l 1mo0one,ready,so,ways;st;b1t0;hat;ut;ain;ad;lot,posteriori\",\n    \"Determiner\": \"true¦aBboth,d9e6few,l4mu8neiDown,plenty,s3th2various,wh0;at0ich0;evC;at,e4is,ose;everal,ome;a,e0;!ast,s;a1i6l0very;!se;ch;e0u;!s;!n0;!o0y;th0;er\"\n  };\n\n  const seq = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n        cache = seq.split(\"\").reduce(function (n, o, e) {\n    return n[o] = e, n;\n  }, {}),\n        toAlphaCode = function (n) {\n    if (void 0 !== seq[n]) return seq[n];\n    let o = 1,\n        e = 36,\n        t = \"\";\n\n    for (; n >= e; n -= e, o++, e *= 36);\n\n    for (; o--;) {\n      const o = n % 36;\n      t = String.fromCharCode((o < 10 ? 48 : 55) + o) + t, n = (n - o) / 36;\n    }\n\n    return t;\n  },\n        fromAlphaCode = function (n) {\n    if (void 0 !== cache[n]) return cache[n];\n    let o = 0,\n        e = 1,\n        t = 36,\n        r = 1;\n\n    for (; e < n.length; o += t, e++, t *= 36);\n\n    for (let e = n.length - 1; e >= 0; e--, r *= 36) {\n      let t = n.charCodeAt(e) - 48;\n      t > 10 && (t -= 7), o += t * r;\n    }\n\n    return o;\n  };\n\n  var encoding = {\n    toAlphaCode: toAlphaCode,\n    fromAlphaCode: fromAlphaCode\n  },\n      symbols = function (n) {\n    const o = new RegExp(\"([0-9A-Z]+):([0-9A-Z]+)\");\n\n    for (let e = 0; e < n.nodes.length; e++) {\n      const t = o.exec(n.nodes[e]);\n\n      if (!t) {\n        n.symCount = e;\n        break;\n      }\n\n      n.syms[encoding.fromAlphaCode(t[1])] = encoding.fromAlphaCode(t[2]);\n    }\n\n    n.nodes = n.nodes.slice(n.symCount, n.nodes.length);\n  };\n\n  const indexFromRef = function (n, o, e) {\n    const t = encoding.fromAlphaCode(o);\n    return t < n.symCount ? n.syms[t] : e + t + 1 - n.symCount;\n  },\n        toArray = function (n) {\n    const o = [],\n          e = (t, r) => {\n      let s = n.nodes[t];\n      \"!\" === s[0] && (o.push(r), s = s.slice(1));\n      const c = s.split(/([A-Z0-9,]+)/g);\n\n      for (let s = 0; s < c.length; s += 2) {\n        const u = c[s],\n              i = c[s + 1];\n        if (!u) continue;\n        const l = r + u;\n\n        if (\",\" === i || void 0 === i) {\n          o.push(l);\n          continue;\n        }\n\n        const f = indexFromRef(n, i, t);\n        e(f, l);\n      }\n    };\n\n    return e(0, \"\"), o;\n  },\n        unpack$2 = function (n) {\n    const o = {\n      nodes: n.split(\";\"),\n      syms: [],\n      symCount: 0\n    };\n    return n.match(\":\") && symbols(o), toArray(o);\n  };\n\n  var unpack_1$1 = unpack$2,\n      unpack_1$1$1 = function (n) {\n    const o = n.split(\"|\").reduce((n, o) => {\n      const e = o.split(\"¦\");\n      return n[e[0]] = e[1], n;\n    }, {}),\n          e = {};\n    return Object.keys(o).forEach(function (n) {\n      const t = unpack_1$1(o[n]);\n      \"true\" === n && (n = !0);\n\n      for (let o = 0; o < t.length; o++) {\n        const r = t[o];\n        !0 === e.hasOwnProperty(r) ? !1 === Array.isArray(e[r]) ? e[r] = [e[r], n] : e[r].push(n) : e[r] = n;\n      }\n    }), e;\n  };\n\n  var efrtUnpack_min = unpack_1$1$1;\n\n  var misc$1 = {\n    // numbers\n    '20th century fox': 'Organization',\n    // '3m': 'Organization',\n    '7 eleven': 'Organization',\n    'motel 6': 'Organization',\n    g8: 'Organization',\n    vh1: 'Organization',\n    q1: 'Date',\n    q2: 'Date',\n    q3: 'Date',\n    q4: 'Date',\n    her: ['Possessive', 'Pronoun'],\n    his: ['Possessive', 'Pronoun'],\n    their: ['Possessive', 'Pronoun'],\n    themselves: ['Possessive', 'Pronoun'],\n    your: ['Possessive', 'Pronoun'],\n    our: ['Possessive', 'Pronoun'],\n    my: ['Possessive', 'Pronoun'],\n    its: ['Possessive', 'Pronoun']\n  };\n\n  const lexData = _data;\n  const unpack$1 = efrtUnpack_min;\n  let misc = misc$1;\n  const fancy = {\n    Unit: (lex, w) => {\n      lex[w] = ['Abbreviation', 'Unit'];\n    },\n    Cardinal: (lex, w) => {\n      lex[w] = ['TextValue', 'Cardinal'];\n    },\n    TextOrdinal: (lex, w) => {\n      lex[w] = ['Ordinal', 'TextValue'];\n      lex[w + 's'] = ['TextValue', 'Fraction']; // add 'millionths'\n    },\n    // add plural/singular forms\n    Singular: (lex, w, world) => {\n      lex[w] = 'Singular';\n      let plural = world.transforms.toPlural(w, world);\n      lex[plural] = lex[plural] || 'Plural';\n    },\n    // conjugate these verbs\n    Infinitive: (lex, w, world) => {\n      lex[w] = 'Infinitive';\n      let conj = world.transforms.conjugate(w, world);\n      let tags = Object.keys(conj);\n\n      for (let i = 0; i < tags.length; i++) {\n        let str = conj[tags[i]];\n        lex[str] = lex[str] || tags[i]; // only if it's safe\n      }\n    },\n    // conjugate other Adjectival forms\n    Comparable: (lex, w, world) => {\n      lex[w] = 'Comparable';\n      let conj = world.transforms.adjectives(w);\n      let tags = Object.keys(conj);\n\n      for (let i = 0; i < tags.length; i++) {\n        let word = conj[tags[i]];\n        lex[word] = lex[word] || tags[i]; // only if it's safe\n      }\n    },\n    //conjugate phrasal-verbs\n    PhrasalVerb: (lex, w, world) => {\n      // whole thing\n      lex[w] = ['PhrasalVerb', 'Infinitive']; //add original form\n\n      let words = w.split(' '); // lex[words[0]] = lex[words[0]] || 'Infinitive'\n      // //conjugate first word\n\n      let conj = world.transforms.conjugate(words[0], world);\n      let tags = Object.keys(conj);\n\n      for (let i = 0; i < tags.length; i++) {\n        let str = conj[tags[i]] + ' ' + words[1];\n        lex[str] = lex[str] || ['PhrasalVerb', tags[i]];\n        world.hasCompound[conj[tags[i]]] = true;\n      }\n    },\n    // inflect our demonyms - 'germans'\n    Demonym: (lex, w, world) => {\n      lex[w] = 'Demonym';\n      let plural = world.transforms.toPlural(w, world);\n      lex[plural] = lex[plural] || ['Demonym', 'Plural']; // only if it's safe\n    }\n  }; // let a user explode their lexicon, too\n\n  const addWords = function (wordsObj, lex, world) {\n    Object.keys(wordsObj).forEach(word => {\n      let tag = wordsObj[word]; // abbreviation-words are used in our tokenizer\n\n      if (tag === 'Abbreviation' || tag === 'Unit') {\n        world.cache.abbreviations[word] = true;\n      } // cache multi-words\n\n\n      let multi = word.split(' ');\n\n      if (multi.length > 1) {\n        world.hasCompound[multi[0]] = true;\n      } // do some ad-hoc work before adding it\n\n\n      if (fancy[tag] !== undefined) {\n        fancy[tag](lex, word, world);\n        return;\n      } //set it in our lexicon, basic\n\n\n      if (lex[word] === undefined) {\n        lex[word] = tag;\n        return;\n      } // if we already have that word\n\n\n      if (typeof lex[word] === 'string') {\n        lex[word] = [lex[word]];\n      }\n\n      if (typeof tag === 'string') {\n        lex[word].push(tag);\n      } else {\n        lex[word] = lex[word].concat(tag);\n      }\n    });\n  }; // we do some ad-hoc stuff here, building-up our word-list\n\n\n  const buildOut = function (world) {\n    //our bag of words\n    let lexicon = Object.assign({}, misc); // start adding words to the lex\n\n    Object.keys(lexData).forEach(tag => {\n      let wordsObj = unpack$1(lexData[tag]); // this part sucks\n\n      Object.keys(wordsObj).forEach(w => {\n        wordsObj[w] = tag;\n      });\n      addWords(wordsObj, lexicon, world);\n    }); // console.log(Object.keys(lexicon).length)\n\n    return lexicon;\n  };\n\n  var unpack_1 = {\n    buildOut: buildOut,\n    addWords: addWords\n  };\n\n  const addIrregulars$1 = function (world) {\n    //add irregular plural nouns\n    let nouns = world.irregulars.nouns;\n    let words = Object.keys(nouns);\n\n    for (let i = 0; i < words.length; i++) {\n      const w = words[i];\n      world.words[w] = 'Singular';\n      world.words[nouns[w]] = 'Plural';\n    } // add irregular verb conjugations\n\n\n    let verbs = world.irregulars.verbs;\n    let keys = Object.keys(verbs);\n\n    for (let i = 0; i < keys.length; i++) {\n      const inf = keys[i]; //add only if it it's safe...\n\n      world.words[inf] = world.words[inf] || 'Infinitive';\n      let forms = world.transforms.conjugate(inf, world);\n      forms = Object.assign(forms, verbs[inf]); //add the others\n\n      Object.keys(forms).forEach(tag => {\n        world.words[forms[tag]] = world.words[forms[tag]] || tag; // lexicon should prefer other tags, over participle\n\n        if (world.words[forms[tag]] === 'Participle') {\n          world.words[forms[tag]] = tag;\n        }\n      });\n    }\n  };\n\n  var addIrregulars_1 = addIrregulars$1;\n\n  //used in noun.inflect, and also in the lexicon.\n\n  var plurals = {\n    addendum: 'addenda',\n    alga: 'algae',\n    alumna: 'alumnae',\n    alumnus: 'alumni',\n    analysis: 'analyses',\n    antenna: 'antennae',\n    appendix: 'appendices',\n    avocado: 'avocados',\n    axis: 'axes',\n    bacillus: 'bacilli',\n    barracks: 'barracks',\n    beau: 'beaux',\n    bus: 'buses',\n    cactus: 'cacti',\n    chateau: 'chateaux',\n    child: 'children',\n    circus: 'circuses',\n    clothes: 'clothes',\n    corpus: 'corpora',\n    criterion: 'criteria',\n    curriculum: 'curricula',\n    database: 'databases',\n    deer: 'deer',\n    diagnosis: 'diagnoses',\n    echo: 'echoes',\n    embargo: 'embargoes',\n    epoch: 'epochs',\n    foot: 'feet',\n    formula: 'formulae',\n    fungus: 'fungi',\n    genus: 'genera',\n    goose: 'geese',\n    halo: 'halos',\n    hippopotamus: 'hippopotami',\n    index: 'indices',\n    larva: 'larvae',\n    leaf: 'leaves',\n    libretto: 'libretti',\n    loaf: 'loaves',\n    man: 'men',\n    matrix: 'matrices',\n    memorandum: 'memoranda',\n    modulus: 'moduli',\n    mosquito: 'mosquitoes',\n    mouse: 'mice',\n    // move: 'moves',\n    nebula: 'nebulae',\n    nucleus: 'nuclei',\n    octopus: 'octopi',\n    opus: 'opera',\n    ovum: 'ova',\n    ox: 'oxen',\n    parenthesis: 'parentheses',\n    person: 'people',\n    phenomenon: 'phenomena',\n    prognosis: 'prognoses',\n    quiz: 'quizzes',\n    radius: 'radii',\n    referendum: 'referenda',\n    rodeo: 'rodeos',\n    sex: 'sexes',\n    shoe: 'shoes',\n    sombrero: 'sombreros',\n    stimulus: 'stimuli',\n    stomach: 'stomachs',\n    syllabus: 'syllabi',\n    synopsis: 'synopses',\n    tableau: 'tableaux',\n    thesis: 'theses',\n    thief: 'thieves',\n    tooth: 'teeth',\n    tornado: 'tornados',\n    tuxedo: 'tuxedos',\n    vertebra: 'vertebrae' // virus: 'viri',\n    // zero: 'zeros',\n\n  };\n\n  // used in verbs().conjugate()\n  // but also added to our lexicon\n  //use shorter key-names\n\n  const mapping$1 = {\n    g: 'Gerund',\n    prt: 'Participle',\n    perf: 'PerfectTense',\n    pst: 'PastTense',\n    fut: 'FuturePerfect',\n    pres: 'PresentTense',\n    pluperf: 'Pluperfect',\n    a: 'Actor'\n  }; // '_' in conjugations is the infinitive form\n  // (order matters, to the lexicon)\n\n  let conjugations = {\n    act: {\n      a: '_or'\n    },\n    ache: {\n      pst: 'ached',\n      g: 'aching'\n    },\n    age: {\n      g: 'ageing',\n      pst: 'aged',\n      pres: 'ages'\n    },\n    aim: {\n      a: '_er',\n      g: '_ing',\n      pst: '_ed'\n    },\n    arise: {\n      prt: '_n',\n      pst: 'arose'\n    },\n    babysit: {\n      a: '_ter',\n      pst: 'babysat'\n    },\n    ban: {\n      a: '',\n      g: '_ning',\n      pst: '_ned'\n    },\n    be: {\n      a: '',\n      g: 'am',\n      prt: 'been',\n      pst: 'was',\n      pres: 'is'\n    },\n    beat: {\n      a: '_er',\n      g: '_ing',\n      prt: '_en'\n    },\n    become: {\n      prt: '_'\n    },\n    begin: {\n      g: '_ning',\n      prt: 'begun',\n      pst: 'began'\n    },\n    being: {\n      g: 'are',\n      pst: 'were',\n      pres: 'are'\n    },\n    bend: {\n      prt: 'bent'\n    },\n    bet: {\n      a: '_ter',\n      prt: '_'\n    },\n    bind: {\n      pst: 'bound'\n    },\n    bite: {\n      g: 'biting',\n      prt: 'bitten',\n      pst: 'bit'\n    },\n    bleed: {\n      pst: 'bled',\n      prt: 'bled'\n    },\n    blow: {\n      prt: '_n',\n      pst: 'blew'\n    },\n    boil: {\n      a: '_er'\n    },\n    brake: {\n      prt: 'broken'\n    },\n    break: {\n      pst: 'broke'\n    },\n    breed: {\n      pst: 'bred'\n    },\n    bring: {\n      pst: 'brought',\n      prt: 'brought'\n    },\n    broadcast: {\n      pst: '_'\n    },\n    budget: {\n      pst: '_ed'\n    },\n    build: {\n      pst: 'built',\n      prt: 'built'\n    },\n    burn: {\n      prt: '_ed'\n    },\n    burst: {\n      prt: '_'\n    },\n    buy: {\n      pst: 'bought',\n      prt: 'bought'\n    },\n    can: {\n      a: '',\n      fut: '_',\n      g: '',\n      pst: 'could',\n      perf: 'could',\n      pluperf: 'could',\n      pres: '_'\n    },\n    catch: {\n      pst: 'caught'\n    },\n    choose: {\n      g: 'choosing',\n      prt: 'chosen',\n      pst: 'chose'\n    },\n    cling: {\n      prt: 'clung'\n    },\n    come: {\n      prt: '_',\n      pst: 'came',\n      g: 'coming'\n    },\n    compete: {\n      a: 'competitor',\n      g: 'competing',\n      pst: '_d'\n    },\n    cost: {\n      pst: '_'\n    },\n    creep: {\n      prt: 'crept'\n    },\n    cut: {\n      prt: '_'\n    },\n    deal: {\n      pst: '_t',\n      prt: '_t'\n    },\n    develop: {\n      a: '_er',\n      g: '_ing',\n      pst: '_ed'\n    },\n    die: {\n      g: 'dying',\n      pst: '_d'\n    },\n    dig: {\n      g: '_ging',\n      pst: 'dug',\n      prt: 'dug'\n    },\n    dive: {\n      prt: '_d'\n    },\n    do: {\n      pst: 'did',\n      pres: '_es'\n    },\n    draw: {\n      prt: '_n',\n      pst: 'drew'\n    },\n    dream: {\n      prt: '_t'\n    },\n    drink: {\n      prt: 'drunk',\n      pst: 'drank'\n    },\n    drive: {\n      g: 'driving',\n      prt: '_n',\n      pst: 'drove'\n    },\n    drop: {\n      g: '_ping',\n      pst: '_ped'\n    },\n    eat: {\n      a: '_er',\n      g: '_ing',\n      prt: '_en',\n      pst: 'ate'\n    },\n    edit: {\n      pst: '_ed',\n      g: '_ing'\n    },\n    egg: {\n      pst: '_ed'\n    },\n    fall: {\n      prt: '_en',\n      pst: 'fell'\n    },\n    feed: {\n      prt: 'fed',\n      pst: 'fed'\n    },\n    feel: {\n      a: '_er',\n      pst: 'felt'\n    },\n    fight: {\n      pst: 'fought',\n      prt: 'fought'\n    },\n    find: {\n      pst: 'found'\n    },\n    flee: {\n      g: '_ing',\n      prt: 'fled'\n    },\n    fling: {\n      prt: 'flung'\n    },\n    fly: {\n      prt: 'flown',\n      pst: 'flew'\n    },\n    forbid: {\n      pst: 'forbade'\n    },\n    forget: {\n      g: '_ing',\n      prt: 'forgotten',\n      pst: 'forgot'\n    },\n    forgive: {\n      g: 'forgiving',\n      prt: '_n',\n      pst: 'forgave'\n    },\n    free: {\n      a: '',\n      g: '_ing'\n    },\n    freeze: {\n      g: 'freezing',\n      prt: 'frozen',\n      pst: 'froze'\n    },\n    get: {\n      pst: 'got',\n      prt: 'gotten'\n    },\n    give: {\n      g: 'giving',\n      prt: '_n',\n      pst: 'gave'\n    },\n    go: {\n      prt: '_ne',\n      pst: 'went',\n      pres: 'goes'\n    },\n    grow: {\n      prt: '_n'\n    },\n    guide: {\n      pst: '_d'\n    },\n    hang: {\n      pst: 'hung',\n      prt: 'hung'\n    },\n    have: {\n      g: 'having',\n      pst: 'had',\n      prt: 'had',\n      pres: 'has'\n    },\n    hear: {\n      pst: '_d',\n      prt: '_d'\n    },\n    hide: {\n      prt: 'hidden',\n      pst: 'hid'\n    },\n    hit: {\n      prt: '_'\n    },\n    hold: {\n      pst: 'held',\n      prt: 'held'\n    },\n    hurt: {\n      pst: '_',\n      prt: '_'\n    },\n    ice: {\n      g: 'icing',\n      pst: '_d'\n    },\n    imply: {\n      pst: 'implied',\n      pres: 'implies'\n    },\n    is: {\n      a: '',\n      g: 'being',\n      pst: 'was',\n      pres: '_'\n    },\n    keep: {\n      prt: 'kept'\n    },\n    kneel: {\n      prt: 'knelt'\n    },\n    know: {\n      prt: '_n'\n    },\n    lay: {\n      pst: 'laid',\n      prt: 'laid'\n    },\n    lead: {\n      pst: 'led',\n      prt: 'led'\n    },\n    leap: {\n      prt: '_t'\n    },\n    leave: {\n      pst: 'left',\n      prt: 'left'\n    },\n    lend: {\n      prt: 'lent'\n    },\n    lie: {\n      g: 'lying',\n      pst: 'lay'\n    },\n    light: {\n      pst: 'lit',\n      prt: 'lit'\n    },\n    log: {\n      g: '_ging',\n      pst: '_ged'\n    },\n    loose: {\n      prt: 'lost'\n    },\n    lose: {\n      g: 'losing',\n      pst: 'lost'\n    },\n    make: {\n      pst: 'made',\n      prt: 'made'\n    },\n    mean: {\n      pst: '_t',\n      prt: '_t'\n    },\n    meet: {\n      a: '_er',\n      g: '_ing',\n      pst: 'met',\n      prt: 'met'\n    },\n    miss: {\n      pres: '_'\n    },\n    name: {\n      g: 'naming'\n    },\n    patrol: {\n      g: '_ling',\n      pst: '_led'\n    },\n    pay: {\n      pst: 'paid',\n      prt: 'paid'\n    },\n    prove: {\n      prt: '_n'\n    },\n    puke: {\n      g: 'puking'\n    },\n    put: {\n      prt: '_'\n    },\n    quit: {\n      prt: '_'\n    },\n    read: {\n      pst: '_',\n      prt: '_'\n    },\n    ride: {\n      prt: 'ridden'\n    },\n    reside: {\n      pst: '_d'\n    },\n    ring: {\n      pst: 'rang',\n      prt: 'rung'\n    },\n    rise: {\n      fut: 'will have _n',\n      g: 'rising',\n      prt: '_n',\n      pst: 'rose',\n      pluperf: 'had _n'\n    },\n    rub: {\n      g: '_bing',\n      pst: '_bed'\n    },\n    run: {\n      g: '_ning',\n      prt: '_',\n      pst: 'ran'\n    },\n    say: {\n      pst: 'said',\n      prt: 'said',\n      pres: '_s'\n    },\n    seat: {\n      pst: 'sat',\n      prt: 'sat'\n    },\n    see: {\n      g: '_ing',\n      prt: '_n',\n      pst: 'saw'\n    },\n    seek: {\n      prt: 'sought'\n    },\n    sell: {\n      pst: 'sold',\n      prt: 'sold'\n    },\n    send: {\n      prt: 'sent'\n    },\n    set: {\n      prt: '_'\n    },\n    sew: {\n      prt: '_n'\n    },\n    shake: {\n      prt: '_n'\n    },\n    shave: {\n      prt: '_d'\n    },\n    shed: {\n      g: '_ding',\n      pst: '_',\n      pres: '_s'\n    },\n    shine: {\n      pst: 'shone',\n      prt: 'shone'\n    },\n    shoot: {\n      pst: 'shot',\n      prt: 'shot'\n    },\n    show: {\n      pst: '_ed'\n    },\n    shut: {\n      prt: '_'\n    },\n    sing: {\n      prt: 'sung',\n      pst: 'sang'\n    },\n    sink: {\n      pst: 'sank',\n      pluperf: 'had sunk'\n    },\n    sit: {\n      pst: 'sat'\n    },\n    ski: {\n      pst: '_ied'\n    },\n    slay: {\n      prt: 'slain'\n    },\n    sleep: {\n      prt: 'slept'\n    },\n    slide: {\n      pst: 'slid',\n      prt: 'slid'\n    },\n    smash: {\n      pres: '_es'\n    },\n    sneak: {\n      prt: 'snuck'\n    },\n    speak: {\n      fut: 'will have spoken',\n      prt: 'spoken',\n      pst: 'spoke',\n      perf: 'have spoken',\n      pluperf: 'had spoken'\n    },\n    speed: {\n      prt: 'sped'\n    },\n    spend: {\n      prt: 'spent'\n    },\n    spill: {\n      prt: '_ed',\n      pst: 'spilt'\n    },\n    spin: {\n      g: '_ning',\n      pst: 'spun',\n      prt: 'spun'\n    },\n    spit: {\n      prt: 'spat'\n    },\n    split: {\n      prt: '_'\n    },\n    spread: {\n      pst: '_'\n    },\n    spring: {\n      prt: 'sprung'\n    },\n    stand: {\n      pst: 'stood'\n    },\n    steal: {\n      a: '_er',\n      pst: 'stole'\n    },\n    stick: {\n      pst: 'stuck'\n    },\n    sting: {\n      pst: 'stung'\n    },\n    stink: {\n      pst: 'stunk',\n      prt: 'stunk'\n    },\n    stream: {\n      a: '_er'\n    },\n    strew: {\n      prt: '_n'\n    },\n    strike: {\n      g: 'striking',\n      pst: 'struck'\n    },\n    suit: {\n      a: '_er',\n      g: '_ing',\n      pst: '_ed'\n    },\n    sware: {\n      prt: 'sworn'\n    },\n    swear: {\n      pst: 'swore'\n    },\n    sweep: {\n      prt: 'swept'\n    },\n    swim: {\n      g: '_ming',\n      pst: 'swam'\n    },\n    swing: {\n      pst: 'swung'\n    },\n    take: {\n      fut: 'will have _n',\n      pst: 'took',\n      perf: 'have _n',\n      pluperf: 'had _n'\n    },\n    teach: {\n      pst: 'taught',\n      pres: '_es'\n    },\n    tear: {\n      pst: 'tore'\n    },\n    tell: {\n      pst: 'told'\n    },\n    think: {\n      pst: 'thought'\n    },\n    thrive: {\n      prt: '_d'\n    },\n    tie: {\n      g: 'tying',\n      pst: '_d'\n    },\n    undergo: {\n      prt: '_ne'\n    },\n    understand: {\n      pst: 'understood'\n    },\n    upset: {\n      prt: '_'\n    },\n    wait: {\n      a: '_er',\n      g: '_ing',\n      pst: '_ed'\n    },\n    wake: {\n      pst: 'woke'\n    },\n    wear: {\n      pst: 'wore'\n    },\n    weave: {\n      prt: 'woven'\n    },\n    wed: {\n      pst: 'wed'\n    },\n    weep: {\n      prt: 'wept'\n    },\n    win: {\n      g: '_ning',\n      pst: 'won'\n    },\n    wind: {\n      prt: 'wound'\n    },\n    withdraw: {\n      pst: 'withdrew'\n    },\n    wring: {\n      prt: 'wrung'\n    },\n    write: {\n      g: 'writing',\n      prt: 'written',\n      pst: 'wrote'\n    }\n  }; //uncompress our ad-hoc compression scheme\n\n  let keys = Object.keys(conjugations);\n\n  for (let i = 0; i < keys.length; i++) {\n    const inf = keys[i];\n    let final = {};\n    Object.keys(conjugations[inf]).forEach(key => {\n      let str = conjugations[inf][key]; //swap-in infinitives for '_'\n\n      str = str.replace('_', inf);\n      let full = mapping$1[key];\n      final[full] = str;\n    }); //over-write original\n\n    conjugations[inf] = final;\n  }\n\n  var conjugations_1 = conjugations;\n\n  const endsWith$2 = {\n    b: [{\n      reg: /([^aeiou][aeiou])b$/i,\n      repl: {\n        pr: '$1bs',\n        pa: '$1bbed',\n        gr: '$1bbing'\n      }\n    }],\n    d: [{\n      reg: /(end)$/i,\n      repl: {\n        pr: '$1s',\n        pa: 'ent',\n        gr: '$1ing',\n        ar: '$1er'\n      }\n    }, {\n      reg: /(eed)$/i,\n      repl: {\n        pr: '$1s',\n        pa: '$1ed',\n        gr: '$1ing',\n        ar: '$1er'\n      }\n    }, {\n      reg: /(ed)$/i,\n      repl: {\n        pr: '$1s',\n        pa: '$1ded',\n        ar: '$1der',\n        gr: '$1ding'\n      }\n    }, {\n      reg: /([^aeiou][ou])d$/i,\n      repl: {\n        pr: '$1ds',\n        pa: '$1dded',\n        gr: '$1dding'\n      }\n    }],\n    e: [{\n      reg: /(eave)$/i,\n      repl: {\n        pr: '$1s',\n        pa: '$1d',\n        gr: 'eaving',\n        ar: '$1r'\n      }\n    }, {\n      reg: /(ide)$/i,\n      repl: {\n        pr: '$1s',\n        pa: 'ode',\n        gr: 'iding',\n        ar: 'ider'\n      }\n    }, {\n      //shake\n      reg: /(t|sh?)(ake)$/i,\n      repl: {\n        pr: '$1$2s',\n        pa: '$1ook',\n        gr: '$1aking',\n        ar: '$1$2r'\n      }\n    }, {\n      //awake\n      reg: /w(ake)$/i,\n      repl: {\n        pr: 'w$1s',\n        pa: 'woke',\n        gr: 'waking',\n        ar: 'w$1r'\n      }\n    }, {\n      //make\n      reg: /m(ake)$/i,\n      repl: {\n        pr: 'm$1s',\n        pa: 'made',\n        gr: 'making',\n        ar: 'm$1r'\n      }\n    }, {\n      reg: /(a[tg]|i[zn]|ur|nc|gl|is)e$/i,\n      repl: {\n        pr: '$1es',\n        pa: '$1ed',\n        gr: '$1ing' // prt: '$1en',\n\n      }\n    }, {\n      reg: /([bd]l)e$/i,\n      repl: {\n        pr: '$1es',\n        pa: '$1ed',\n        gr: '$1ing'\n      }\n    }, {\n      reg: /(om)e$/i,\n      repl: {\n        pr: '$1es',\n        pa: 'ame',\n        gr: '$1ing'\n      }\n    }],\n    g: [{\n      reg: /([^aeiou][aou])g$/i,\n      repl: {\n        pr: '$1gs',\n        pa: '$1gged',\n        gr: '$1gging'\n      }\n    }],\n    h: [{\n      reg: /(..)([cs]h)$/i,\n      repl: {\n        pr: '$1$2es',\n        pa: '$1$2ed',\n        gr: '$1$2ing'\n      }\n    }],\n    k: [{\n      reg: /(ink)$/i,\n      repl: {\n        pr: '$1s',\n        pa: 'unk',\n        gr: '$1ing',\n        ar: '$1er'\n      }\n    }],\n    m: [{\n      reg: /([^aeiou][aeiou])m$/i,\n      repl: {\n        pr: '$1ms',\n        pa: '$1mmed',\n        gr: '$1mming'\n      }\n    }],\n    n: [{\n      reg: /(en)$/i,\n      repl: {\n        pr: '$1s',\n        pa: '$1ed',\n        gr: '$1ing'\n      }\n    }],\n    p: [{\n      reg: /(e)(ep)$/i,\n      repl: {\n        pr: '$1$2s',\n        pa: '$1pt',\n        gr: '$1$2ing',\n        ar: '$1$2er'\n      }\n    }, {\n      reg: /([^aeiou][aeiou])p$/i,\n      repl: {\n        pr: '$1ps',\n        pa: '$1pped',\n        gr: '$1pping'\n      }\n    }, {\n      reg: /([aeiu])p$/i,\n      repl: {\n        pr: '$1ps',\n        pa: '$1p',\n        gr: '$1pping'\n      }\n    }],\n    r: [{\n      reg: /([td]er)$/i,\n      repl: {\n        pr: '$1s',\n        pa: '$1ed',\n        gr: '$1ing'\n      }\n    }, {\n      reg: /(er)$/i,\n      repl: {\n        pr: '$1s',\n        pa: '$1ed',\n        gr: '$1ing'\n      }\n    }],\n    s: [{\n      reg: /(ish|tch|ess)$/i,\n      repl: {\n        pr: '$1es',\n        pa: '$1ed',\n        gr: '$1ing'\n      }\n    }],\n    t: [{\n      reg: /(ion|end|e[nc]t)$/i,\n      repl: {\n        pr: '$1s',\n        pa: '$1ed',\n        gr: '$1ing'\n      }\n    }, {\n      reg: /(.eat)$/i,\n      repl: {\n        pr: '$1s',\n        pa: '$1ed',\n        gr: '$1ing'\n      }\n    }, {\n      reg: /([aeiu])t$/i,\n      repl: {\n        pr: '$1ts',\n        pa: '$1t',\n        gr: '$1tting'\n      }\n    }, {\n      reg: /([^aeiou][aeiou])t$/i,\n      repl: {\n        pr: '$1ts',\n        pa: '$1tted',\n        gr: '$1tting'\n      }\n    }],\n    w: [{\n      reg: /(.llow)$/i,\n      //follow, allow\n      repl: {\n        pr: '$1s',\n        pa: '$1ed'\n      }\n    }, {\n      reg: /(..)(ow)$/i,\n      //grow\n      repl: {\n        pr: '$1$2s',\n        pa: '$1ew',\n        gr: '$1$2ing',\n        prt: '$1$2n'\n      }\n    }],\n    y: [{\n      reg: /(i|f|rr)y$/i,\n      repl: {\n        pr: '$1ies',\n        pa: '$1ied',\n        gr: '$1ying'\n      }\n    }],\n    z: [{\n      reg: /([aeiou]zz)$/i,\n      repl: {\n        pr: '$1es',\n        pa: '$1ed',\n        gr: '$1ing'\n      }\n    }]\n  };\n  var suffixes$2 = endsWith$2;\n\n  const suffixes$1 = suffixes$2;\n  const posMap = {\n    pr: 'PresentTense',\n    pa: 'PastTense',\n    gr: 'Gerund',\n    prt: 'Participle',\n    ar: 'Actor'\n  };\n\n  const doTransform = function (str, obj) {\n    let found = {};\n    let keys = Object.keys(obj.repl);\n\n    for (let i = 0; i < keys.length; i += 1) {\n      let pos = keys[i];\n      found[posMap[pos]] = str.replace(obj.reg, obj.repl[pos]);\n    }\n\n    return found;\n  }; //look at the end of the word for clues\n\n\n  const checkSuffix$1 = function (str = '') {\n    let c = str[str.length - 1];\n\n    if (suffixes$1.hasOwnProperty(c) === true) {\n      for (let r = 0; r < suffixes$1[c].length; r += 1) {\n        const reg = suffixes$1[c][r].reg;\n\n        if (reg.test(str) === true) {\n          return doTransform(str, suffixes$1[c][r]);\n        }\n      }\n    }\n\n    return {};\n  };\n\n  var _01Suffixes = checkSuffix$1;\n\n  const hasY = /[bcdfghjklmnpqrstvwxz]y$/;\n  const generic = {\n    Gerund: inf => {\n      if (inf.charAt(inf.length - 1) === 'e') {\n        return inf.replace(/e$/, 'ing');\n      }\n\n      return inf + 'ing';\n    },\n    PresentTense: inf => {\n      if (inf.charAt(inf.length - 1) === 's') {\n        return inf + 'es';\n      }\n\n      if (hasY.test(inf) === true) {\n        return inf.slice(0, -1) + 'ies';\n      }\n\n      return inf + 's';\n    },\n    PastTense: inf => {\n      if (inf.charAt(inf.length - 1) === 'e') {\n        return inf + 'd';\n      }\n\n      if (inf.substr(-2) === 'ed') {\n        return inf;\n      }\n\n      if (hasY.test(inf) === true) {\n        return inf.slice(0, -1) + 'ied';\n      }\n\n      return inf + 'ed';\n    }\n  };\n  var _02Generic = generic;\n\n  const checkSuffix = _01Suffixes;\n  const genericFill = _02Generic; //we run this on every verb in the lexicon, so please keep it fast\n  //we assume the input word is a proper infinitive\n\n  const conjugate$4 = function (inf = '', world) {\n    let found = {}; // 1. look at irregulars\n    //the lexicon doesn't pass this in\n\n    if (world && world.irregulars) {\n      if (world.irregulars.verbs.hasOwnProperty(inf) === true) {\n        found = Object.assign({}, world.irregulars.verbs[inf]);\n      }\n    } //2. rule-based regex\n\n\n    found = Object.assign({}, checkSuffix(inf), found); //3. generic transformations\n    //'buzzing'\n\n    if (found.Gerund === undefined) {\n      found.Gerund = genericFill.Gerund(inf);\n    } //'buzzed'\n\n\n    if (found.PastTense === undefined) {\n      found.PastTense = genericFill.PastTense(inf);\n    } //'buzzes'\n\n\n    if (found.PresentTense === undefined) {\n      found.PresentTense = genericFill.PresentTense(inf);\n    }\n\n    return found;\n  };\n\n  var conjugate_1$1 = conjugate$4; // console.log(conjugate('bake'))\n\n  const do_rules$1 = [/ght$/, /nge$/, /ough$/, /ain$/, /uel$/, /[au]ll$/, /ow$/, /oud$/, /...p$/];\n  const dont_rules$1 = [/ary$/];\n  const irregulars$5 = {\n    nice: 'nicest',\n    late: 'latest',\n    hard: 'hardest',\n    inner: 'innermost',\n    outer: 'outermost',\n    far: 'furthest',\n    worse: 'worst',\n    bad: 'worst',\n    good: 'best',\n    big: 'biggest',\n    large: 'largest'\n  };\n  const transforms$2 = [{\n    reg: /y$/i,\n    repl: 'iest'\n  }, {\n    reg: /([aeiou])t$/i,\n    repl: '$1ttest'\n  }, {\n    reg: /([aeou])de$/i,\n    repl: '$1dest'\n  }, {\n    reg: /nge$/i,\n    repl: 'ngest'\n  }, {\n    reg: /([aeiou])te$/i,\n    repl: '$1test'\n  }];\n\n  const to_superlative = function (str) {\n    //irregulars\n    if (irregulars$5.hasOwnProperty(str)) {\n      return irregulars$5[str];\n    } //known transforms\n\n\n    for (let i = 0; i < transforms$2.length; i++) {\n      if (transforms$2[i].reg.test(str)) {\n        return str.replace(transforms$2[i].reg, transforms$2[i].repl);\n      }\n    } //dont-rules\n\n\n    for (let i = 0; i < dont_rules$1.length; i++) {\n      if (dont_rules$1[i].test(str) === true) {\n        return null;\n      }\n    } //do-rules\n\n\n    for (let i = 0; i < do_rules$1.length; i++) {\n      if (do_rules$1[i].test(str) === true) {\n        if (str.charAt(str.length - 1) === 'e') {\n          return str + 'st';\n        }\n\n        return str + 'est';\n      }\n    }\n\n    return str + 'est';\n  };\n\n  var toSuperlative = to_superlative;\n\n  const do_rules = [/ght$/, /nge$/, /ough$/, /ain$/, /uel$/, /[au]ll$/, /ow$/, /old$/, /oud$/, /e[ae]p$/];\n  const dont_rules = [/ary$/, /ous$/];\n  const irregulars$4 = {\n    grey: 'greyer',\n    gray: 'grayer',\n    green: 'greener',\n    yellow: 'yellower',\n    red: 'redder',\n    good: 'better',\n    well: 'better',\n    bad: 'worse',\n    sad: 'sadder',\n    big: 'bigger'\n  };\n  const transforms$1 = [{\n    reg: /y$/i,\n    repl: 'ier'\n  }, {\n    reg: /([aeiou])t$/i,\n    repl: '$1tter'\n  }, {\n    reg: /([aeou])de$/i,\n    repl: '$1der'\n  }, {\n    reg: /nge$/i,\n    repl: 'nger'\n  }];\n\n  const to_comparative = function (str) {\n    //known-irregulars\n    if (irregulars$4.hasOwnProperty(str)) {\n      return irregulars$4[str];\n    } //known-transforms\n\n\n    for (let i = 0; i < transforms$1.length; i++) {\n      if (transforms$1[i].reg.test(str) === true) {\n        return str.replace(transforms$1[i].reg, transforms$1[i].repl);\n      }\n    } //dont-patterns\n\n\n    for (let i = 0; i < dont_rules.length; i++) {\n      if (dont_rules[i].test(str) === true) {\n        return null;\n      }\n    } //do-patterns\n\n\n    for (let i = 0; i < do_rules.length; i++) {\n      if (do_rules[i].test(str) === true) {\n        return str + 'er';\n      }\n    } //easy-one\n\n\n    if (/e$/.test(str) === true) {\n      return str + 'r';\n    }\n\n    return str + 'er';\n  };\n\n  var toComparative = to_comparative;\n\n  const fns = {\n    toSuperlative: toSuperlative,\n    toComparative: toComparative\n  };\n  /** conjugate an adjective into other forms */\n\n  const conjugate$3 = function (w) {\n    let res = {}; // 'greatest'\n\n    let sup = fns.toSuperlative(w);\n\n    if (sup) {\n      res.Superlative = sup;\n    } // 'greater'\n\n\n    let comp = fns.toComparative(w);\n\n    if (comp) {\n      res.Comparative = comp;\n    }\n\n    return res;\n  };\n\n  var adjectives$2 = conjugate$3;\n\n  /** patterns for turning 'bus' to 'buses'*/\n  const suffixes = {\n    a: [[/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae'], [/([ti])a$/i, '$1a']],\n    e: [[/(kn|l|w)ife$/i, '$1ives'], [/(hive)$/i, '$1s'], [/([m|l])ouse$/i, '$1ice'], [/([m|l])ice$/i, '$1ice']],\n    f: [[/^(dwar|handkerchie|hoo|scar|whar)f$/i, '$1ves'], [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)f$/i, '$1ves']],\n    i: [[/(octop|vir)i$/i, '$1i']],\n    m: [[/([ti])um$/i, '$1a']],\n    n: [[/^(oxen)$/i, '$1']],\n    o: [[/(al|ad|at|er|et|ed|ad)o$/i, '$1oes']],\n    s: [[/(ax|test)is$/i, '$1es'], [/(alias|status)$/i, '$1es'], [/sis$/i, 'ses'], [/(bu)s$/i, '$1ses'], [/(sis)$/i, 'ses'], [/^(?!talis|.*hu)(.*)man$/i, '$1men'], [/(octop|vir|radi|nucle|fung|cact|stimul)us$/i, '$1i']],\n    x: [[/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices'], [/^(ox)$/i, '$1en']],\n    y: [[/([^aeiouy]|qu)y$/i, '$1ies']],\n    z: [[/(quiz)$/i, '$1zes']]\n  };\n  var _rules$2 = suffixes;\n\n  const rules$5 = _rules$2;\n  const addE = /(x|ch|sh|s|z)$/;\n\n  const trySuffix = function (str) {\n    let c = str[str.length - 1];\n\n    if (rules$5.hasOwnProperty(c) === true) {\n      for (let i = 0; i < rules$5[c].length; i += 1) {\n        let reg = rules$5[c][i][0];\n\n        if (reg.test(str) === true) {\n          return str.replace(reg, rules$5[c][i][1]);\n        }\n      }\n    }\n\n    return null;\n  };\n  /** Turn a singular noun into a plural\n   * assume the given string is singular\n   */\n\n\n  const pluralize = function (str = '', world) {\n    let irregulars = world.irregulars.nouns; // check irregulars list\n\n    if (irregulars.hasOwnProperty(str)) {\n      return irregulars[str];\n    } //we have some rules to try-out\n\n\n    let plural = trySuffix(str);\n\n    if (plural !== null) {\n      return plural;\n    } //like 'church'\n\n\n    if (addE.test(str)) {\n      return str + 'es';\n    } // ¯\\_(ツ)_/¯\n\n\n    return str + 's';\n  };\n\n  var toPlural = pluralize;\n\n  var _rules$1 = [[/([^v])ies$/i, '$1y'], [/ises$/i, 'isis'], [/(kn|[^o]l|w)ives$/i, '$1ife'], [/^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)ves$/i, '$1f'], [/^(dwar|handkerchie|hoo|scar|whar)ves$/i, '$1f'], [/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a'], [/(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i, '$1us'], [/(buffal|tomat|tornad)(oes)$/i, '$1o'], // [/(analy|diagno|parenthe|progno|synop|the)ses$/i, '$1sis'],\n  [/(eas)es$/i, '$1e'], //diseases\n  [/(..[aeiou]s)es$/i, '$1'], //geniouses\n  [/(vert|ind|cort)(ices)$/i, '$1ex'], [/(matr|append)(ices)$/i, '$1ix'], [/(x|ch|ss|sh|z|o)es$/i, '$1'], [/men$/i, 'man'], [/(n)ews$/i, '$1ews'], [/([ti])a$/i, '$1um'], [/([^aeiouy]|qu)ies$/i, '$1y'], [/(s)eries$/i, '$1eries'], [/(m)ovies$/i, '$1ovie'], [/([m|l])ice$/i, '$1ouse'], [/(cris|ax|test)es$/i, '$1is'], [/(alias|status)es$/i, '$1'], [/(ss)$/i, '$1'], [/(ics)$/i, '$1'], [/s$/i, '']];\n\n  const rules$4 = _rules$1;\n\n  const invertObj = function (obj) {\n    return Object.keys(obj).reduce((h, k) => {\n      h[obj[k]] = k;\n      return h;\n    }, {});\n  };\n\n  const toSingular = function (str, world) {\n    let irregulars = world.irregulars.nouns;\n    let invert = invertObj(irregulars); //(not very efficient)\n    // check irregulars list\n\n    if (invert.hasOwnProperty(str)) {\n      return invert[str];\n    } // go through our regexes\n\n\n    for (let i = 0; i < rules$4.length; i++) {\n      if (rules$4[i][0].test(str) === true) {\n        str = str.replace(rules$4[i][0], rules$4[i][1]);\n        return str;\n      }\n    }\n\n    return str;\n  };\n\n  var toSingular_1 = toSingular;\n\n  let rules$3 = {\n    Participle: [{\n      reg: /own$/i,\n      to: 'ow'\n    }, {\n      reg: /(.)un([g|k])$/i,\n      to: '$1in$2'\n    }],\n    Actor: [{\n      reg: /(er)er$/i,\n      to: '$1'\n    }],\n    PresentTense: [{\n      reg: /(..)(ies)$/i,\n      to: '$1y'\n    }, {\n      reg: /(tch|sh)es$/i,\n      to: '$1'\n    }, {\n      reg: /(ss|zz)es$/i,\n      to: '$1'\n    }, {\n      reg: /([tzlshicgrvdnkmu])es$/i,\n      to: '$1e'\n    }, {\n      reg: /(n[dtk]|c[kt]|[eo]n|i[nl]|er|a[ytrl])s$/i,\n      to: '$1'\n    }, {\n      reg: /(ow)s$/i,\n      to: '$1'\n    }, {\n      reg: /(op)s$/i,\n      to: '$1'\n    }, {\n      reg: /([eirs])ts$/i,\n      to: '$1t'\n    }, {\n      reg: /(ll)s$/i,\n      to: '$1'\n    }, {\n      reg: /(el)s$/i,\n      to: '$1'\n    }, {\n      reg: /(ip)es$/i,\n      to: '$1e'\n    }, {\n      reg: /ss$/i,\n      to: 'ss'\n    }, {\n      reg: /s$/i,\n      to: ''\n    }],\n    Gerund: [{\n      //popping -> pop\n      reg: /(..)(p|d|t|g){2}ing$/i,\n      to: '$1$2'\n    }, {\n      //fuzzing -> fuzz\n      reg: /(ll|ss|zz)ing$/i,\n      to: '$1'\n    }, {\n      reg: /([^aeiou])ying$/i,\n      to: '$1y'\n    }, {\n      reg: /([^ae]i.)ing$/i,\n      to: '$1e'\n    }, {\n      //eating, reading\n      reg: /(ea[dklnrtv])ing$/i,\n      to: '$1'\n    }, {\n      //washing -> wash\n      reg: /(ch|sh)ing$/i,\n      to: '$1'\n    }, //soft-e forms:\n    {\n      //z : hazing (not buzzing)\n      reg: /(z)ing$/i,\n      to: '$1e'\n    }, {\n      //a : baking, undulating\n      reg: /(a[gdkvtc])ing$/i,\n      to: '$1e'\n    }, {\n      //u : conjuring, tubing\n      reg: /(u[rtcbn])ing$/i,\n      to: '$1e'\n    }, {\n      //o : forboding, poking, hoping, boring (not hooping)\n      reg: /([^o]o[bdknprv])ing$/i,\n      to: '$1e'\n    }, {\n      //ling : tingling, wrinkling, circling, scrambling, bustling\n      reg: /([tbckg]l)ing$/i,\n      //dp\n      to: '$1e'\n    }, {\n      //cing : bouncing, denouncing\n      reg: /(c|s)ing$/i,\n      //dp\n      to: '$1e'\n    }, // {\n    //   //soft-e :\n    //   reg: /([ua]s|[dr]g|z|o[rlsp]|cre)ing$/i,\n    //   to: '$1e',\n    // },\n    {\n      //fallback\n      reg: /(..)ing$/i,\n      to: '$1'\n    }],\n    PastTense: [{\n      reg: /(ued)$/i,\n      to: 'ue'\n    }, {\n      reg: /ea(rn|l|m)ed$/i,\n      //ea - earned, healed, sreamed\n      to: 'ea$1'\n    }, {\n      reg: /a([^aeiouy])ed$/i,\n      to: 'a$1e'\n    }, {\n      reg: /([aeiou]zz)ed$/i,\n      to: '$1'\n    }, {\n      reg: /(e|i)lled$/i,\n      to: '$1ll'\n    }, {\n      reg: /(.)(sh|ch)ed$/i,\n      to: '$1$2'\n    }, {\n      reg: /(tl|gl)ed$/i,\n      to: '$1e'\n    }, {\n      reg: /(um?pt?)ed$/i,\n      to: '$1'\n    }, {\n      reg: /(ss)ed$/i,\n      to: '$1'\n    }, {\n      reg: /pped$/i,\n      to: 'p'\n    }, {\n      reg: /tted$/i,\n      to: 't'\n    }, {\n      reg: /(..)gged$/i,\n      to: '$1g'\n    }, {\n      reg: /(..)lked$/i,\n      to: '$1lk'\n    }, {\n      reg: /([^aeiouy][aeiou])ked$/i,\n      to: '$1ke'\n    }, {\n      reg: /(.[aeiou])led$/i,\n      to: '$1l'\n    }, {\n      reg: /(..)(h|ion|n[dt]|ai.|[cs]t|pp|all|ss|tt|int|ail|ld|en|oo.|er|k|pp|w|ou.|rt|ght|rm)ed$/i,\n      to: '$1$2'\n    }, {\n      reg: /(.ut)ed$/i,\n      to: '$1e'\n    }, {\n      reg: /(.pt)ed$/i,\n      to: '$1'\n    }, {\n      reg: /(us)ed$/i,\n      to: '$1e'\n    }, {\n      reg: /(dd)ed$/i,\n      to: '$1'\n    }, {\n      reg: /(..[^aeiouy])ed$/i,\n      to: '$1e'\n    }, {\n      reg: /(..)ied$/i,\n      to: '$1y'\n    }, {\n      reg: /(.o)ed$/i,\n      to: '$1o'\n    }, {\n      reg: /(..i)ed$/i,\n      to: '$1'\n    }, {\n      reg: /(.a[^aeiou])ed$/i,\n      to: '$1'\n    }, {\n      //owed, aced\n      reg: /([aeiou][^aeiou])ed$/i,\n      to: '$1e'\n    }, {\n      reg: /([rl])ew$/i,\n      to: '$1ow'\n    }, {\n      reg: /([pl])t$/i,\n      to: '$1t'\n    }]\n  };\n  var _transform = rules$3;\n\n  let guessVerb = {\n    Gerund: ['ing'],\n    Actor: ['erer'],\n    Infinitive: ['ate', 'ize', 'tion', 'rify', 'then', 'ress', 'ify', 'age', 'nce', 'ect', 'ise', 'ine', 'ish', 'ace', 'ash', 'ure', 'tch', 'end', 'ack', 'and', 'ute', 'ade', 'ock', 'ite', 'ase', 'ose', 'use', 'ive', 'int', 'nge', 'lay', 'est', 'ain', 'ant', 'ent', 'eed', 'er', 'le', 'own', 'unk', 'ung', 'en'],\n    PastTense: ['ed', 'lt', 'nt', 'pt', 'ew', 'ld'],\n    PresentTense: ['rks', 'cks', 'nks', 'ngs', 'mps', 'tes', 'zes', 'ers', 'les', 'acks', 'ends', 'ands', 'ocks', 'lays', 'eads', 'lls', 'els', 'ils', 'ows', 'nds', 'ays', 'ams', 'ars', 'ops', 'ffs', 'als', 'urs', 'lds', 'ews', 'ips', 'es', 'ts', 'ns']\n  }; //flip it into a lookup object\n\n  guessVerb = Object.keys(guessVerb).reduce((h, k) => {\n    guessVerb[k].forEach(a => h[a] = k);\n    return h;\n  }, {});\n  var _guess = guessVerb;\n\n  const rules$2 = _transform;\n  const guess = _guess;\n  /** it helps to know what we're conjugating from */\n\n  const guessTense = function (str) {\n    let three = str.substr(str.length - 3);\n\n    if (guess.hasOwnProperty(three) === true) {\n      return guess[three];\n    }\n\n    let two = str.substr(str.length - 2);\n\n    if (guess.hasOwnProperty(two) === true) {\n      return guess[two];\n    }\n\n    let one = str.substr(str.length - 1);\n\n    if (one === 's') {\n      return 'PresentTense';\n    }\n\n    return null;\n  };\n\n  const toInfinitive$3 = function (str, world, tense) {\n    if (!str) {\n      return '';\n    } //1. look at known irregulars\n\n\n    if (world.words.hasOwnProperty(str) === true) {\n      let irregs = world.irregulars.verbs;\n      let keys = Object.keys(irregs);\n\n      for (let i = 0; i < keys.length; i++) {\n        let forms = Object.keys(irregs[keys[i]]);\n\n        for (let o = 0; o < forms.length; o++) {\n          if (str === irregs[keys[i]][forms[o]]) {\n            return keys[i];\n          }\n        }\n      }\n    } // give'r!\n\n\n    tense = tense || guessTense(str);\n\n    if (tense && rules$2[tense]) {\n      for (let i = 0; i < rules$2[tense].length; i++) {\n        const rule = rules$2[tense][i];\n\n        if (rule.reg.test(str) === true) {\n          // console.log(rule.reg)\n          return str.replace(rule.reg, rule.to);\n        }\n      }\n    }\n\n    return str;\n  };\n\n  var toInfinitive_1$1 = toInfinitive$3;\n\n  const defaultTags = tags;\n  const unpack = unpack_1;\n  const addIrregulars = addIrregulars_1;\n  const inferTagSet = inference; //these let users change inflection / verb conjugation\n\n  const irregulars$3 = {\n    nouns: plurals,\n    verbs: conjugations_1\n  }; //these behaviours are configurable & shared across some plugins\n\n  const transforms = {\n    conjugate: conjugate_1$1,\n    adjectives: adjectives$2,\n    toPlural: toPlural,\n    toSingular: toSingular_1,\n    toInfinitive: toInfinitive_1$1\n  };\n  let isVerbose = false;\n  /** all configurable linguistic data */\n\n  class World$1 {\n    constructor() {\n      // quiet these properties from a console.log\n      Object.defineProperty(this, 'words', {\n        enumerable: false,\n        value: {},\n        writable: true\n      });\n      Object.defineProperty(this, 'hasCompound', {\n        enumerable: false,\n        value: {},\n        writable: true\n      });\n      Object.defineProperty(this, 'irregulars', {\n        enumerable: false,\n        value: irregulars$3,\n        writable: true\n      });\n      Object.defineProperty(this, 'tags', {\n        enumerable: false,\n        value: Object.assign({}, defaultTags),\n        writable: true\n      });\n      Object.defineProperty(this, 'transforms', {\n        enumerable: false,\n        value: transforms,\n        writable: true\n      });\n      Object.defineProperty(this, 'taggers', {\n        enumerable: false,\n        value: [],\n        writable: true\n      }); // cache our abbreviations for our sentence-parser\n\n      Object.defineProperty(this, 'cache', {\n        enumerable: false,\n        value: {\n          abbreviations: {}\n        }\n      }); // add our compressed data to lexicon\n\n      this.words = unpack.buildOut(this); // add our irregulars to lexicon\n\n      addIrregulars(this);\n    }\n    /** more logs for debugging */\n\n\n    verbose(bool) {\n      isVerbose = bool;\n      return this;\n    }\n\n    isVerbose() {\n      return isVerbose;\n    }\n    /** put new words into our lexicon, properly */\n\n\n    addWords(wordObj) {\n      // clean them up a bit\n      let cleaned = {};\n      Object.keys(wordObj).forEach(w => {\n        let tag = wordObj[w];\n        w = w.toLowerCase().trim();\n        cleaned[w] = tag;\n      });\n      unpack.addWords(cleaned, this.words, this);\n    }\n    /** add new custom conjugations */\n\n\n    addConjugations(obj) {\n      Object.assign(this.irregulars.verbs, obj);\n      return this;\n    }\n    /** add new custom plural/singular pairs */\n\n\n    addPlurals(obj) {\n      Object.assign(this.irregulars.nouns, obj);\n      return this;\n    }\n    /** extend the compromise tagset */\n\n\n    addTags(tags) {\n      tags = Object.assign({}, tags);\n      this.tags = Object.assign(this.tags, tags); // calculate graph implications for the new tags\n\n      this.tags = inferTagSet(this.tags);\n      return this;\n    }\n    /** call methods after tagger runs */\n\n\n    postProcess(fn) {\n      this.taggers.push(fn);\n      return this;\n    }\n    /** helper method for logging + debugging */\n\n\n    stats() {\n      return {\n        words: Object.keys(this.words).length,\n        plurals: Object.keys(this.irregulars.nouns).length,\n        conjugations: Object.keys(this.irregulars.verbs).length,\n        compounds: Object.keys(this.hasCompound).length,\n        postProcessors: this.taggers.length\n      };\n    }\n\n  } //  ¯\\_(:/)_/¯\n\n\n  const clone = function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  };\n  /** produce a deep-copy of all lingustic data */\n\n\n  World$1.prototype.clone = function () {\n    let w2 = new World$1(); // these are simple to copy:\n\n    w2.words = Object.assign({}, this.words);\n    w2.hasCompound = Object.assign({}, this.hasCompound); //these ones are nested:\n\n    w2.irregulars = clone(this.irregulars);\n    w2.tags = clone(this.tags); // these are functions\n\n    w2.transforms = this.transforms;\n    w2.taggers = this.taggers;\n    return w2;\n  };\n\n  var World_1 = World$1;\n\n  var _01Utils = {};\n\n  /** return the root, first document */\n\n  (function (exports) {\n    exports.all = function () {\n      return this.parents()[0] || this;\n    };\n    /** return the previous result */\n\n\n    exports.parent = function () {\n      if (this.from) {\n        return this.from;\n      }\n\n      return this;\n    };\n    /**  return a list of all previous results */\n\n\n    exports.parents = function (n) {\n      let arr = [];\n\n      const addParent = function (doc) {\n        if (doc.from) {\n          arr.push(doc.from);\n          addParent(doc.from);\n        }\n      };\n\n      addParent(this);\n      arr = arr.reverse();\n\n      if (typeof n === 'number') {\n        return arr[n];\n      }\n\n      return arr;\n    };\n    /** deep-copy the document, so that no references remain */\n\n\n    exports.clone = function (doShallow) {\n      let list = this.list.map(ts => ts.clone(doShallow));\n      let tmp = this.buildFrom(list);\n      return tmp;\n    };\n    /** how many seperate terms does the document have? */\n\n\n    exports.wordCount = function () {\n      return this.list.reduce((count, p) => {\n        count += p.wordCount();\n        return count;\n      }, 0);\n    };\n\n    exports.wordcount = exports.wordCount;\n    /** turn on logging for decision-debugging */\n    // exports.verbose = function(bool) {\n    //   if (bool === undefined) {\n    //     bool = true\n    //   }\n    //   this.world.verbose = bool\n    // }\n  })(_01Utils);\n\n  var _02Accessors = {};\n\n  /** use only the first result(s) */\n\n  (function (exports) {\n    exports.first = function (n) {\n      if (n === undefined) {\n        return this.get(0);\n      }\n\n      return this.slice(0, n);\n    };\n    /** use only the last result(s) */\n\n\n    exports.last = function (n) {\n      if (n === undefined) {\n        return this.get(this.list.length - 1);\n      }\n\n      let end = this.list.length;\n      return this.slice(end - n, end);\n    };\n    /** grab a given subset of the results*/\n\n\n    exports.slice = function (start, end) {\n      let list = this.list.slice(start, end);\n      return this.buildFrom(list);\n    };\n    /* grab nth result */\n\n\n    exports.eq = function (n) {\n      let p = this.list[n];\n\n      if (p === undefined) {\n        return this.buildFrom([]);\n      }\n\n      return this.buildFrom([p]);\n    };\n\n    exports.get = exports.eq;\n    /** grab term[0] for every match */\n\n    exports.firstTerms = function () {\n      return this.match('^.');\n    };\n\n    exports.firstTerm = exports.firstTerms;\n    /** grab the last term for every match  */\n\n    exports.lastTerms = function () {\n      return this.match('.$');\n    };\n\n    exports.lastTerm = exports.lastTerms;\n    /** return a flat array of term objects */\n\n    exports.termList = function (num) {\n      let arr = []; //'reduce' but faster\n\n      for (let i = 0; i < this.list.length; i++) {\n        let terms = this.list[i].terms();\n\n        for (let o = 0; o < terms.length; o++) {\n          arr.push(terms[o]); //support .termList(4)\n\n          if (num !== undefined && arr[num] !== undefined) {\n            return arr[num];\n          }\n        }\n      }\n\n      return arr;\n    };\n    /* grab named capture group terms as object */\n\n\n    const getGroups = function (doc) {\n      let res = {};\n      const allGroups = {};\n\n      for (let i = 0; i < doc.list.length; i++) {\n        const phrase = doc.list[i];\n        const groups = Object.keys(phrase.groups).map(k => phrase.groups[k]);\n\n        for (let j = 0; j < groups.length; j++) {\n          const {\n            group,\n            start,\n            length\n          } = groups[j];\n\n          if (!allGroups[group]) {\n            allGroups[group] = [];\n          }\n\n          allGroups[group].push(phrase.buildFrom(start, length));\n        }\n      }\n\n      const keys = Object.keys(allGroups);\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        res[key] = doc.buildFrom(allGroups[key]);\n      }\n\n      return res;\n    };\n    /** lookup a named-group, by its name */\n\n\n    const getOneName = function (doc, name) {\n      const arr = [];\n\n      for (let i = 0; i < doc.list.length; i++) {\n        const phrase = doc.list[i];\n        let keys = Object.keys(phrase.groups);\n        keys = keys.filter(id => phrase.groups[id].group === name);\n        keys.forEach(id => {\n          arr.push(phrase.buildFrom(phrase.groups[id].start, phrase.groups[id].length));\n        });\n      }\n\n      return doc.buildFrom(arr);\n    };\n    /** grab named capture group results */\n\n\n    exports.groups = function (target) {\n      if (target === undefined) {\n        return getGroups(this);\n      }\n\n      if (typeof target === 'number') {\n        target = String(target);\n      }\n\n      return getOneName(this, target) || this.buildFrom([]);\n    };\n\n    exports.group = exports.groups;\n    /** get the full-sentence each phrase belongs to */\n\n    exports.sentences = function (n) {\n      let arr = [];\n      this.list.forEach(p => {\n        arr.push(p.fullSentence());\n      });\n\n      if (typeof n === 'number') {\n        return this.buildFrom([arr[n]]);\n      }\n\n      return this.buildFrom(arr);\n    };\n\n    exports.sentence = exports.sentences;\n  })(_02Accessors);\n\n  var _03Match = {};\n\n  const cacheRequired$1 = function (reg) {\n    let needTags = [];\n    let needWords = [];\n    reg.forEach(obj => {\n      if (obj.optional === true || obj.negative === true) {\n        return;\n      }\n\n      if (obj.tag !== undefined) {\n        needTags.push(obj.tag);\n      }\n\n      if (obj.word !== undefined) {\n        needWords.push(obj.word);\n      }\n    });\n    return {\n      tags: needTags,\n      words: needWords\n    };\n  }; // try to pre-fail as many matches as possible, without doing them\n\n\n  const failFast = function (doc, regs) {\n    if (doc._cache && doc._cache.set === true) {\n      let {\n        words,\n        tags\n      } = cacheRequired$1(regs); //check required words\n\n      for (let i = 0; i < words.length; i++) {\n        if (doc._cache.words[words[i]] === undefined) {\n          return false;\n        }\n      } //check required tags\n\n\n      for (let i = 0; i < tags.length; i++) {\n        if (doc._cache.tags[tags[i]] === undefined) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  var _failFast = failFast;\n\n  (function (exports) {\n    const parseSyntax = matchSyntax;\n    const checkCache = _failFast;\n    /** return a new Doc, with this one as a parent */\n\n    exports.match = function (reg, opts = {}) {\n      // support '0' shorthand for named-groups\n      if (typeof opts === 'string' || typeof opts === 'number' || opts === null) {\n        opts = {\n          group: opts\n        };\n      } //parse-up the input expression\n\n\n      let regs = parseSyntax(reg, opts);\n\n      if (regs.length === 0) {\n        return this.buildFrom([]);\n      } //check our cache, if it exists\n\n\n      if (checkCache(this, regs) === false) {\n        return this.buildFrom([]);\n      } //try expression on each phrase\n\n\n      let matches = this.list.reduce((arr, p) => {\n        return arr.concat(p.match(regs));\n      }, []); // support returning named groups\n\n      if (opts.group !== undefined && opts.group !== null && opts.group !== '') {\n        return this.buildFrom(matches).groups(opts.group);\n      }\n\n      return this.buildFrom(matches);\n    };\n    /** return all results except for this */\n\n\n    exports.not = function (reg, opts = {}) {\n      //parse-up the input expression\n      let regs = parseSyntax(reg, opts); //if it's empty, return them all!\n\n      if (regs.length === 0 || checkCache(this, regs) === false) {\n        return this;\n      } //try expression on each phrase\n\n\n      let matches = this.list.reduce((arr, p) => {\n        return arr.concat(p.not(regs));\n      }, []);\n      return this.buildFrom(matches);\n    };\n    /** return only the first match */\n\n\n    exports.matchOne = function (reg, opts = {}) {\n      let regs = parseSyntax(reg, opts); //check our cache, if it exists\n\n      if (checkCache(this, regs) === false) {\n        return this.buildFrom([]);\n      }\n\n      for (let i = 0; i < this.list.length; i++) {\n        let match = this.list[i].match(regs, true);\n        return this.buildFrom(match);\n      }\n\n      return this.buildFrom([]);\n    };\n    /** return each current phrase, only if it contains this match */\n\n\n    exports.if = function (reg, opts = {}) {\n      let regs = parseSyntax(reg, opts); //consult our cache, if it exists\n\n      if (checkCache(this, regs) === false) {\n        return this.buildFrom([]);\n      }\n\n      let found = this.list.filter(p => p.has(regs) === true);\n      return this.buildFrom(found);\n    };\n    /** Filter-out any current phrases that have this match*/\n\n\n    exports.ifNo = function (reg, opts = {}) {\n      let regs = parseSyntax(reg, opts);\n      let found = this.list.filter(p => p.has(regs) === false);\n      return this.buildFrom(found);\n    };\n    /**Return a boolean if this match exists */\n\n\n    exports.has = function (reg, opts = {}) {\n      let regs = parseSyntax(reg, opts); //consult our cache, if it exists\n\n      if (checkCache(this, regs) === false) {\n        return false;\n      }\n\n      return this.list.some(p => p.has(regs) === true);\n    };\n    /** match any terms after our matches, within the sentence */\n\n\n    exports.lookAhead = function (reg, opts = {}) {\n      // find everything afterwards, by default\n      if (!reg) {\n        reg = '.*';\n      }\n\n      let regs = parseSyntax(reg, opts);\n      let matches = [];\n      this.list.forEach(p => {\n        matches = matches.concat(p.lookAhead(regs));\n      });\n      matches = matches.filter(p => p);\n      return this.buildFrom(matches);\n    };\n\n    exports.lookAfter = exports.lookAhead;\n    /** match any terms before our matches, within the sentence */\n\n    exports.lookBehind = function (reg, opts = {}) {\n      // find everything afterwards, by default\n      if (!reg) {\n        reg = '.*';\n      }\n\n      let regs = parseSyntax(reg, opts);\n      let matches = [];\n      this.list.forEach(p => {\n        matches = matches.concat(p.lookBehind(regs));\n      });\n      matches = matches.filter(p => p);\n      return this.buildFrom(matches);\n    };\n\n    exports.lookBefore = exports.lookBehind;\n    /** return all terms before a match, in each phrase */\n\n    exports.before = function (reg, opts = {}) {\n      let regs = parseSyntax(reg, opts); //only the phrases we care about\n\n      let phrases = this.if(regs).list;\n      let befores = phrases.map(p => {\n        let ids = p.terms().map(t => t.id); //run the search again\n\n        let m = p.match(regs)[0];\n        let index = ids.indexOf(m.start); //nothing is before a first-term match\n\n        if (index === 0 || index === -1) {\n          return null;\n        }\n\n        return p.buildFrom(p.start, index);\n      });\n      befores = befores.filter(p => p !== null);\n      return this.buildFrom(befores);\n    };\n    /** return all terms after a match, in each phrase */\n\n\n    exports.after = function (reg, opts = {}) {\n      let regs = parseSyntax(reg, opts); //only the phrases we care about\n\n      let phrases = this.if(regs).list;\n      let befores = phrases.map(p => {\n        let terms = p.terms();\n        let ids = terms.map(t => t.id); //run the search again\n\n        let m = p.match(regs)[0];\n        let index = ids.indexOf(m.start); //skip if nothing is after it\n\n        if (index === -1 || !terms[index + m.length]) {\n          return null;\n        } //create the new phrase, after our match.\n\n\n        let id = terms[index + m.length].id;\n        let len = p.length - index - m.length;\n        return p.buildFrom(id, len);\n      });\n      befores = befores.filter(p => p !== null);\n      return this.buildFrom(befores);\n    };\n    /** return only results with this match afterwards */\n\n\n    exports.hasAfter = function (reg, opts = {}) {\n      return this.filter(doc => {\n        return doc.lookAfter(reg, opts).found;\n      });\n    };\n    /** return only results with this match before it */\n\n\n    exports.hasBefore = function (reg, opts = {}) {\n      return this.filter(doc => {\n        return doc.lookBefore(reg, opts).found;\n      });\n    };\n  })(_03Match);\n\n  var _04Tag = {};\n\n  /** apply a tag, or tags to all terms */\n\n  const tagTerms = function (tag, doc, safe, reason) {\n    let tagList = [];\n\n    if (typeof tag === 'string') {\n      tagList = tag.split(' ');\n    } // doc.parents()[0].reasons.push(reason)\n    //do indepenent tags for each term:\n\n\n    doc.list.forEach(p => {\n      let terms = p.terms(); // tagSafe - apply only to fitting terms\n\n      if (safe === true) {\n        terms = terms.filter(t => t.canBe(tag, doc.world));\n      }\n\n      terms.forEach((t, i) => {\n        //fancy version:\n        if (tagList.length > 1) {\n          if (tagList[i] && tagList[i] !== '.') {\n            t.tag(tagList[i], reason, doc.world);\n          }\n        } else {\n          //non-fancy version (same tag for all terms)\n          t.tag(tag, reason, doc.world);\n        }\n      });\n    });\n    return;\n  };\n\n  var _setTag = tagTerms;\n\n  const setTag = _setTag;\n  /** Give all terms the given tag */\n\n  _04Tag.tag = function (tags, why) {\n    if (!tags) {\n      return this;\n    }\n\n    setTag(tags, this, false, why);\n    return this;\n  };\n  /** Only apply tag to terms if it is consistent with current tags */\n\n\n  _04Tag.tagSafe = function (tags, why) {\n    if (!tags) {\n      return this;\n    }\n\n    setTag(tags, this, true, why);\n    return this;\n  };\n  /** Remove this term from the given terms */\n\n\n  _04Tag.unTag = function (tags, why) {\n    this.list.forEach(p => {\n      p.terms().forEach(t => t.unTag(tags, why, this.world));\n    });\n    return this;\n  };\n  /** return only the terms that can be this tag*/\n\n\n  _04Tag.canBe = function (tag) {\n    if (!tag) {\n      return this;\n    }\n\n    let world = this.world;\n    let matches = this.list.reduce((arr, p) => {\n      return arr.concat(p.canBe(tag, world));\n    }, []);\n    return this.buildFrom(matches);\n  };\n\n  var _05Loops = {};\n\n  /* run each phrase through a function, and create a new document */\n\n  _05Loops.map = function (fn) {\n    if (!fn) {\n      return this;\n    }\n\n    let list = this.list.map((p, i) => {\n      let doc = this.buildFrom([p]);\n      doc.from = null; //it's not a child/parent\n\n      let res = fn(doc, i); // if its a doc, return one result\n\n      if (res && res.list && res.list[0]) {\n        return res.list[0];\n      }\n\n      return res;\n    }); //remove nulls\n\n    list = list.filter(x => x); // return an empty response\n\n    if (list.length === 0) {\n      return this.buildFrom(list);\n    } // if it is not a list of Phrase objects, then don't try to make a Doc object\n\n\n    if (typeof list[0] !== 'object' || list[0].isA !== 'Phrase') {\n      return list;\n    }\n\n    return this.buildFrom(list);\n  };\n  /** run a function on each phrase */\n\n\n  _05Loops.forEach = function (fn, detachParent) {\n    if (!fn) {\n      return this;\n    }\n\n    this.list.forEach((p, i) => {\n      let sub = this.buildFrom([p]); // if we're doing fancy insertions, we may want to skip updating the parent each time.\n\n      if (detachParent === true) {\n        sub.from = null; //\n      }\n\n      fn(sub, i);\n    });\n    return this;\n  };\n  /** return only the phrases that return true */\n\n\n  _05Loops.filter = function (fn) {\n    if (!fn) {\n      return this;\n    }\n\n    let list = this.list.filter((p, i) => {\n      let doc = this.buildFrom([p]);\n      doc.from = null; //it's not a child/parent\n\n      return fn(doc, i);\n    });\n    return this.buildFrom(list);\n  };\n  /** return a document with only the first phrase that matches */\n\n\n  _05Loops.find = function (fn) {\n    if (!fn) {\n      return this;\n    }\n\n    let phrase = this.list.find((p, i) => {\n      let doc = this.buildFrom([p]);\n      doc.from = null; //it's not a child/parent\n\n      return fn(doc, i);\n    });\n\n    if (phrase) {\n      return this.buildFrom([phrase]);\n    }\n\n    return undefined;\n  };\n  /** return true or false if there is one matching phrase */\n\n\n  _05Loops.some = function (fn) {\n    if (!fn) {\n      return this;\n    }\n\n    return this.list.some((p, i) => {\n      let doc = this.buildFrom([p]);\n      doc.from = null; //it's not a child/parent\n\n      return fn(doc, i);\n    });\n  };\n  /** sample a subset of the results */\n\n\n  _05Loops.random = function (n) {\n    if (!this.found) {\n      return this;\n    }\n\n    let r = Math.floor(Math.random() * this.list.length);\n\n    if (n === undefined) {\n      let list = [this.list[r]];\n      return this.buildFrom(list);\n    } //prevent it from going over the end\n\n\n    if (r + n > this.length) {\n      r = this.length - n;\n      r = r < 0 ? 0 : r;\n    }\n\n    return this.slice(r, r + n);\n  };\n\n  var _06Lookup = {};\n\n  const tokenize$4 = function (str) {\n    return str.split(/[ -]/g);\n  }; // take a list of strings\n  // look them up in the document\n\n\n  const buildTree = function (termList, values = []) {\n    let root = {}; // parse our input\n\n    termList.forEach((str, i) => {\n      let val = true;\n\n      if (values[i] !== undefined) {\n        val = values[i];\n      } // some rough normalization\n\n\n      str = (str || '').toLowerCase();\n      str = str.replace(/[,;.!?]+$/, '');\n      let arr = tokenize$4(str).map(s => s.trim());\n      root[arr[0]] = root[arr[0]] || {};\n\n      if (arr.length === 1) {\n        root[arr[0]].value = val;\n      } else {\n        root[arr[0]].more = root[arr[0]].more || [];\n        root[arr[0]].more.push({\n          rest: arr.slice(1),\n          value: val\n        });\n      }\n    }); // sort by longest-first?\n    // console.log(JSON.stringify(root, null, 2))\n\n    return root;\n  };\n\n  const fastLookup = function (termList, values, doc) {\n    let root = buildTree(termList, values);\n    let found = []; // each phrase\n\n    for (let i = 0; i < doc.list.length; i++) {\n      const p = doc.list[i];\n      let terms = p.terms();\n      let words = terms.map(t => t.reduced); // each word\n\n      for (let w = 0; w < words.length; w++) {\n        if (root[words[w]] !== undefined) {\n          // is it a multi-word match?\n          if (root[words[w]].more !== undefined) {\n            root[words[w]].more.forEach(more => {\n              // is it too-long?\n              if (words[w + more.rest.length] === undefined) {\n                return;\n              } // compare each subsequent term\n\n\n              let everyTerm = more.rest.every((word, r) => {\n                return word === words[w + r + 1];\n              });\n\n              if (everyTerm === true) {\n                found.push({\n                  id: p.terms()[w].id,\n                  value: more.value,\n                  length: more.rest.length + 1\n                });\n              }\n            });\n          } // is it a single-word match?\n\n\n          if (root[words[w]].value !== undefined) {\n            found.push({\n              id: p.terms()[w].id,\n              value: root[words[w]].value,\n              length: 1\n            });\n          }\n        }\n      }\n    }\n\n    return found;\n  };\n\n  var _lookup = fastLookup;\n\n  (function (exports) {\n    const lookup = _lookup; // compare one term and one match\n    // const doesMatch = function(term, str) {\n    //   if (str === '') {\n    //     return false\n    //   }\n    //   return term.reduced === str || term.implicit === str || term.root === str || term.text.toLowerCase() === str\n    // }\n\n    const isObject = function (obj) {\n      return obj && Object.prototype.toString.call(obj) === '[object Object]';\n    };\n    /** lookup an array of words or phrases */\n\n\n    exports.lookup = function (arr) {\n      let values = []; //is it a {key:val} object?\n\n      let isObj = isObject(arr);\n\n      if (isObj === true) {\n        arr = Object.keys(arr).map(k => {\n          values.push(arr[k]);\n          return k;\n        });\n      } // support .lookup('foo')\n\n\n      if (typeof arr === 'string') {\n        arr = [arr];\n      } //make sure we go fast.\n\n\n      if (this._cache.set !== true) {\n        this.cache();\n      }\n\n      let found = lookup(arr, values, this);\n      let p = this.list[0]; // make object response\n\n      if (isObj === true) {\n        let byVal = {};\n        found.forEach(o => {\n          byVal[o.value] = byVal[o.value] || [];\n          byVal[o.value].push(p.buildFrom(o.id, o.length));\n        });\n        Object.keys(byVal).forEach(k => {\n          byVal[k] = this.buildFrom(byVal[k]);\n        });\n        return byVal;\n      } // otherwise, make array response:\n\n\n      found = found.map(o => p.buildFrom(o.id, o.length));\n      return this.buildFrom(found);\n    };\n\n    exports.lookUp = exports.lookup;\n  })(_06Lookup);\n\n  var _07Cache = {};\n\n  /** freeze the current state of the document, for speed-purposes*/\n\n  _07Cache.cache = function (options) {\n    options = options || {};\n    let words = {};\n    let tags = {};\n    this._cache.words = words;\n    this._cache.tags = tags;\n    this._cache.set = true;\n    this.list.forEach((p, i) => {\n      p.cache = p.cache || {}; //p.terms get cached automatically\n\n      let terms = p.terms(); // cache all the terms\n\n      terms.forEach(t => {\n        if (words[t.reduced] && !words.hasOwnProperty(t.reduced)) {\n          return; //skip prototype words\n        }\n\n        words[t.reduced] = words[t.reduced] || [];\n        words[t.reduced].push(i);\n        Object.keys(t.tags).forEach(tag => {\n          tags[tag] = tags[tag] || [];\n          tags[tag].push(i);\n        }); // cache root-form on Term, too\n\n        if (options.root) {\n          t.setRoot(this.world);\n          words[t.root] = [i];\n        }\n      });\n    });\n    return this;\n  };\n  /** un-freezes the current state of the document, so it may be transformed */\n\n\n  _07Cache.uncache = function () {\n    this._cache = {};\n    this.list.forEach(p => {\n      p.cache = {};\n    }); // do parents too?\n\n    this.parents().forEach(doc => {\n      doc._cache = {};\n      doc.list.forEach(p => {\n        p.cache = {};\n      });\n    });\n    return this;\n  };\n\n  var _01Replace = {};\n\n  const tokenize$3 = _01Tokenizer;\n\n  const titleCase$1 = str => {\n    return str.charAt(0).toUpperCase() + str.substr(1);\n  };\n  /** substitute-in new content */\n\n\n  _01Replace.replaceWith = function (replace, options = {}) {\n    if (!replace) {\n      return this.delete();\n    } //support old-style params\n\n\n    if (options === true) {\n      options = {\n        keepTags: true\n      };\n    }\n\n    if (options === false) {\n      options = {\n        keepTags: false\n      };\n    }\n\n    options = options || {}; // clear the cache\n\n    this.uncache(); // return this\n\n    this.list.forEach(p => {\n      let input = replace; // accept a function for replace\n\n      if (typeof replace === 'function') {\n        input = replace(p);\n      }\n\n      let newPhrases; // accept a Doc object to replace\n\n      if (input && typeof input === 'object' && input.isA === 'Doc') {\n        newPhrases = input.list;\n        this.pool().merge(input.pool());\n      } else if (typeof input === 'string') {\n        //input is a string\n        if (options.keepCase !== false && p.terms(0).isTitleCase()) {\n          input = titleCase$1(input);\n        }\n\n        newPhrases = tokenize$3(input, this.world, this.pool()); //tag the new phrases\n\n        let tmpDoc = this.buildFrom(newPhrases);\n        tmpDoc.tagger();\n        newPhrases = tmpDoc.list;\n      } else {\n        return; //don't even bother\n      } // try to keep its old tags, if appropriate\n\n\n      if (options.keepTags === true) {\n        let oldTags = p.json({\n          terms: {\n            tags: true\n          }\n        }).terms;\n        newPhrases[0].terms().forEach((t, i) => {\n          if (oldTags[i]) {\n            t.tagSafe(oldTags[i].tags, 'keptTag', this.world);\n          }\n        });\n      }\n\n      p.replace(newPhrases[0], this); //Oneday: support multi-sentence replacements\n    });\n    return this;\n  };\n  /** search and replace match with new content */\n\n\n  _01Replace.replace = function (match, replace, options) {\n    // if there's no 2nd param, use replaceWith\n    if (replace === undefined) {\n      return this.replaceWith(match, options);\n    }\n\n    this.match(match).replaceWith(replace, options);\n    return this;\n  };\n\n  var _02Insert = {};\n\n  (function (exports) {\n    const tokenize = _01Tokenizer;\n\n    const isObject = function (obj) {\n      return obj && Object.prototype.toString.call(obj) === '[object Object]';\n    }; // if it's empty, just create the phrase\n\n\n    const makeNew = function (str, doc) {\n      let phrase = tokenize(str, doc.world)[0]; //assume it's one sentence, for now\n\n      let tmpDoc = doc.buildFrom([phrase]);\n      tmpDoc.tagger();\n      doc.list = tmpDoc.list;\n      return doc;\n    };\n    /** add these new terms to the end*/\n\n\n    exports.append = function (str = '') {\n      if (!str) {\n        return this;\n      } // if it's empty, just create the phrase\n\n\n      if (!this.found) {\n        return makeNew(str, this);\n      } // clear the cache\n\n\n      this.uncache(); //add it to end of every phrase\n\n      this.list.forEach(p => {\n        //build it\n        let phrase;\n\n        if (isObject(str) && str.isA === 'Doc') {\n          phrase = str.list[0].clone(); //use the first phrase\n        } else if (typeof str === 'string') {\n          phrase = tokenize(str, this.world, this.pool())[0]; //assume it's one sentence, for now\n        } //tag it\n\n\n        let tmpDoc = this.buildFrom([phrase]);\n        tmpDoc.tagger(); // push it onto the end\n\n        p.append(phrase, this);\n      });\n      return this;\n    };\n\n    exports.insertAfter = exports.append;\n    exports.insertAt = exports.append;\n    /** add these new terms to the front*/\n\n    exports.prepend = function (str) {\n      if (!str) {\n        return this;\n      } // if it's empty, just create the phrase\n\n\n      if (!this.found) {\n        return makeNew(str, this);\n      } // clear the cache\n\n\n      this.uncache(); //add it to start of every phrase\n\n      this.list.forEach(p => {\n        //build it\n        let phrase;\n\n        if (isObject(str) && str.isA === 'Doc') {\n          phrase = str.list[0].clone(); //use the first phrase\n        } else if (typeof str === 'string') {\n          phrase = tokenize(str, this.world, this.pool())[0]; //assume it's one sentence, for now\n        } //tag it\n\n\n        let tmpDoc = this.buildFrom([phrase]);\n        tmpDoc.tagger(); // add it to the start\n\n        p.prepend(phrase, this);\n      });\n      return this;\n    };\n\n    exports.insertBefore = exports.prepend;\n    /** add these new things to the end*/\n\n    exports.concat = function () {\n      // clear the cache\n      this.uncache();\n      let list = this.list.slice(0); //repeat for any number of params\n\n      for (let i = 0; i < arguments.length; i++) {\n        let arg = arguments[i]; //support a fresh string\n\n        if (typeof arg === 'string') {\n          let arr = tokenize(arg, this.world); //TODO: phrase.tagger()?\n\n          list = list.concat(arr);\n        } else if (arg.isA === 'Doc') {\n          list = list.concat(arg.list);\n        } else if (arg.isA === 'Phrase') {\n          list.push(arg);\n        }\n      }\n\n      return this.buildFrom(list);\n    };\n    /** fully remove these terms from the document */\n\n\n    exports.delete = function (match) {\n      // clear the cache\n      this.uncache();\n      let toRemove = this;\n\n      if (match) {\n        toRemove = this.match(match);\n      }\n\n      toRemove.list.forEach(phrase => phrase.delete(this));\n      return this;\n    }; // aliases\n\n\n    exports.remove = exports.delete;\n  })(_02Insert);\n\n  var _01Text = {};\n\n  const shouldTrim = {\n    clean: true,\n    reduced: true,\n    root: true\n  };\n  /** return the document as text */\n\n  _01Text.text = function (options) {\n    options = options || {}; //are we showing every phrase?\n\n    let showFull = false;\n\n    if (this.parents().length === 0) {\n      showFull = true;\n    } // cache roots, if necessary\n\n\n    if (options === 'root' || typeof options === 'object' && options.root) {\n      this.list.forEach(p => {\n        p.terms().forEach(t => {\n          if (t.root === null) {\n            t.setRoot(this.world);\n          }\n        });\n      });\n    }\n\n    let txt = this.list.reduce((str, p, i) => {\n      const trimPre = !showFull && i === 0;\n      const trimPost = !showFull && i === this.list.length - 1;\n      return str + p.text(options, trimPre, trimPost);\n    }, ''); // clumsy final trim of leading/trailing whitespace\n\n    if (shouldTrim[options] === true || options.reduced === true || options.clean === true || options.root === true) {\n      txt = txt.trim();\n    }\n\n    return txt;\n  };\n\n  var _02Json = {};\n\n  const termOffsets = function (doc) {\n    let elapsed = 0;\n    let index = 0;\n    let offsets = {};\n    doc.termList().forEach(term => {\n      offsets[term.id] = {\n        index: index,\n        start: elapsed + term.pre.length,\n        length: term.text.length\n      };\n      elapsed += term.pre.length + term.text.length + term.post.length;\n      index += 1;\n    });\n    return offsets;\n  };\n\n  const calcOffset = function (doc, result, options) {\n    // calculate offsets for each term\n    let offsets = termOffsets(doc.all()); // add index values\n\n    if (options.terms.index || options.index) {\n      result.forEach(o => {\n        o.terms.forEach(t => {\n          t.index = offsets[t.id].index;\n        });\n        o.index = o.terms[0].index;\n      });\n    } // add offset values\n\n\n    if (options.terms.offset || options.offset) {\n      result.forEach(o => {\n        o.terms.forEach(t => {\n          t.offset = offsets[t.id] || {};\n        }); // let len = o.terms.reduce((n, t, i) => {\n        //   n += t.offset.length || 0\n        //   //add whitespace, too\n        //   console.log(t.post)\n        //   return n\n        // }, 0)\n        // The offset information for the entire doc starts at (or just before)\n        // the first term, and is as long as the whole text.  The code originally\n        // copied the entire offset value from terms[0], but since we're now\n        // overriding 2 of the three fields, it's cleaner to just create an all-\n        // new object and not pretend it's \"just\" the same as terms[0].\n\n        o.offset = {\n          index: o.terms[0].offset.index,\n          start: o.terms[0].offset.start - o.text.indexOf(o.terms[0].text),\n          length: o.text.length\n        };\n      });\n    }\n  };\n\n  var _offset = calcOffset;\n\n  (function (exports) {\n    const offsets = _offset;\n    const jsonDefaults = {\n      text: true,\n      terms: true,\n      trim: true\n    }; //some options have dependents\n\n    const setOptions = function (options) {\n      options = Object.assign({}, jsonDefaults, options);\n\n      if (options.unique) {\n        options.reduced = true;\n      } //offset calculation requires these options to be on\n\n\n      if (options.offset) {\n        options.text = true;\n\n        if (!options.terms || options.terms === true) {\n          options.terms = {};\n        }\n\n        options.terms.offset = true;\n      }\n\n      if (options.index || options.terms.index) {\n        options.terms = options.terms === true ? {} : options.terms;\n        options.terms.id = true;\n      }\n\n      return options;\n    };\n    /** pull out desired metadata from the document */\n\n\n    exports.json = function (options = {}) {\n      //support json(3) format\n      if (typeof options === 'number' && this.list[options]) {\n        return this.list[options].json(jsonDefaults);\n      }\n\n      options = setOptions(options); // cache root strings beforehand, if necessary\n\n      if (options.root === true) {\n        this.list.forEach(p => {\n          p.terms().forEach(t => {\n            if (t.root === null) {\n              t.setRoot(this.world);\n            }\n          });\n        });\n      }\n\n      let result = this.list.map(p => {\n        return p.json(options, this.world);\n      }); // add offset and index data for each term\n\n      if (options.terms.offset || options.offset || options.terms.index || options.index) {\n        offsets(this, result, options);\n      } // add frequency #s\n\n\n      if (options.frequency || options.freq || options.count) {\n        let obj = {};\n        this.list.forEach(p => {\n          let str = p.text('reduced');\n          obj[str] = obj[str] || 0;\n          obj[str] += 1;\n        });\n        this.list.forEach((p, i) => {\n          result[i].count = obj[p.text('reduced')];\n        });\n      } // remove duplicates\n\n\n      if (options.unique) {\n        let already = {};\n        result = result.filter(o => {\n          if (already[o.reduced] === true) {\n            return false;\n          }\n\n          already[o.reduced] = true;\n          return true;\n        });\n      }\n\n      return result;\n    }; //aliases\n\n\n    exports.data = exports.json;\n  })(_02Json);\n\n  var _03Out = {};\n\n  var _debug = {exports: {}};\n\n  (function (module) {\n    // https://stackoverflow.com/questions/9781218/how-to-change-node-jss-console-font-color\n    const reset = '\\x1b[0m';\n\n    const padEnd = function (str, width) {\n      str = str.toString();\n\n      while (str.length < width) {\n        str += ' ';\n      }\n\n      return str;\n    };\n\n    function isClientSide() {\n      return typeof window !== 'undefined' && window.document;\n    } // some nice colors for client-side debug\n\n\n    const css = {\n      green: '#7f9c6c',\n      red: '#914045',\n      blue: '#6699cc',\n      magenta: '#6D5685',\n      cyan: '#2D85A8',\n      yellow: '#e6d7b3',\n      black: '#303b50'\n    };\n\n    const logClientSide = function (doc) {\n      let tagset = doc.world.tags;\n      doc.list.forEach(p => {\n        console.log('\\n%c\"' + p.text() + '\"', 'color: #e6d7b3;');\n        let terms = p.terms();\n        terms.forEach(t => {\n          let tags = Object.keys(t.tags);\n          let text = t.text || '-';\n\n          if (t.implicit) {\n            text = '[' + t.implicit + ']';\n          }\n\n          let word = \"'\" + text + \"'\";\n          word = padEnd(word, 8);\n          let found = tags.find(tag => tagset[tag] && tagset[tag].color);\n          let color = 'steelblue';\n\n          if (tagset[found]) {\n            color = tagset[found].color;\n            color = css[color];\n          }\n\n          console.log(`   ${word}  -  %c${tags.join(', ')}`, `color: ${color || 'steelblue'};`);\n        });\n      });\n    }; //cheaper than requiring chalk\n\n\n    const cli = {\n      green: function (str) {\n        return '\\x1b[32m' + str + reset;\n      },\n      red: function (str) {\n        return '\\x1b[31m' + str + reset;\n      },\n      blue: function (str) {\n        return '\\x1b[34m' + str + reset;\n      },\n      magenta: function (str) {\n        return '\\x1b[35m' + str + reset;\n      },\n      cyan: function (str) {\n        return '\\x1b[36m' + str + reset;\n      },\n      yellow: function (str) {\n        return '\\x1b[33m' + str + reset;\n      },\n      black: function (str) {\n        return '\\x1b[30m' + str + reset;\n      }\n    };\n\n    const tagString = function (tags, world) {\n      tags = tags.map(tag => {\n        if (!world.tags.hasOwnProperty(tag)) {\n          return tag;\n        }\n\n        const c = world.tags[tag].color || 'blue';\n        return cli[c](tag);\n      });\n      return tags.join(', ');\n    }; //output some helpful stuff to the console\n\n\n    const debug = function (doc) {\n      if (isClientSide()) {\n        logClientSide(doc);\n        return doc;\n      }\n\n      console.log(cli.blue('====='));\n      doc.list.forEach(p => {\n        console.log(cli.blue('  -----'));\n        let terms = p.terms();\n        terms.forEach(t => {\n          let tags = Object.keys(t.tags);\n          let text = t.text || '-';\n\n          if (t.implicit) {\n            text = '[' + t.implicit + ']';\n          }\n\n          {\n            text = cli.yellow(text);\n          }\n\n          let word = \"'\" + text + \"'\";\n          word = padEnd(word, 18);\n          let str = cli.blue('  ｜ ') + word + '  - ' + tagString(tags, doc.world);\n          console.log(str);\n        });\n      });\n      console.log('');\n      return doc;\n    };\n\n    module.exports = debug;\n  })(_debug);\n\n  const topk$1 = function (doc) {\n    let list = doc.json({\n      text: false,\n      terms: false,\n      reduced: true\n    }); // combine them\n\n    let obj = {};\n    list.forEach(o => {\n      if (!obj[o.reduced]) {\n        o.count = 0;\n        obj[o.reduced] = o;\n      }\n\n      obj[o.reduced].count += 1;\n    });\n    let arr = Object.keys(obj).map(k => obj[k]); // sort them\n\n    arr.sort((a, b) => {\n      if (a.count > b.count) {\n        return -1;\n      } else if (a.count < b.count) {\n        return 1;\n      }\n\n      return 0;\n    });\n    return arr;\n  };\n\n  var _topk = topk$1;\n\n  const debug = _debug.exports;\n  const topk = _topk;\n  /** pretty-print the current document and its tags */\n\n  _03Out.debug = function () {\n    debug(this);\n    return this;\n  };\n  /** some named output formats */\n\n\n  _03Out.out = function (method) {\n    if (method === 'text') {\n      return this.text();\n    }\n\n    if (method === 'normal') {\n      return this.text('normal');\n    }\n\n    if (method === 'json') {\n      return this.json();\n    }\n\n    if (method === 'offset' || method === 'offsets') {\n      return this.json({\n        offset: true\n      });\n    }\n\n    if (method === 'array') {\n      return this.json({\n        terms: false\n      }).map(obj => obj.text).filter(str => str);\n    }\n\n    if (method === 'freq' || method === 'frequency') {\n      return topk(this);\n    }\n\n    if (method === 'terms') {\n      let list = [];\n      this.json({\n        text: false,\n        terms: {\n          text: true\n        }\n      }).forEach(obj => {\n        let terms = obj.terms.map(t => t.text);\n        terms = terms.filter(t => t);\n        list = list.concat(terms);\n      });\n      return list;\n    }\n\n    if (method === 'tags') {\n      return this.list.map(p => {\n        return p.terms().reduce((h, t) => {\n          h[t.clean || t.implicit] = Object.keys(t.tags);\n          return h;\n        }, {});\n      });\n    }\n\n    if (method === 'debug') {\n      debug(this);\n      return this;\n    }\n\n    return this.text();\n  };\n\n  var _01Sort = {};\n\n  const methods$9 = {\n    /** alphabetical order */\n    alpha: (a, b) => {\n      let left = a.text('clean');\n      let right = b.text('clean');\n\n      if (left < right) {\n        return -1;\n      }\n\n      if (left > right) {\n        return 1;\n      }\n\n      return 0;\n    },\n\n    /** count the # of characters of each match */\n    length: (a, b) => {\n      let left = a.text().trim().length;\n      let right = b.text().trim().length;\n\n      if (left < right) {\n        return 1;\n      }\n\n      if (left > right) {\n        return -1;\n      }\n\n      return 0;\n    },\n\n    /** count the # of terms in each match */\n    wordCount: (a, b) => {\n      let left = a.wordCount();\n      let right = b.wordCount();\n\n      if (left < right) {\n        return 1;\n      }\n\n      if (left > right) {\n        return -1;\n      }\n\n      return 0;\n    }\n  };\n  /** sort by # of duplicates in the document*/\n\n  const byFreq = function (doc) {\n    let counts = {};\n    const options = {\n      case: true,\n      punctuation: false,\n      whitespace: true,\n      unicode: true\n    };\n    doc.list.forEach(p => {\n      let str = p.text(options);\n      counts[str] = counts[str] || 0;\n      counts[str] += 1;\n    }); // sort by freq\n\n    doc.list.sort((a, b) => {\n      let left = counts[a.text(options)];\n      let right = counts[b.text(options)];\n\n      if (left < right) {\n        return 1;\n      }\n\n      if (left > right) {\n        return -1;\n      }\n\n      return 0;\n    });\n    return doc;\n  }; // order results 'chronologically', or document-order\n\n\n  const sortSequential = function (doc) {\n    let order = {};\n    doc.json({\n      terms: {\n        offset: true\n      }\n    }).forEach(o => {\n      order[o.terms[0].id] = o.terms[0].offset.start;\n    });\n    doc.list = doc.list.sort((a, b) => {\n      if (order[a.start] > order[b.start]) {\n        return 1;\n      } else if (order[a.start] < order[b.start]) {\n        return -1;\n      }\n\n      return 0;\n    });\n    return doc;\n  }; //aliases\n\n\n  methods$9.alphabetical = methods$9.alpha;\n  methods$9.wordcount = methods$9.wordCount; // aliases for sequential ordering\n\n  const seqNames = {\n    index: true,\n    sequence: true,\n    seq: true,\n    sequential: true,\n    chron: true,\n    chronological: true\n  };\n  /** re-arrange the order of the matches (in place) */\n\n  _01Sort.sort = function (input) {\n    input = input || 'alpha'; //do this one up-front\n\n    if (input === 'freq' || input === 'frequency' || input === 'topk') {\n      return byFreq(this);\n    }\n\n    if (seqNames.hasOwnProperty(input)) {\n      return sortSequential(this);\n    }\n\n    input = methods$9[input] || input; // apply sort method on each phrase\n\n    if (typeof input === 'function') {\n      this.list = this.list.sort(input);\n      return this;\n    }\n\n    return this;\n  };\n  /** reverse the order of the matches, but not the words */\n\n\n  _01Sort.reverse = function () {\n    let list = [].concat(this.list);\n    list = list.reverse();\n    return this.buildFrom(list);\n  };\n  /** remove any duplicate matches */\n\n\n  _01Sort.unique = function () {\n    let list = [].concat(this.list);\n    let obj = {};\n    list = list.filter(p => {\n      let str = p.text('reduced').trim() || p.text('implicit').trim();\n\n      if (obj.hasOwnProperty(str) === true) {\n        return false;\n      }\n\n      obj[str] = true;\n      return true;\n    });\n    return this.buildFrom(list);\n  };\n\n  var _02Normalize = {};\n\n  const killUnicode = unicode_1;\n  const isPunct = /[\\[\\]{}⟨⟩:,،、‒–—―…‹›«»‐\\-;\\/⁄·*\\•^†‡°¡¿※№÷×ºª%‰=‱¶§~|‖¦©℗®℠™¤₳฿]/g;\n  const quotes = /['‘’“”\"′″‴]+/g;\n  const methods$8 = {\n    // cleanup newlines and extra spaces\n    whitespace: function (doc) {\n      let termArr = doc.list.map(ts => ts.terms());\n      termArr.forEach((terms, o) => {\n        terms.forEach((t, i) => {\n          // keep dashes between words\n          if (t.hasDash() === true) {\n            t.post = ' - ';\n            return;\n          } // remove existing spaces\n\n\n          t.pre = t.pre.replace(/\\s/g, '');\n          t.post = t.post.replace(/\\s/g, ''); //last word? ensure there's a next sentence.\n\n          if (terms.length - 1 === i && !termArr[o + 1]) {\n            return;\n          } // no extra spaces for contractions\n\n\n          if (t.implicit && Boolean(t.text) === true) {\n            return;\n          } // no extra spaces for hyphenated words\n\n\n          if (t.hasHyphen() === true) {\n            return;\n          }\n\n          t.post += ' ';\n        });\n      });\n    },\n    punctuation: function (termList) {\n      termList.forEach(t => {\n        // space between hyphenated words\n        if (t.hasHyphen() === true) {\n          t.post = ' ';\n        }\n\n        t.pre = t.pre.replace(isPunct, '');\n        t.post = t.post.replace(isPunct, ''); // elipses\n\n        t.post = t.post.replace(/\\.\\.\\./, ''); // only allow one exclamation\n\n        if (/!/.test(t.post) === true) {\n          t.post = t.post.replace(/!/g, '');\n          t.post = '!' + t.post;\n        } // only allow one question mark\n\n\n        if (/\\?/.test(t.post) === true) {\n          t.post = t.post.replace(/[\\?!]*/, '');\n          t.post = '?' + t.post;\n        }\n      });\n    },\n    unicode: function (termList) {\n      termList.forEach(t => {\n        if (t.isImplicit() === true) {\n          return;\n        }\n\n        t.text = killUnicode(t.text);\n      });\n    },\n    quotations: function (termList) {\n      termList.forEach(t => {\n        t.post = t.post.replace(quotes, '');\n        t.pre = t.pre.replace(quotes, '');\n      });\n    },\n    adverbs: function (doc) {\n      doc.match('#Adverb').not('(not|nary|seldom|never|barely|almost|basically|so)').remove();\n    },\n    // remove the '.' from 'Mrs.' (safely)\n    abbreviations: function (doc) {\n      doc.list.forEach(ts => {\n        let terms = ts.terms();\n        terms.forEach((t, i) => {\n          if (t.tags.Abbreviation === true && terms[i + 1]) {\n            t.post = t.post.replace(/^\\./, '');\n          }\n        });\n      });\n    }\n  };\n  var _methods = methods$8;\n\n  const methods$7 = _methods;\n  const defaults = {\n    // light\n    whitespace: true,\n    unicode: true,\n    punctuation: true,\n    emoji: true,\n    acronyms: true,\n    abbreviations: true,\n    // medium\n    case: false,\n    contractions: false,\n    parentheses: false,\n    quotations: false,\n    adverbs: false,\n    // heavy (loose legibility)\n    possessives: false,\n    verbs: false,\n    nouns: false,\n    honorifics: false // pronouns: true,\n\n  };\n  const mapping = {\n    light: {},\n    medium: {\n      case: true,\n      contractions: true,\n      parentheses: true,\n      quotations: true,\n      adverbs: true\n    }\n  };\n  mapping.heavy = Object.assign({}, mapping.medium, {\n    possessives: true,\n    verbs: true,\n    nouns: true,\n    honorifics: true\n  });\n  /** common ways to clean-up the document, and reduce noise */\n\n  _02Normalize.normalize = function (options) {\n    options = options || {}; // support named forms\n\n    if (typeof options === 'string') {\n      options = mapping[options] || {};\n    } // set defaults\n\n\n    options = Object.assign({}, defaults, options); // clear the cache\n\n    this.uncache();\n    let termList = this.termList(); // lowercase things\n\n    if (options.case) {\n      this.toLowerCase();\n    } //whitespace\n\n\n    if (options.whitespace) {\n      methods$7.whitespace(this);\n    } // unicode: é -> e\n\n\n    if (options.unicode) {\n      methods$7.unicode(termList);\n    } //punctuation - keep sentence punctation, quotes, parenths\n\n\n    if (options.punctuation) {\n      methods$7.punctuation(termList);\n    } // remove ':)'\n\n\n    if (options.emoji) {\n      this.remove('(#Emoji|#Emoticon)');\n    } // 'f.b.i.' -> 'FBI'\n\n\n    if (options.acronyms) {\n      this.acronyms().strip(); // .toUpperCase()\n    } // remove period from abbreviations\n\n\n    if (options.abbreviations) {\n      methods$7.abbreviations(this);\n    } // --Medium methods--\n    // `isn't` -> 'is not'\n\n\n    if (options.contraction || options.contractions) {\n      this.contractions().expand();\n    } // '(word)' -> 'word'\n\n\n    if (options.parentheses) {\n      this.parentheses().unwrap();\n    } // remove \"\" punctuation\n\n\n    if (options.quotations || options.quotes) {\n      methods$7.quotations(termList);\n    } // remove any un-necessary adverbs\n\n\n    if (options.adverbs) {\n      methods$7.adverbs(this);\n    } // --Heavy methods--\n    // `cory hart's -> cory hart'\n\n\n    if (options.possessive || options.possessives) {\n      this.possessives().strip();\n    } // 'he walked' -> 'he walk'\n\n\n    if (options.verbs) {\n      this.verbs().toInfinitive();\n    } // 'three dogs' -> 'three dog'\n\n\n    if (options.nouns || options.plurals) {\n      this.nouns().toSingular();\n    } // remove 'Mr.' from 'Mr John Smith'\n\n\n    if (options.honorifics) {\n      this.remove('#Honorific');\n    }\n\n    return this;\n  };\n\n  var _03Split = {};\n\n  (function (exports) {\n    const parseSyntax = matchSyntax;\n    /** return a Document with three parts for every match\n     * seperate everything before the word, as a new phrase\n     */\n\n    exports.splitOn = function (reg) {\n      // if there's no match, split parent, instead\n      if (!reg) {\n        let parent = this.parent();\n        return parent.splitOn(this);\n      } //start looking for a match..\n\n\n      let regs = parseSyntax(reg);\n      let matches = [];\n      this.list.forEach(p => {\n        let foundEm = p.match(regs); //no match here, add full sentence\n\n        if (foundEm.length === 0) {\n          matches.push(p);\n          return;\n        } // we found something here.\n\n\n        let carry = p;\n        foundEm.forEach(found => {\n          let parts = carry.splitOn(found); // add em in\n\n          if (parts.before) {\n            matches.push(parts.before);\n          }\n\n          if (parts.match) {\n            matches.push(parts.match);\n          } // start matching now on the end\n\n\n          carry = parts.after;\n        }); // add that last part\n\n        if (carry) {\n          matches.push(carry);\n        }\n      });\n      return this.buildFrom(matches);\n    };\n    /** return a Document with two parts for every match\n     * seperate everything after the word, as a new phrase\n     */\n\n\n    exports.splitAfter = function (reg) {\n      // if there's no match, split parent, instead\n      if (!reg) {\n        let parent = this.parent();\n        return parent.splitAfter(this);\n      } // start looking for our matches\n\n\n      let regs = parseSyntax(reg);\n      let matches = [];\n      this.list.forEach(p => {\n        let foundEm = p.match(regs); //no match here, add full sentence\n\n        if (foundEm.length === 0) {\n          matches.push(p);\n          return;\n        } // we found something here.\n\n\n        let carry = p;\n        foundEm.forEach(found => {\n          let parts = carry.splitOn(found); // add em in\n\n          if (parts.before && parts.match) {\n            // merge these two together\n            parts.before.length += parts.match.length;\n            matches.push(parts.before);\n          } else if (parts.match) {\n            matches.push(parts.match);\n          } // start matching now on the end\n\n\n          carry = parts.after;\n        }); // add that last part\n\n        if (carry) {\n          matches.push(carry);\n        }\n      });\n      return this.buildFrom(matches);\n    };\n\n    exports.split = exports.splitAfter; //i guess?\n\n    /** return a Document with two parts for every match */\n\n    exports.splitBefore = function (reg) {\n      // if there's no match, split parent, instead\n      if (!reg) {\n        let parent = this.parent();\n        return parent.splitBefore(this);\n      } //start looking for a match..\n\n\n      let regs = parseSyntax(reg);\n      let matches = [];\n      this.list.forEach(p => {\n        let foundEm = p.match(regs); //no match here, add full sentence\n\n        if (foundEm.length === 0) {\n          matches.push(p);\n          return;\n        } // we found something here.\n\n\n        let carry = p;\n        foundEm.forEach(found => {\n          let parts = carry.splitOn(found); // add before part in\n\n          if (parts.before) {\n            matches.push(parts.before);\n          } // merge match+after\n\n\n          if (parts.match && parts.after) {\n            parts.match.length += parts.after.length;\n          } // start matching now on the end\n\n\n          carry = parts.match;\n        }); // add that last part\n\n        if (carry) {\n          matches.push(carry);\n        }\n      });\n      return this.buildFrom(matches);\n    };\n    /** split a document into labeled sections */\n\n\n    exports.segment = function (regs, options) {\n      regs = regs || {};\n      options = options || {\n        text: true\n      };\n      let doc = this;\n      let keys = Object.keys(regs); // split em\n\n      keys.forEach(k => {\n        doc = doc.splitOn(k);\n      }); //add labels for each section\n\n      doc.list.forEach(p => {\n        for (let i = 0; i < keys.length; i += 1) {\n          if (p.has(keys[i])) {\n            p.segment = regs[keys[i]];\n            return;\n          }\n        }\n      });\n      return doc.list.map(p => {\n        let res = p.json(options);\n        res.segment = p.segment || null;\n        return res;\n      });\n    };\n  })(_03Split);\n\n  var _04Case = {};\n\n  const eachTerm = function (doc, fn) {\n    let world = doc.world;\n    doc.list.forEach(p => {\n      p.terms().forEach(t => t[fn](world));\n    });\n    return doc;\n  };\n  /** turn every letter of every term to lower-cse */\n\n\n  _04Case.toLowerCase = function () {\n    return eachTerm(this, 'toLowerCase');\n  };\n  /** turn every letter of every term to upper case */\n\n\n  _04Case.toUpperCase = function () {\n    return eachTerm(this, 'toUpperCase');\n  };\n  /** upper-case the first letter of each term */\n\n\n  _04Case.toTitleCase = function () {\n    return eachTerm(this, 'toTitleCase');\n  };\n  /** remove whitespace and title-case each term */\n\n\n  _04Case.toCamelCase = function () {\n    this.list.forEach(p => {\n      //remove whitespace\n      let terms = p.terms();\n      terms.forEach((t, i) => {\n        if (i !== 0) {\n          t.toTitleCase();\n        }\n\n        if (i !== terms.length - 1) {\n          t.post = '';\n        }\n      });\n    }); // this.tag('#CamelCase', 'toCamelCase')\n\n    return this;\n  };\n\n  var _05Whitespace = {};\n\n  /** add this punctuation or whitespace before each match: */\n\n  (function (exports) {\n    exports.pre = function (str, concat) {\n      if (str === undefined) {\n        return this.list[0].terms(0).pre;\n      }\n\n      this.list.forEach(p => {\n        let term = p.terms(0);\n\n        if (concat === true) {\n          term.pre += str;\n        } else {\n          term.pre = str;\n        }\n      });\n      return this;\n    };\n    /** add this punctuation or whitespace after each match: */\n\n\n    exports.post = function (str, concat) {\n      // return array of post strings\n      if (str === undefined) {\n        return this.list.map(p => {\n          let terms = p.terms();\n          let term = terms[terms.length - 1];\n          return term.post;\n        });\n      } // set post string on all ends\n\n\n      this.list.forEach(p => {\n        let terms = p.terms();\n        let term = terms[terms.length - 1];\n\n        if (concat === true) {\n          term.post += str;\n        } else {\n          term.post = str;\n        }\n      });\n      return this;\n    };\n    /** remove start and end whitespace */\n\n\n    exports.trim = function () {\n      this.list = this.list.map(p => p.trim());\n      return this;\n    };\n    /** connect words with hyphen, and remove whitespace */\n\n\n    exports.hyphenate = function () {\n      this.list.forEach(p => {\n        let terms = p.terms(); //remove whitespace\n\n        terms.forEach((t, i) => {\n          if (i !== 0) {\n            t.pre = '';\n          }\n\n          if (terms[i + 1]) {\n            t.post = '-';\n          }\n        });\n      });\n      return this;\n    };\n    /** remove hyphens between words, and set whitespace */\n\n\n    exports.dehyphenate = function () {\n      const hasHyphen = /(-|–|—)/;\n      this.list.forEach(p => {\n        let terms = p.terms(); //remove whitespace\n\n        terms.forEach(t => {\n          if (hasHyphen.test(t.post)) {\n            t.post = ' ';\n          }\n        });\n      });\n      return this;\n    };\n\n    exports.deHyphenate = exports.dehyphenate;\n    /** add quotations around these matches */\n\n    exports.toQuotations = function (start, end) {\n      start = start || `\"`;\n      end = end || `\"`;\n      this.list.forEach(p => {\n        let terms = p.terms();\n        terms[0].pre = start + terms[0].pre;\n        let last = terms[terms.length - 1];\n        last.post = end + last.post;\n      });\n      return this;\n    };\n\n    exports.toQuotation = exports.toQuotations;\n    /** add brackets around these matches */\n\n    exports.toParentheses = function (start, end) {\n      start = start || `(`;\n      end = end || `)`;\n      this.list.forEach(p => {\n        let terms = p.terms();\n        terms[0].pre = start + terms[0].pre;\n        let last = terms[terms.length - 1];\n        last.post = end + last.post;\n      });\n      return this;\n    };\n  })(_05Whitespace);\n\n  var _06Join = {};\n\n  /** make all phrases into one phrase */\n\n  _06Join.join = function (str) {\n    // clear the cache\n    this.uncache(); // make one large phrase - 'main'\n\n    let main = this.list[0];\n    let before = main.length;\n    let removed = {};\n\n    for (let i = 1; i < this.list.length; i++) {\n      const p = this.list[i];\n      removed[p.start] = true;\n      let term = main.lastTerm(); // add whitespace between them\n\n      if (str) {\n        term.post += str;\n      } //  main -> p\n\n\n      term.next = p.start; // main <- p\n\n      p.terms(0).prev = term.id;\n      main.length += p.length;\n      main.cache = {};\n    } // parents are bigger than than their children.\n    // when we increase a child, we increase their parent too.\n\n\n    let increase = main.length - before;\n    this.parents().forEach(doc => {\n      // increase length on each effected phrase\n      doc.list.forEach(p => {\n        let terms = p.terms();\n\n        for (let i = 0; i < terms.length; i++) {\n          if (terms[i].id === main.start) {\n            p.length += increase;\n            break;\n          }\n        }\n\n        p.cache = {};\n      }); // remove redundant phrases now\n\n      doc.list = doc.list.filter(p => removed[p.start] !== true);\n    }); // return one major phrase\n\n    return this.buildFrom([main]);\n  };\n\n  var _07Contract = {};\n\n  const postPunct = /[,\\)\"';:\\-–—\\.…]/; // const irregulars = {\n  //   'will not': `won't`,\n  //   'i am': `i'm`,\n  // }\n\n  const setContraction = function (m, suffix) {\n    if (!m.found) {\n      return;\n    }\n\n    let terms = m.termList(); //avoid any problematic punctuation\n\n    for (let i = 0; i < terms.length - 1; i++) {\n      const t = terms[i];\n\n      if (postPunct.test(t.post)) {\n        return;\n      }\n    } // set them as implict\n\n\n    terms.forEach(t => {\n      t.implicit = t.clean;\n    }); // perform the contraction\n\n    terms[0].text += suffix; // clean-up the others\n\n    terms.slice(1).forEach(t => {\n      t.text = '';\n    });\n\n    for (let i = 0; i < terms.length - 1; i++) {\n      const t = terms[i];\n      t.post = t.post.replace(/ /, '');\n    }\n  };\n  /** turn 'i am' into i'm */\n\n\n  _07Contract.contract = function () {\n    let doc = this.not('@hasContraction'); // we are -> we're\n\n    let m = doc.match('(we|they|you) are');\n    setContraction(m, `'re`); // they will -> they'll\n\n    m = doc.match('(he|she|they|it|we|you) will');\n    setContraction(m, `'ll`); // she is -> she's\n\n    m = doc.match('(he|she|they|it|we) is');\n    setContraction(m, `'s`); // spencer is -> spencer's\n\n    m = doc.match('#Person is');\n    setContraction(m, `'s`); // spencer would -> spencer'd\n\n    m = doc.match('#Person would');\n    setContraction(m, `'d`); // would not -> wouldn't\n\n    m = doc.match('(is|was|had|would|should|could|do|does|have|has|can) not');\n    setContraction(m, `n't`); // i have -> i've\n\n    m = doc.match('(i|we|they) have');\n    setContraction(m, `'ve`); // would have -> would've\n\n    m = doc.match('(would|should|could) have');\n    setContraction(m, `'ve`); // i am -> i'm\n\n    m = doc.match('i am');\n    setContraction(m, `'m`); // going to -> gonna\n\n    m = doc.match('going to');\n    return this;\n  };\n\n  var methods$6 = Object.assign({}, _01Utils, _02Accessors, _03Match, _04Tag, _05Loops, _06Lookup, _07Cache, _01Replace, _02Insert, _01Text, _02Json, _03Out, _01Sort, _02Normalize, _03Split, _04Case, _05Whitespace, _06Join, _07Contract);\n\n  let methods$5 = {}; // allow helper methods like .adjectives() and .adverbs()\n\n  const arr = [['terms', '.'], ['hyphenated', '@hasHyphen .'], ['adjectives', '#Adjective'], ['hashTags', '#HashTag'], ['emails', '#Email'], ['emoji', '#Emoji'], ['emoticons', '#Emoticon'], ['atMentions', '#AtMention'], ['urls', '#Url'], ['adverbs', '#Adverb'], ['pronouns', '#Pronoun'], ['conjunctions', '#Conjunction'], ['prepositions', '#Preposition']];\n  arr.forEach(a => {\n    methods$5[a[0]] = function (n) {\n      let m = this.match(a[1]);\n\n      if (typeof n === 'number') {\n        m = m.get(n);\n      }\n\n      return m;\n    };\n  }); // aliases\n\n  methods$5.emojis = methods$5.emoji;\n  methods$5.atmentions = methods$5.atMentions;\n  methods$5.words = methods$5.terms;\n  /** return anything tagged as a phone number */\n\n  methods$5.phoneNumbers = function (n) {\n    let m = this.splitAfter('@hasComma');\n    m = m.match('#PhoneNumber+');\n\n    if (typeof n === 'number') {\n      m = m.get(n);\n    }\n\n    return m;\n  };\n  /** Deprecated: please use compromise-numbers plugin */\n\n\n  methods$5.money = function (n) {\n    let m = this.match('#Money #Currency?');\n\n    if (typeof n === 'number') {\n      m = m.get(n);\n    }\n\n    return m;\n  };\n  /** return all cities, countries, addresses, and regions */\n\n\n  methods$5.places = function (n) {\n    // don't split 'paris, france'\n    let keep = this.match('(#City && @hasComma) (#Region|#Country)'); // but split the other commas\n\n    let m = this.not(keep).splitAfter('@hasComma'); // combine them back together\n\n    m = m.concat(keep);\n    m.sort('index');\n    m = m.match('#Place+');\n\n    if (typeof n === 'number') {\n      m = m.get(n);\n    }\n\n    return m;\n  };\n  /** return all schools, businesses and institutions */\n\n\n  methods$5.organizations = function (n) {\n    let m = this.clauses();\n    m = m.match('#Organization+');\n\n    if (typeof n === 'number') {\n      m = m.get(n);\n    }\n\n    return m;\n  }; //combine them with .topics() method\n\n\n  methods$5.entities = function (n) {\n    let r = this.clauses(); // Find people, places, and organizations\n\n    let yup = r.people();\n    yup = yup.concat(r.places());\n    yup = yup.concat(r.organizations());\n    let ignore = ['someone', 'man', 'woman', 'mother', 'brother', 'sister', 'father'];\n    yup = yup.not(ignore); //return them to normal ordering\n\n    yup.sort('sequence'); // yup.unique() //? not sure\n\n    if (typeof n === 'number') {\n      yup = yup.get(n);\n    }\n\n    return yup;\n  }; //aliases\n\n\n  methods$5.things = methods$5.entities;\n  methods$5.topics = methods$5.entities;\n  var _simple = methods$5;\n\n  const underOver = /^(under|over)-?.{3}/;\n  /** match a word-sequence, like 'super bowl' in the lexicon */\n\n  const tryMultiple = function (terms, t, world) {\n    let lex = world.words; //try a two-word version\n\n    let txt = terms[t].reduced + ' ' + terms[t + 1].reduced;\n\n    if (lex[txt] !== undefined && lex.hasOwnProperty(txt) === true) {\n      terms[t].tag(lex[txt], 'lexicon-two', world);\n      terms[t + 1].tag(lex[txt], 'lexicon-two', world);\n      return 1;\n    } //try a three-word version?\n\n\n    if (t + 2 < terms.length) {\n      txt += ' ' + terms[t + 2].reduced;\n\n      if (lex[txt] !== undefined && lex.hasOwnProperty(txt) === true) {\n        terms[t].tag(lex[txt], 'lexicon-three', world);\n        terms[t + 1].tag(lex[txt], 'lexicon-three', world);\n        terms[t + 2].tag(lex[txt], 'lexicon-three', world);\n        return 2;\n      }\n    } //try a four-word version?\n\n\n    if (t + 3 < terms.length) {\n      txt += ' ' + terms[t + 3].reduced;\n\n      if (lex[txt] !== undefined && lex.hasOwnProperty(txt) === true) {\n        terms[t].tag(lex[txt], 'lexicon-four', world);\n        terms[t + 1].tag(lex[txt], 'lexicon-four', world);\n        terms[t + 2].tag(lex[txt], 'lexicon-four', world);\n        terms[t + 3].tag(lex[txt], 'lexicon-four', world);\n        return 3;\n      }\n    }\n\n    return 0;\n  };\n  /** look at each word in our list of known-words */\n\n\n  const checkLexicon$1 = function (terms, world) {\n    let lex = world.words;\n    let hasCompound = world.hasCompound; // use reduced?\n    //go through each term, and check the lexicon\n\n    for (let t = 0; t < terms.length; t += 1) {\n      let str = terms[t].clean; //is it the start of a compound word, like 'super bowl'?\n\n      if (hasCompound[str] === true && t + 1 < terms.length) {\n        let foundWords = tryMultiple(terms, t, world);\n\n        if (foundWords > 0) {\n          t += foundWords; //skip any already-found words\n\n          continue;\n        }\n      } //try one-word lexicon\n\n\n      if (lex[str] !== undefined && lex.hasOwnProperty(str) === true) {\n        terms[t].tag(lex[str], 'lexicon', world);\n        continue;\n      } // look at reduced version of term, too\n\n\n      if (str !== terms[t].reduced && lex.hasOwnProperty(terms[t].reduced) === true) {\n        terms[t].tag(lex[terms[t].reduced], 'lexicon', world);\n        continue;\n      } // prefix strip: try to match 'take' for 'undertake'\n\n\n      if (underOver.test(str) === true) {\n        let noPrefix = str.replace(/^(under|over)-?/, '');\n\n        if (lex.hasOwnProperty(noPrefix) === true) {\n          terms[t].tag(lex[noPrefix], 'noprefix-lexicon', world);\n        }\n      }\n    }\n\n    return terms;\n  };\n\n  var _01Lexicon = checkLexicon$1;\n\n  const apostrophes = /[\\'‘’‛‵′`´]$/;\n  const perSec = /^(m|k|cm|km|m)\\/(s|h|hr)$/; // '5 k/m'\n  //\n\n  const checkPunctuation = function (terms, i, world) {\n    let term = terms[i]; //check hyphenation\n    // if (term.post.indexOf('-') !== -1 && terms[i + 1] && terms[i + 1].pre === '') {\n    //   term.tag('Hyphenated', 'has-hyphen', world)\n    // }\n    // support 'head-over'\n    // if (term.hasHyphen() === true) {\n    //   console.log(term.tags)\n    // }\n    // console.log(term.hasHyphen(), term.text)\n    //an end-tick (trailing apostrophe) - flanders', or Carlos'\n\n    if (apostrophes.test(term.text)) {\n      if (!apostrophes.test(term.pre) && !apostrophes.test(term.post) && term.clean.length > 2) {\n        let endChar = term.clean[term.clean.length - 2]; //flanders'\n\n        if (endChar === 's') {\n          term.tag(['Possessive', 'Noun'], 'end-tick', world);\n          return;\n        } //chillin'\n\n\n        if (endChar === 'n') {\n          term.tag(['Gerund'], 'chillin', world);\n        }\n      }\n    } // '5 km/s'\n\n\n    if (perSec.test(term.text)) {\n      term.tag('Unit', 'per-sec', world);\n    } // 'NASA' is, but not 'i REALLY love it.'\n    // if (term.tags.Noun === true && isAcronym(term, world)) {\n    //   term.tag('Acronym', 'acronym-step', world)\n    //   term.tag('Noun', 'acronym-infer', world)\n    // } else if (!oneLetterWord.hasOwnProperty(term.text) && oneLetterAcronym.test(term.text)) {\n    //   term.tag('Acronym', 'one-letter-acronym', world)\n    //   term.tag('Noun', 'one-letter-infer', world)\n    // }\n\n  };\n\n  var _02Punctuation = checkPunctuation;\n\n  // order matters.\n\n  var startsWith = [//web tags\n  [/^[\\w\\.]+@[\\w\\.]+\\.[a-z]{2,3}$/, 'Email'], //not fancy\n  [/^#[a-z0-9_\\u00C0-\\u00FF]{2,}$/, 'HashTag'], [/^@1?[0-9](am|pm)$/i, 'Time'], // @6pm\n  [/^@1?[0-9]:[0-9]{2}(am|pm)?$/i, 'Time'], // @6:30\n  [/^@\\w{2,}$/, 'AtMention'], //@spencermountain\n  [/^(https?:\\/\\/|www\\.)+\\w+\\.[a-z]{2,3}/, 'Url'], //with http/www\n  [/^[a-z0-9./].+\\.(com|net|gov|org|ly|edu|info|biz|dev|ru|jp|de|in|uk|br|io|ai)/, 'Url'], //http://mostpopularwebsites.net/top-level-domain or Check for domains like .io/.ai/.dev\n  //dates/times\n  [/^'[0-9]{2}$/, 'Year'], //like '97\n  [/^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])$/, 'Time'], //4:32:32\n  [/^[012]?[0-9](:[0-5][0-9])?(:[0-5][0-9])? ?(am|pm)$/i, 'Time'], //4pm\n  [/^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])? ?(am|pm)?$/i, 'Time'], //4:00pm\n  [/^[PMCE]ST$/, 'Time'], //PST, time zone abbrevs\n  [/^utc ?[+-]?[0-9]+?$/, 'Time'], //UTC 8+\n  [/^[a-z0-9]*? o\\'?clock$/, 'Time'], //3 oclock\n  [/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}/i, 'Date'], // 2020-03-02T00:00:00.000Z\n  [/^[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,4}$/, 'Date'], // 03-02-89\n  [/^[0-9]{1,4}\\/[0-9]{1,2}\\/[0-9]{1,4}$/, 'Date'], // 03/02/89\n  [/^[0-9]{1,4}-[a-z]{2,9}-[0-9]{1,4}$/i, 'Date'], // 03-March-89\n  [/^gmt[+-][0-9][0-9]?$/i, 'Timezone'], // gmt-3\n  [/^utc[+-][0-9][0-9]?$/i, 'Timezone'], // utc-3\n  //names\n  [/^ma?c\\'.*/, 'LastName'], //mc'adams\n  [/^o\\'[drlkn].*/, 'LastName'], //o'douggan\n  [/^ma?cd[aeiou]/, 'LastName'], //macdonell - Last patterns https://en.wikipedia.org/wiki/List_of_family_name_affixes\n  //slang things\n  [/^(lol)+[sz]$/, 'Expression'], //lol\n  [/^woo+a*?h?$/, 'Expression'], //whoaa, wooo\n  [/^(un|de|re)\\\\-[a-z\\u00C0-\\u00FF]{2}/, 'Verb'], // [/^(over|under)[a-z]{2,}/, 'Adjective'],\n  [/^[0-9]{1,4}\\.[0-9]{1,2}\\.[0-9]{1,4}$/, 'Date'], // 03-02-89\n  //phone numbers\n  [/^[0-9]{3}-[0-9]{4}$/, 'PhoneNumber'], //589-3809\n  [/^(\\+?[0-9][ -])?[0-9]{3}[ -]?[0-9]{3}-[0-9]{4}$/, 'PhoneNumber'], //632-589-3809\n  //money\n  // currency regex\n  // /[\\$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BD\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6]\n  //like $5.30\n  [/^[-+]?[\\$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BD\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6][-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?(k|m|b|bn)?\\+?$/, ['Money', 'Value']], //like 5.30$\n  [/^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?[\\$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BD\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6]\\+?$/, ['Money', 'Value']], //like $400usd\n  [/^[-+]?[\\$£]?[0-9]([0-9,.])+?(usd|eur|jpy|gbp|cad|aud|chf|cny|hkd|nzd|kr|rub)$/i, ['Money', 'Value']], //numbers\n  // 50 | -50 | 3.23  | 5,999.0  | 10+\n  [/^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?\\+?$/, ['Cardinal', 'NumericValue']], [/^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?(st|nd|rd|r?th)$/, ['Ordinal', 'NumericValue']], // .73th\n  [/^\\.[0-9]+\\+?$/, ['Cardinal', 'NumericValue']], //percent\n  [/^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?%\\+?$/, ['Percent', 'Cardinal', 'NumericValue']], //7%  ..\n  [/^\\.[0-9]+%$/, ['Percent', 'Cardinal', 'NumericValue']], //.7%  ..\n  //fraction\n  [/^[0-9]{1,4}\\/[0-9]{1,4}(st|nd|rd|th)?s?$/, ['Fraction', 'NumericValue']], //3/2ths\n  //range\n  [/^[0-9.]{1,3}[a-z]{0,2}[-–—][0-9]{1,3}[a-z]{0,2}$/, ['Value', 'NumberRange']], //7th-8th\n  //time-range\n  [/^[0-9][0-9]?(:[0-9][0-9])?(am|pm)? ?[-–—] ?[0-9][0-9]?(:[0-9][0-9])?(am|pm)?$/, ['Time', 'NumberRange']], //7pm-8:30\n  //with unit\n  [/^[0-9.]+([a-z]{1,4})$/, 'Value'] //like 5tbsp\n  //ordinal\n  // [/^[0-9][0-9,.]*(st|nd|rd|r?th)$/, ['NumericValue', 'Ordinal']], //like 5th\n  // [/^[0-9]+(st|nd|rd|th)$/, 'Ordinal'], //like 5th\n  ];\n\n  const regex = startsWith;\n  const romanNumeral = /^[IVXLCDM]{2,}$/;\n  const romanNumValid = /^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/; //  https://stackoverflow.com/a/267405/168877\n  //try each of the ^regexes in our list\n\n  const checkRegex$1 = function (term, world) {\n    let str = term.text; // do them all!\n\n    for (let r = 0; r < regex.length; r += 1) {\n      if (regex[r][0].test(str) === true) {\n        term.tagSafe(regex[r][1], 'prefix #' + r, world);\n        break;\n      }\n    } // do some more!\n    //roman numberals - XVII\n\n\n    if (term.text.length >= 2 && romanNumeral.test(str) && romanNumValid.test(str)) {\n      term.tag('RomanNumeral', 'xvii', world);\n    }\n  };\n\n  var _03Prefixes = checkRegex$1;\n\n  //built using wordnet, by spencer kelly.\n  //this mapping shrinks-down the uglified build\n\n  const Adj$1 = 'Adjective';\n  const Inf$1 = 'Infinitive';\n  const Pres$1 = 'PresentTense';\n  const Sing$1 = 'Singular';\n  const Past$1 = 'PastTense';\n  const Adverb = 'Adverb';\n  const Exp = 'Expression';\n  const Actor$1 = 'Actor';\n  const Verb = 'Verb';\n  const Noun$1 = 'Noun';\n  const Last$1 = 'LastName'; //the order here matters.\n  //regexes indexed by mandated last-character\n\n  var endsWith$1 = {\n    a: [[/.[aeiou]na$/, Noun$1], [/.[oau][wvl]ska$/, Last$1], //polish (female)\n    [/.[^aeiou]ica$/, Sing$1], [/^([hyj]a)+$/, Exp] //hahah\n    ],\n    c: [[/.[^aeiou]ic$/, Adj$1]],\n    d: [//==-ed==\n    //double-consonant\n    [/[aeiou](pp|ll|ss|ff|gg|tt|rr|bb|nn|mm)ed$/, Past$1], //popped, planned\n    //double-vowel\n    [/.[aeo]{2}[bdgmnprvz]ed$/, Past$1], //beeped, mooned, veered\n    //-hed\n    [/.[aeiou][sg]hed$/, Past$1], //stashed, sighed\n    //-rd\n    [/.[aeiou]red$/, Past$1], //stored\n    [/.[aeiou]r?ried$/, Past$1], //buried\n    //-led\n    [/.[bcdgtr]led$/, Past$1], //startled, rumbled\n    [/.[aoui]f?led$/, Past$1], //impaled, stifled\n    //-sed\n    [/.[iao]sed$/, Past$1], //franchised\n    [/[aeiou]n?[cs]ed$/, Past$1], //laced, lanced\n    //-med\n    [/[aeiou][rl]?[mnf]ed$/, Past$1], //warmed, attained, engulfed\n    //-ked\n    [/[aeiou][ns]?c?ked$/, Past$1], //hooked, masked\n    //-ged\n    [/[aeiou][nl]?ged$/, Past$1], //engaged\n    //-ted\n    [/.[tdbwxz]ed$/, Past$1], //bribed, boxed\n    [/[^aeiou][aeiou][tvx]ed$/, Past$1], //boxed\n    //-ied\n    [/.[cdlmnprstv]ied$/, Past$1], //rallied\n    [/[^aeiou]ard$/, Sing$1], //card\n    [/[aeiou][^aeiou]id$/, Adj$1], [/.[vrl]id$/, Adj$1]],\n    e: [[/.[lnr]ize$/, Inf$1], [/.[^aeiou]ise$/, Inf$1], [/.[aeiou]te$/, Inf$1], [/.[^aeiou][ai]ble$/, Adj$1], [/.[^aeiou]eable$/, Adj$1], [/.[ts]ive$/, Adj$1], [/[a-z]-like$/, Adj$1]],\n    h: [[/.[^aeiouf]ish$/, Adj$1], [/.v[iy]ch$/, Last$1], //east-europe\n    [/^ug?h+$/, Exp], //uhh\n    [/^uh[ -]?oh$/, Exp], //uhoh\n    [/[a-z]-ish$/, Adj$1] //cartoon-ish\n    ],\n    i: [[/.[oau][wvl]ski$/, Last$1] //polish (male)\n    ],\n    k: [[/^(k){2}$/, Exp] //kkkk\n    ],\n    l: [[/.[gl]ial$/, Adj$1], [/.[^aeiou]ful$/, Adj$1], [/.[nrtumcd]al$/, Adj$1], [/.[^aeiou][ei]al$/, Adj$1]],\n    m: [[/.[^aeiou]ium$/, Sing$1], [/[^aeiou]ism$/, Sing$1], [/^h*u*m+$/, Exp], //mmmmmmm / ummmm / huuuuuummmmmm\n    [/^\\d+ ?[ap]m$/, 'Date']],\n    n: [[/.[lsrnpb]ian$/, Adj$1], [/[^aeiou]ician$/, Actor$1], [/[aeiou][ktrp]in$/, 'Gerund'] // 'cookin', 'hootin'\n    ],\n    o: [[/^no+$/, Exp], //noooo\n    [/^(yo)+$/, Exp], //yoyo\n    [/^woo+[pt]?$/, Exp] //woo\n    ],\n    r: [[/.[bdfklmst]ler$/, 'Noun'], [/[aeiou][pns]er$/, Sing$1], [/[^i]fer$/, Inf$1], [/.[^aeiou][ao]pher$/, Actor$1], [/.[lk]er$/, 'Noun'], [/.ier$/, 'Comparative']],\n    t: [[/.[di]est$/, 'Superlative'], [/.[icldtgrv]ent$/, Adj$1], [/[aeiou].*ist$/, Adj$1], [/^[a-z]et$/, Verb]],\n    s: [[/.[^aeiou]ises$/, Pres$1], [/.[rln]ates$/, Pres$1], [/.[^z]ens$/, Verb], [/.[lstrn]us$/, Sing$1], [/.[aeiou]sks$/, Pres$1], //masks\n    [/.[aeiou]kes$/, Pres$1], //bakes\n    [/[aeiou][^aeiou]is$/, Sing$1], [/[a-z]\\'s$/, Noun$1], [/^yes+$/, Exp] //yessss\n    ],\n    v: [[/.[^aeiou][ai][kln]ov$/, Last$1] //east-europe\n    ],\n    y: [[/.[cts]hy$/, Adj$1], [/.[st]ty$/, Adj$1], [/.[gk]y$/, Adj$1], [/.[tnl]ary$/, Adj$1], [/.[oe]ry$/, Sing$1], [/[rdntkbhs]ly$/, Adverb], [/...lly$/, Adverb], [/[bszmp]{2}y$/, Adj$1], [/.(gg|bb|zz)ly$/, Adj$1], [/.[ai]my$/, Adj$1], [/[ea]{2}zy$/, Adj$1], [/.[^aeiou]ity$/, Sing$1]]\n  };\n\n  const Adj = 'Adjective';\n  const Inf = 'Infinitive';\n  const Pres = 'PresentTense';\n  const Sing = 'Singular';\n  const Past = 'PastTense';\n  const Avb = 'Adverb';\n  const Plrl = 'Plural';\n  const Actor = 'Actor';\n  const Vb = 'Verb';\n  const Noun = 'Noun';\n  const Last = 'LastName';\n  const Modal = 'Modal';\n  const Place = 'Place'; // find any issues - https://observablehq.com/@spencermountain/suffix-word-lookup\n\n  var suffixMap$1 = [null, //0\n  null, //1\n  {\n    //2-letter\n    ea: Sing,\n    ia: Noun,\n    ic: Adj,\n    ly: Avb,\n    \"'n\": Vb,\n    \"'t\": Vb\n  }, {\n    //3-letter\n    oed: Past,\n    ued: Past,\n    xed: Past,\n    ' so': Avb,\n    \"'ll\": Modal,\n    \"'re\": 'Copula',\n    azy: Adj,\n    eer: Noun,\n    end: Vb,\n    ped: Past,\n    ffy: Adj,\n    ify: Inf,\n    ing: 'Gerund',\n    //likely to be converted to Adj after lexicon pass\n    ize: Inf,\n    lar: Adj,\n    mum: Adj,\n    nes: Pres,\n    nny: Adj,\n    oid: Adj,\n    ous: Adj,\n    que: Adj,\n    rol: Sing,\n    sis: Sing,\n    zes: Pres\n  }, {\n    //4-letter\n    amed: Past,\n    aped: Past,\n    ched: Past,\n    lked: Past,\n    nded: Past,\n    cted: Past,\n    dged: Past,\n    akis: Last,\n    //greek\n    cede: Inf,\n    chuk: Last,\n    //east-europe\n    czyk: Last,\n    //polish (male)\n    ects: Pres,\n    ends: Vb,\n    enko: Last,\n    //east-europe\n    ette: Sing,\n    fies: Pres,\n    fore: Avb,\n    gate: Inf,\n    gone: Adj,\n    ices: Plrl,\n    ints: Plrl,\n    ines: Plrl,\n    ions: Plrl,\n    less: Avb,\n    llen: Adj,\n    made: Adj,\n    nsen: Last,\n    //norway\n    oses: Pres,\n    ould: Modal,\n    some: Adj,\n    sson: Last,\n    //swedish male\n    tage: Inf,\n    teen: 'Value',\n    tion: Sing,\n    tive: Adj,\n    tors: Noun,\n    vice: Sing\n  }, {\n    //5-letter\n    tized: Past,\n    urned: Past,\n    eased: Past,\n    ances: Plrl,\n    bound: Adj,\n    ettes: Plrl,\n    fully: Avb,\n    ishes: Pres,\n    ities: Plrl,\n    marek: Last,\n    //polish (male)\n    nssen: Last,\n    //norway\n    ology: Noun,\n    ports: Plrl,\n    rough: Adj,\n    tches: Pres,\n    tieth: 'Ordinal',\n    tures: Plrl,\n    wards: Avb,\n    where: Avb\n  }, {\n    //6-letter\n    auskas: Last,\n    //lithuania\n    keeper: Actor,\n    logist: Actor,\n    teenth: 'Value'\n  }, {\n    //7-letter\n    opoulos: Last,\n    //greek\n    borough: Place,\n    //Hillsborough\n    sdottir: Last //swedish female\n\n  }];\n\n  const endsWith = endsWith$1;\n  const suffixMap = suffixMap$1;\n\n  const endRegexs = function (term, world) {\n    let str = term.clean;\n    let char = str[str.length - 1];\n\n    if (endsWith.hasOwnProperty(char) === true) {\n      let regs = endsWith[char];\n\n      for (let r = 0; r < regs.length; r += 1) {\n        if (regs[r][0].test(str) === true) {\n          term.tagSafe(regs[r][1], `endReg ${char} #${r}`, world);\n          break;\n        }\n      }\n    }\n  }; //sweep-through all suffixes\n\n\n  const knownSuffixes = function (term, world) {\n    const len = term.clean.length;\n    let max = 7;\n\n    if (len <= max) {\n      max = len - 1;\n    }\n\n    for (let i = max; i > 1; i -= 1) {\n      let str = term.clean.substr(len - i, len);\n\n      if (suffixMap[str.length].hasOwnProperty(str) === true) {\n        let tag = suffixMap[str.length][str];\n        term.tagSafe(tag, 'suffix -' + str, world);\n        break;\n      }\n    }\n  }; //all-the-way-down!\n\n\n  const checkRegex = function (term, world) {\n    knownSuffixes(term, world);\n    endRegexs(term, world);\n  };\n\n  var _04Suffixes = checkRegex;\n\n  //faster than\n  //http://stackoverflow.com/questions/28077049/regex-matching-emoticons\n\n  var emoticons = {\n    ':(': true,\n    ':)': true,\n    ':P': true,\n    ':p': true,\n    ':O': true,\n    ':3': true,\n    ':|': true,\n    ':/': true,\n    ':\\\\': true,\n    ':$': true,\n    ':*': true,\n    ':@': true,\n    ':-(': true,\n    ':-)': true,\n    ':-P': true,\n    ':-p': true,\n    ':-O': true,\n    ':-3': true,\n    ':-|': true,\n    ':-/': true,\n    ':-\\\\': true,\n    ':-$': true,\n    ':-*': true,\n    ':-@': true,\n    ':^(': true,\n    ':^)': true,\n    ':^P': true,\n    ':^p': true,\n    ':^O': true,\n    ':^3': true,\n    ':^|': true,\n    ':^/': true,\n    ':^\\\\': true,\n    ':^$': true,\n    ':^*': true,\n    ':^@': true,\n    '):': true,\n    '(:': true,\n    '$:': true,\n    '*:': true,\n    ')-:': true,\n    '(-:': true,\n    '$-:': true,\n    '*-:': true,\n    ')^:': true,\n    '(^:': true,\n    '$^:': true,\n    '*^:': true,\n    '<3': true,\n    '</3': true,\n    '<\\\\3': true\n  };\n\n  const emojiReg = /^(\\u00a9|\\u00ae|[\\u2319-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff])/;\n  const emoticon = emoticons; //for us, there's three types -\n  // * ;) - emoticons\n  // * 🌵 - unicode emoji\n  // * :smiling_face: - asci-represented emoji\n  //test for forms like ':woman_tone2:‍:ear_of_rice:'\n  //https://github.com/Kikobeats/emojis-keywords/blob/master/index.js\n\n  const isCommaEmoji = raw => {\n    if (raw.charAt(0) === ':') {\n      //end comma can be last or second-last ':haircut_tone3:‍♀️'\n      if (raw.match(/:.?$/) === null) {\n        return false;\n      } //ensure no spaces\n\n\n      if (raw.match(' ')) {\n        return false;\n      } //reasonably sized\n\n\n      if (raw.length > 35) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }; //check against emoticon whitelist\n\n\n  const isEmoticon = str => {\n    str = str.replace(/^[:;]/, ':'); //normalize the 'eyes'\n\n    return emoticon.hasOwnProperty(str);\n  };\n\n  const tagEmoji = (term, world) => {\n    let raw = term.pre + term.text + term.post;\n    raw = raw.trim(); //dont double-up on ending periods\n\n    raw = raw.replace(/[.!?,]$/, ''); //test for :keyword: emojis\n\n    if (isCommaEmoji(raw) === true) {\n      term.tag('Emoji', 'comma-emoji', world);\n      term.text = raw;\n      term.pre = term.pre.replace(':', '');\n      term.post = term.post.replace(':', '');\n    } //test for unicode emojis\n\n\n    if (term.text.match(emojiReg)) {\n      term.tag('Emoji', 'unicode-emoji', world);\n      term.text = raw;\n    } //test for emoticon ':)' emojis\n\n\n    if (isEmoticon(raw) === true) {\n      term.tag('Emoticon', 'emoticon-emoji', world);\n      term.text = raw;\n    }\n  };\n\n  var _05Emoji = tagEmoji;\n\n  const steps = {\n    lexicon: _01Lexicon,\n    punctuation: _02Punctuation,\n    regex: _03Prefixes,\n    suffix: _04Suffixes,\n    emoji: _05Emoji\n  }; //'lookups' look at a term by itself\n\n  const lookups = function (doc, terms) {\n    let world = doc.world; //our list of known-words\n\n    steps.lexicon(terms, world); //try these other methods\n\n    for (let i = 0; i < terms.length; i += 1) {\n      let term = terms[i]; //or maybe some helpful punctuation\n\n      steps.punctuation(terms, i, world); //mostly prefix checks\n\n      steps.regex(term, world); //maybe we can guess\n\n      steps.suffix(term, world); //emoji and emoticons\n\n      steps.emoji(term, world);\n    }\n\n    return doc;\n  };\n\n  var _01Init = lookups;\n\n  //basically, a little-bit better than the noun-fallback\n  //just top n-grams from nlp tags, generated from nlp-corpus\n  //after this word, here's what happens usually\n\n  let afterThisWord = {\n    i: 'Verb',\n    //44% //i walk..\n    first: 'Noun',\n    //50% //first principles..\n    it: 'Verb',\n    //33%\n    there: 'Verb',\n    //35%\n    not: 'Verb',\n    //33%\n    because: 'Noun',\n    //31%\n    if: 'Noun',\n    //32%\n    but: 'Noun',\n    //26%\n    who: 'Verb',\n    //40%\n    this: 'Noun',\n    //37%\n    his: 'Noun',\n    //48%\n    when: 'Noun',\n    //33%\n    you: 'Verb',\n    //35%\n    very: 'Adjective',\n    // 39%\n    old: 'Noun',\n    //51%\n    never: 'Verb',\n    //42%\n    before: 'Noun' //28%\n\n  }; //in advance of this word, this is what happens usually\n\n  let beforeThisWord = {\n    there: 'Verb',\n    //23% // be there\n    me: 'Verb',\n    //31% //see me\n    man: 'Adjective',\n    // 80% //quiet man\n    only: 'Verb',\n    //27% //sees only\n    him: 'Verb',\n    //32% //show him\n    were: 'Noun',\n    //48% //we were\n    took: 'Noun',\n    //38% //he took\n    himself: 'Verb',\n    //31% //see himself\n    went: 'Noun',\n    //43% //he went\n    who: 'Noun',\n    //47% //person who\n    jr: 'Person'\n  }; //following this POS, this is likely\n\n  let afterThisPOS = {\n    Adjective: 'Noun',\n    //36% //blue dress\n    Possessive: 'Noun',\n    //41% //his song\n    Determiner: 'Noun',\n    //47%\n    Adverb: 'Verb',\n    //20%\n    Pronoun: 'Verb',\n    //40%\n    Value: 'Noun',\n    //47%\n    Ordinal: 'Noun',\n    //53%\n    Modal: 'Verb',\n    //35%\n    Superlative: 'Noun',\n    //43%\n    Demonym: 'Noun',\n    //38%\n    Honorific: 'Person' //\n\n  }; //in advance of this POS, this is likely\n\n  let beforeThisPOS = {\n    Copula: 'Noun',\n    //44% //spencer is\n    PastTense: 'Noun',\n    //33% //spencer walked\n    Conjunction: 'Noun',\n    //36%\n    Modal: 'Noun',\n    //38%\n    Pluperfect: 'Noun',\n    //40%\n    PerfectTense: 'Verb' //32%\n\n  };\n  var markov$1 = {\n    beforeThisWord: beforeThisWord,\n    afterThisWord: afterThisWord,\n    beforeThisPos: beforeThisPOS,\n    afterThisPos: afterThisPOS\n  };\n\n  const markov = markov$1;\n  const afterKeys = Object.keys(markov.afterThisPos);\n  const beforeKeys = Object.keys(markov.beforeThisPos);\n\n  const checkNeighbours = function (terms, world) {\n    for (let i = 0; i < terms.length; i += 1) {\n      let term = terms[i]; //do we still need a tag?\n\n      if (term.isKnown() === true) {\n        continue;\n      } //ok, this term needs a tag.\n      //look at previous word for clues..\n\n\n      let lastTerm = terms[i - 1];\n\n      if (lastTerm) {\n        // 'foobar term'\n        if (markov.afterThisWord.hasOwnProperty(lastTerm.clean) === true) {\n          let tag = markov.afterThisWord[lastTerm.clean];\n          term.tag(tag, 'after-' + lastTerm.clean, world);\n          continue;\n        } // 'Tag term'\n        // (look at previous POS tags for clues..)\n\n\n        let foundTag = afterKeys.find(tag => lastTerm.tags[tag]);\n\n        if (foundTag !== undefined) {\n          let tag = markov.afterThisPos[foundTag];\n          term.tag(tag, 'after-' + foundTag, world);\n          continue;\n        }\n      } //look at next word for clues..\n\n\n      let nextTerm = terms[i + 1];\n\n      if (nextTerm) {\n        // 'term foobar'\n        if (markov.beforeThisWord.hasOwnProperty(nextTerm.clean) === true) {\n          let tag = markov.beforeThisWord[nextTerm.clean];\n          term.tag(tag, 'before-' + nextTerm.clean, world);\n          continue;\n        } // 'term Tag'\n        // (look at next POS tags for clues..)\n\n\n        let foundTag = beforeKeys.find(tag => nextTerm.tags[tag]);\n\n        if (foundTag !== undefined) {\n          let tag = markov.beforeThisPos[foundTag];\n          term.tag(tag, 'before-' + foundTag, world);\n          continue;\n        }\n      }\n    }\n  };\n\n  var _01Neighbours = checkNeighbours;\n\n  const titleCase = /^[A-Z][a-z'\\u00C0-\\u00FF]/;\n  const hasNumber = /[0-9]/;\n  /** look for any grammar signals based on capital/lowercase */\n\n  const checkCase = function (doc) {\n    let world = doc.world;\n    doc.list.forEach(p => {\n      let terms = p.terms();\n\n      for (let i = 1; i < terms.length; i++) {\n        const term = terms[i];\n\n        if (titleCase.test(term.text) === true && hasNumber.test(term.text) === false && term.tags.Date === undefined) {\n          term.tag('ProperNoun', 'titlecase-noun', world);\n        }\n      }\n    });\n  };\n\n  var _02Case = checkCase;\n\n  const hasPrefix = /^(re|un)-?[a-z\\u00C0-\\u00FF]/;\n  const prefix = /^(re|un)-?/;\n  /** check 'rewatch' in lexicon as 'watch' */\n\n  const checkPrefix = function (terms, world) {\n    let lex = world.words;\n    terms.forEach(term => {\n      // skip if we have a good tag already\n      if (term.isKnown() === true) {\n        return;\n      } //does it start with 'un|re'\n\n\n      if (hasPrefix.test(term.clean) === true) {\n        // look for the root word in the lexicon:\n        let stem = term.clean.replace(prefix, '');\n\n        if (stem && stem.length > 3 && lex[stem] !== undefined && lex.hasOwnProperty(stem) === true) {\n          term.tag(lex[stem], 'stem-' + stem, world);\n        }\n      }\n    });\n  };\n\n  var _03Stem = checkPrefix;\n\n  const isPlural$8 = [/(^v)ies$/i, /ises$/i, /ives$/i, /(antenn|formul|nebul|vertebr|vit)ae$/i, /(octop|vir|radi|nucle|fung|cact|stimul)i$/i, /(buffal|tomat|tornad)oes$/i, /(analy|ba|diagno|parenthe|progno|synop|the)ses$/i, /(vert|ind|cort)ices$/i, /(matr|append)ices$/i, /(x|ch|ss|sh|s|z|o)es$/i, /is$/i, /men$/i, /news$/i, /.tia$/i, /(^f)ves$/i, /(lr)ves$/i, /(^aeiouy|qu)ies$/i, /(m|l)ice$/i, /(cris|ax|test)es$/i, /(alias|status)es$/i, /ics$/i]; //similar to plural/singularize rules, but not the same\n\n  const isSingular$1 = [/(ax|test)is$/i, /(octop|vir|radi|nucle|fung|cact|stimul)us$/i, /(octop|vir)i$/i, /(rl)f$/i, /(alias|status)$/i, /(bu)s$/i, /(al|ad|at|er|et|ed|ad)o$/i, /(ti)um$/i, /(ti)a$/i, /sis$/i, /(?:(^f)fe|(lr)f)$/i, /hive$/i, /s[aeiou]+ns$/i, // sans, siens\n  /(^aeiouy|qu)y$/i, /(x|ch|ss|sh|z)$/i, /(matr|vert|ind|cort)(ix|ex)$/i, /(m|l)ouse$/i, /(m|l)ice$/i, /(antenn|formul|nebul|vertebr|vit)a$/i, /.sis$/i, /^(?!talis|.*hu)(.*)man$/i];\n  var isPlural_1$2 = {\n    isSingular: isSingular$1,\n    isPlural: isPlural$8\n  };\n\n  const noPlurals = ['Uncountable', 'Pronoun', 'Place', 'Value', 'Person', 'Month', 'WeekDay', 'Holiday'];\n  const rules$1 = isPlural_1$2;\n  const notPlural = [/ss$/, /sis$/, /[^aeiou][uo]s$/, /'s$/];\n  const notSingular = [/i$/, /ae$/];\n  /** turn nouns into singular/plural */\n\n  const checkPlural = function (t, world) {\n    if (t.tags.Noun && !t.tags.Acronym) {\n      let str = t.clean; //skip existing tags, fast\n\n      if (t.tags.Singular || t.tags.Plural) {\n        return;\n      } //too short\n\n\n      if (str.length <= 3) {\n        t.tag('Singular', 'short-singular', world);\n        return;\n      } //is it impossible to be plural?\n\n\n      if (noPlurals.find(tag => t.tags[tag])) {\n        return;\n      } // isPlural suffix rules\n\n\n      if (rules$1.isPlural.find(reg => reg.test(str))) {\n        t.tag('Plural', 'plural-rules', world);\n        return;\n      } // isSingular suffix rules\n\n\n      if (rules$1.isSingular.find(reg => reg.test(str))) {\n        t.tag('Singular', 'singular-rules', world);\n        return;\n      } // finally, fallback 'looks plural' rules..\n\n\n      if (/s$/.test(str) === true) {\n        //avoid anything too sketchy to be plural\n        if (notPlural.find(reg => reg.test(str))) {\n          return;\n        }\n\n        t.tag('Plural', 'plural-fallback', world);\n        return;\n      } //avoid anything too sketchy to be singular\n\n\n      if (notSingular.find(reg => reg.test(str))) {\n        return;\n      }\n\n      t.tag('Singular', 'singular-fallback', world);\n    }\n  };\n\n  var _04Plurals = checkPlural;\n\n  //todo remove/normalize plural forms\n\n  const orgWords$1 = ['academy', 'administration', 'agence', 'agences', 'agencies', 'agency', 'airlines', 'airways', 'army', 'assoc', 'associates', 'association', 'assurance', 'authority', 'autorite', 'aviation', 'bank', 'banque', 'board', 'boys', 'brands', 'brewery', 'brotherhood', 'brothers', 'building society', 'bureau', 'cafe', 'caisse', 'capital', 'care', 'cathedral', 'center', 'central bank', 'centre', 'chemicals', 'choir', 'chronicle', 'church', 'circus', 'clinic', 'clinique', 'club', 'co', 'coalition', 'coffee', 'collective', 'college', 'commission', 'committee', 'communications', 'community', 'company', 'comprehensive', 'computers', 'confederation', 'conference', 'conseil', 'consulting', 'containers', 'corporation', 'corps', 'corp', 'council', 'crew', 'daily news', 'data', 'departement', 'department', 'department store', 'departments', 'design', 'development', 'directorate', 'division', 'drilling', 'education', 'eglise', 'electric', 'electricity', 'energy', 'ensemble', 'enterprise', 'enterprises', 'entertainment', 'estate', 'etat', 'evening news', 'faculty', 'federation', 'financial', 'fm', 'foundation', 'fund', 'gas', 'gazette', 'girls', 'government', 'group', 'guild', 'health authority', 'herald', 'holdings', 'hospital', 'hotel', 'hotels', 'inc', 'industries', 'institut', 'institute', 'institute of technology', 'institutes', 'insurance', 'international', 'interstate', 'investment', 'investments', 'investors', 'journal', 'laboratory', 'labs', // 'law',\n  'liberation army', 'limited', 'local authority', 'local health authority', 'machines', 'magazine', 'management', 'marine', 'marketing', 'markets', 'media', 'memorial', 'mercantile exchange', 'ministere', 'ministry', 'military', 'mobile', 'motor', 'motors', 'musee', 'museum', // 'network',\n  'news', 'news service', 'observatory', 'office', 'oil', 'optical', 'orchestra', 'organization', 'partners', 'partnership', // 'party',\n  \"people's party\", 'petrol', 'petroleum', 'pharmacare', 'pharmaceutical', 'pharmaceuticals', 'pizza', 'plc', 'police', 'polytechnic', 'post', 'power', 'press', 'productions', 'quartet', 'radio', 'regional authority', 'regional health authority', 'reserve', 'resources', 'restaurant', 'restaurants', 'savings', 'school', 'securities', 'service', 'services', 'social club', 'societe', 'society', 'sons', 'standard', 'state police', 'state university', 'stock exchange', 'subcommittee', 'syndicat', 'systems', 'telecommunications', 'telegraph', 'television', 'times', 'tribunal', 'tv', 'union', 'university', 'utilities', 'workers'];\n  var organizations = orgWords$1.reduce(function (h, str) {\n    h[str] = 'Noun';\n    return h;\n  }, {});\n\n  let orgWords = organizations; //could this word be an organization\n\n  const maybeOrg = function (t) {\n    //must be a noun\n    if (!t.tags.Noun) {\n      return false;\n    } //can't be these things\n\n\n    if (t.tags.Pronoun || t.tags.Comma || t.tags.Possessive) {\n      return false;\n    } //must be one of these\n\n\n    if (t.tags.Organization || t.tags.Acronym || t.tags.Place || t.titleCase()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const tagOrgs = function (terms, world) {\n    for (let i = 0; i < terms.length; i += 1) {\n      let t = terms[i];\n\n      if (orgWords[t.clean] !== undefined && orgWords.hasOwnProperty(t.clean) === true) {\n        // look-backward - eg. 'Toronto University'\n        let lastTerm = terms[i - 1];\n\n        if (lastTerm !== undefined && maybeOrg(lastTerm) === true) {\n          lastTerm.tagSafe('Organization', 'org-word-1', world);\n          t.tagSafe('Organization', 'org-word-2', world);\n          continue;\n        } //look-forward - eg. University of Toronto\n\n\n        let nextTerm = terms[i + 1];\n\n        if (nextTerm !== undefined && nextTerm.clean === 'of') {\n          if (terms[i + 2] && maybeOrg(terms[i + 2])) {\n            t.tagSafe('Organization', 'org-of-word-1', world);\n            nextTerm.tagSafe('Organization', 'org-of-word-2', world);\n            terms[i + 2].tagSafe('Organization', 'org-of-word-3', world);\n            continue;\n          }\n        }\n      }\n    }\n  };\n\n  var _05Organizations = tagOrgs;\n\n  const oneLetterAcronym = /^[A-Z]('s|,)?$/;\n  const periodSeperated = /([A-Z]\\.){2}[A-Z]?/i;\n  const oneLetterWord = {\n    I: true,\n    A: true\n  };\n\n  const isAcronym = function (term, world) {\n    let str = term.reduced; // a known acronym like fbi\n\n    if (term.tags.Acronym) {\n      return true;\n    } // if (term.tags.Adverb || term.tags.Verb || term.tags.Value || term.tags.Plural) {\n    //   return false\n    // }\n    // known-words, like 'PIZZA' is not an acronym.\n\n\n    if (world.words[str]) {\n      return false;\n    } // long capitalized words are not usually either\n\n\n    if (str.length > 5) {\n      return false;\n    }\n\n    return term.isAcronym();\n  }; // F.B.I., NBC, - but not 'NO COLLUSION'\n\n\n  const checkAcronym = function (terms, world) {\n    terms.forEach(term => {\n      //these are not acronyms\n      if (term.tags.RomanNumeral === true) {\n        return;\n      } //period-ones F.D.B.\n\n\n      if (periodSeperated.test(term.text) === true) {\n        term.tag('Acronym', 'period-acronym', world);\n      } //non-period ones are harder\n\n\n      if (term.isUpperCase() && isAcronym(term, world)) {\n        term.tag('Acronym', 'acronym-step', world);\n        term.tag('Noun', 'acronym-infer', world);\n      } else if (!oneLetterWord.hasOwnProperty(term.text) && oneLetterAcronym.test(term.text)) {\n        term.tag('Acronym', 'one-letter-acronym', world);\n        term.tag('Noun', 'one-letter-infer', world);\n      } //if it's a organization,\n\n\n      if (term.tags.Organization && term.text.length <= 3) {\n        term.tag('Acronym', 'acronym-org', world);\n      }\n\n      if (term.tags.Organization && term.isUpperCase() && term.text.length <= 6) {\n        term.tag('Acronym', 'acronym-org-case', world);\n      }\n    });\n  };\n\n  var _06Acronyms = checkAcronym;\n\n  const step = {\n    neighbours: _01Neighbours,\n    case: _02Case,\n    stem: _03Stem,\n    plural: _04Plurals,\n    organizations: _05Organizations,\n    acronyms: _06Acronyms\n  }; //\n\n  const fallbacks$1 = function (doc, terms) {\n    let world = doc.world; // if it's empty, consult it's neighbours, first\n\n    step.neighbours(terms, world); // is there a case-sensitive clue?\n\n    step.case(doc); // check 'rewatch' as 'watch'\n\n    step.stem(terms, world); // ... fallback to a noun!\n\n    terms.forEach(t => {\n      if (t.isKnown() === false) {\n        t.tag('Noun', 'noun-fallback', doc.world);\n      }\n    }); // turn 'Foo University' into an Org\n\n    step.organizations(terms, world); //turn 'FBD' into an acronym\n\n    step.acronyms(terms, world); //are the nouns singular or plural?\n\n    terms.forEach(t => {\n      step.plural(t, doc.world);\n    });\n    return doc;\n  };\n\n  var _02Fallbacks = fallbacks$1;\n\n  const hasNegative = /n't$/;\n  const irregulars$2 = {\n    \"won't\": ['will', 'not'],\n    wont: ['will', 'not'],\n    \"can't\": ['can', 'not'],\n    cant: ['can', 'not'],\n    cannot: ['can', 'not'],\n    \"shan't\": ['should', 'not'],\n    dont: ['do', 'not'],\n    dun: ['do', 'not'] // \"ain't\" is ambiguous for is/was\n\n  }; // either 'is not' or 'are not'\n\n  const doAint = function (term, phrase) {\n    let terms = phrase.terms();\n    let index = terms.indexOf(term);\n    let before = terms.slice(0, index); //look for the preceding noun\n\n    let noun = before.find(t => {\n      return t.tags.Noun;\n    });\n\n    if (noun && noun.tags.Plural) {\n      return ['are', 'not'];\n    }\n\n    return ['is', 'not'];\n  };\n\n  const checkNegative$1 = function (term, phrase) {\n    //check named-ones\n    if (irregulars$2.hasOwnProperty(term.clean) === true) {\n      return irregulars$2[term.clean];\n    } //this word needs it's own logic:\n\n\n    if (term.clean === `ain't` || term.clean === 'aint') {\n      return doAint(term, phrase);\n    } //try it normally\n\n\n    if (hasNegative.test(term.clean) === true) {\n      let main = term.clean.replace(hasNegative, '');\n      return [main, 'not'];\n    }\n\n    return null;\n  };\n\n  var _01Negative = checkNegative$1;\n\n  const contraction$1 = /([a-z\\u00C0-\\u00FF]+)[\\u0027\\u0060\\u00B4\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035\\u2039\\u203A]([a-z]{1,2})$/i; //these ones don't seem to be ambiguous\n\n  const easy = {\n    ll: 'will',\n    ve: 'have',\n    re: 'are',\n    m: 'am',\n    \"n't\": 'not'\n  }; //\n\n  const checkApostrophe$1 = function (term) {\n    let parts = term.text.match(contraction$1);\n\n    if (parts === null) {\n      return null;\n    }\n\n    if (easy.hasOwnProperty(parts[2])) {\n      return [parts[1], easy[parts[2]]];\n    }\n\n    return null;\n  };\n\n  var _02Simple = checkApostrophe$1;\n\n  const irregulars$1 = {\n    wanna: ['want', 'to'],\n    gonna: ['going', 'to'],\n    im: ['i', 'am'],\n    alot: ['a', 'lot'],\n    ive: ['i', 'have'],\n    imma: ['I', 'will'],\n    \"where'd\": ['where', 'did'],\n    whered: ['where', 'did'],\n    \"when'd\": ['when', 'did'],\n    whend: ['when', 'did'],\n    // \"how'd\": ['how', 'did'], //'how would?'\n    // \"what'd\": ['what', 'did'], //'what would?'\n    howd: ['how', 'did'],\n    whatd: ['what', 'did'],\n    // \"let's\": ['let', 'us'], //too weird\n    //multiple word contractions\n    dunno: ['do', 'not', 'know'],\n    brb: ['be', 'right', 'back'],\n    gtg: ['got', 'to', 'go'],\n    irl: ['in', 'real', 'life'],\n    tbh: ['to', 'be', 'honest'],\n    imo: ['in', 'my', 'opinion'],\n    til: ['today', 'i', 'learned'],\n    rn: ['right', 'now'],\n    twas: ['it', 'was'],\n    '@': ['at']\n  }; //\n\n  const checkIrregulars$1 = function (term) {\n    //check white-list\n    if (irregulars$1.hasOwnProperty(term.clean)) {\n      return irregulars$1[term.clean];\n    }\n\n    return null;\n  };\n\n  var _03Irregulars = checkIrregulars$1;\n\n  const hasApostropheS = /([a-z\\u00C0-\\u00FF]+)[\\u0027\\u0060\\u00B4\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035\\u2039\\u203A]s$/i;\n  const banList = {\n    that: true,\n    there: true\n  };\n  const hereThere = {\n    here: true,\n    there: true,\n    everywhere: true\n  };\n\n  const isPossessive = (term, pool) => {\n    // if we already know it\n    if (term.tags.Possessive) {\n      return true;\n    } //a pronoun can't be possessive - \"he's house\"\n\n\n    if (term.tags.Pronoun || term.tags.QuestionWord) {\n      return false;\n    }\n\n    if (banList.hasOwnProperty(term.reduced)) {\n      return false;\n    } //if end of sentence, it is possessive - \"was spencer's\"\n\n\n    let nextTerm = pool.get(term.next);\n\n    if (!nextTerm) {\n      return true;\n    } //a gerund suggests 'is walking'\n\n\n    if (nextTerm.tags.Verb) {\n      //fix 'jamie's bite'\n      if (nextTerm.tags.Infinitive) {\n        return true;\n      } //fix 'spencer's runs'\n\n\n      if (nextTerm.tags.PresentTense) {\n        return true;\n      }\n\n      return false;\n    } //spencer's house\n\n\n    if (nextTerm.tags.Noun) {\n      // 'spencer's here'\n      if (hereThere.hasOwnProperty(nextTerm.reduced) === true) {\n        return false;\n      }\n\n      return true;\n    } //rocket's red glare\n\n\n    let twoTerm = pool.get(nextTerm.next);\n\n    if (twoTerm && twoTerm.tags.Noun && !twoTerm.tags.Pronoun) {\n      return true;\n    } //othwerwise, an adjective suggests 'is good'\n\n\n    if (nextTerm.tags.Adjective || nextTerm.tags.Adverb || nextTerm.tags.Verb) {\n      return false;\n    }\n\n    return false;\n  };\n\n  const isHas = (term, phrase) => {\n    let terms = phrase.terms();\n    let index = terms.indexOf(term);\n    let after = terms.slice(index + 1, index + 3); //look for a past-tense verb\n\n    return after.find(t => {\n      return t.tags.PastTense;\n    });\n  };\n\n  const checkPossessive$1 = function (term, phrase, world) {\n    //the rest of 's\n    let found = term.text.match(hasApostropheS);\n\n    if (found !== null) {\n      //spencer's thing vs spencer-is\n      if (isPossessive(term, phrase.pool) === true) {\n        term.tag('#Possessive', 'isPossessive', world);\n        return null;\n      } //'spencer is'\n\n\n      if (found !== null) {\n        if (isHas(term, phrase)) {\n          return [found[1], 'has'];\n        }\n\n        return [found[1], 'is'];\n      }\n    }\n\n    return null;\n  };\n\n  var _04Possessive = checkPossessive$1;\n\n  const hasPerfect = /[a-z\\u00C0-\\u00FF]'d$/;\n  const useDid = {\n    how: true,\n    what: true\n  };\n  /** split `i'd` into 'i had',  or 'i would'  */\n\n  const checkPerfect$1 = function (term, phrase) {\n    if (hasPerfect.test(term.clean)) {\n      let root = term.clean.replace(/'d$/, ''); //look at the next few words\n\n      let terms = phrase.terms();\n      let index = terms.indexOf(term);\n      let after = terms.slice(index + 1, index + 4); //is it before a past-tense verb? - 'i'd walked'\n\n      for (let i = 0; i < after.length; i++) {\n        let t = after[i];\n\n        if (t.tags.Verb) {\n          if (t.tags.PastTense) {\n            return [root, 'had'];\n          } //what'd you see\n\n\n          if (useDid[root] === true) {\n            return [root, 'did'];\n          }\n\n          return [root, 'would'];\n        }\n      } //otherwise, 'i'd walk'\n\n\n      return [root, 'would'];\n    }\n\n    return null;\n  };\n\n  var _05PerfectTense = checkPerfect$1;\n\n  const isRange = /^([0-9.]{1,3}[a-z]{0,2}) ?[-–—] ?([0-9]{1,3}[a-z]{0,2})$/i;\n  const timeRange = /^([0-9][0-9]?(:[0-9][0-9])?(am|pm)?) ?[-–—] ?([0-9][0-9]?(:[0-9][0-9])?(am|pm)?)$/i; //split '2-4' into '2 to 4'\n\n  const checkRange$1 = function (term) {\n    if (term.tags.PhoneNumber === true) {\n      return null;\n    }\n\n    let parts = term.text.match(isRange);\n\n    if (parts !== null) {\n      return [parts[1], 'to', parts[2]];\n    } else {\n      parts = term.text.match(timeRange);\n\n      if (parts !== null) {\n        return [parts[1], 'to', parts[4]];\n      }\n    }\n\n    return null;\n  };\n\n  var _06Ranges = checkRange$1;\n\n  const contraction = /^(l|c|d|j|m|n|qu|s|t)[\\u0027\\u0060\\u00B4\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035\\u2039\\u203A]([a-z\\u00C0-\\u00FF]+)$/i; // basic support for ungendered french contractions\n  // not perfect, but better than nothing, to support matching on french text.\n\n  const french = {\n    l: 'le',\n    // l'amour\n    c: 'ce',\n    // c'est\n    d: 'de',\n    // d'amerique\n    j: 'je',\n    // j'aime\n    m: 'me',\n    // m'appelle\n    n: 'ne',\n    // n'est\n    qu: 'que',\n    // qu'il\n    s: 'se',\n    // s'appelle\n    t: 'tu' // t'aime\n\n  };\n\n  const checkFrench$1 = function (term) {\n    let parts = term.text.match(contraction);\n\n    if (parts === null || french.hasOwnProperty(parts[1]) === false) {\n      return null;\n    }\n\n    let arr = [french[parts[1]], parts[2]];\n\n    if (arr[0] && arr[1]) {\n      return arr;\n    }\n\n    return null;\n  };\n\n  var _07French = checkFrench$1;\n\n  const checkLexicon = _01Lexicon;\n  const tokenize$2 = _01Tokenizer;\n  const checkNegative = _01Negative;\n  const checkApostrophe = _02Simple;\n  const checkIrregulars = _03Irregulars;\n  const checkPossessive = _04Possessive;\n  const checkPerfect = _05PerfectTense;\n  const checkRange = _06Ranges;\n  const checkFrench = _07French;\n  const isNumber = /^[0-9]+$/;\n  const isOrdinal = /^[0-9]+(st|nd|rd|th)$/;\n  const isTime = /^[0-9:]+(am|pm)?$/;\n\n  const createPhrase = function (found, doc) {\n    //create phrase from ['would', 'not']\n    let phrase = tokenize$2(found.join(' '), doc.world, doc.pool())[0]; //tag it\n\n    let terms = phrase.terms();\n    checkLexicon(terms, doc.world);\n    let term = terms[0]; // tag number-ranges\n\n    if (isOrdinal.test(term.text) && terms[2]) {\n      terms[0].tag('Ordinal', 'ord-range', doc.world);\n      terms[2].tag('Ordinal', 'ord-range', doc.world);\n    } else if (isNumber.test(term.text) && terms[2]) {\n      terms[0].tag('Cardinal', 'num-range', doc.world);\n      terms[2].tag('Cardinal', 'num-range', doc.world);\n    } else if (isTime.test(term.text) && terms[1] && terms[2]) {\n      terms[0].tag('Time', 'time-range', doc.world);\n      terms[1].tag('Date', 'time-range', doc.world);\n      terms[2].tag('Time', 'time-range', doc.world);\n    } //make these terms implicit\n\n\n    terms.forEach(t => {\n      t.implicit = t.text;\n      t.text = '';\n      t.clean = ''; // remove whitespace for implicit terms\n\n      t.pre = '';\n      t.post = '';\n\n      if (Object.keys(t.tags).length === 0) {\n        t.tags.Noun = true; // if no tag, give it a noun\n      }\n    });\n    return phrase;\n  };\n\n  const contractions$1 = function (doc) {\n    let world = doc.world;\n    doc.list.forEach(p => {\n      let terms = p.terms();\n\n      for (let i = 0; i < terms.length; i += 1) {\n        let term = terms[i];\n        let found = checkNegative(term, p);\n        found = found || checkApostrophe(term);\n        found = found || checkIrregulars(term);\n        found = found || checkPossessive(term, p, world);\n        found = found || checkPerfect(term, p);\n        found = found || checkRange(term);\n        found = found || checkFrench(term); //add them in\n\n        if (found !== null) {\n          let newPhrase = createPhrase(found, doc); // keep tag NumberRange, if we had it\n\n          if (p.has('#NumberRange') === true) {\n            doc.buildFrom([newPhrase]).tag('NumberRange');\n          } //set text as contraction\n\n\n          let firstTerm = newPhrase.terms(0);\n          firstTerm.text = term.text; //grab sub-phrase to remove\n\n          let match = p.buildFrom(term.id, 1, doc.pool());\n          match.replace(newPhrase, doc, true);\n        }\n      }\n    });\n    return doc;\n  };\n\n  var _03Contractions = contractions$1;\n\n  const hasWord = function (doc, word) {\n    let arr = doc._cache.words[word] || [];\n    arr = arr.map(i => doc.list[i]);\n    return doc.buildFrom(arr);\n  };\n\n  const hasTag = function (doc, tag) {\n    let arr = doc._cache.tags[tag] || [];\n    arr = arr.map(i => doc.list[i]);\n    return doc.buildFrom(arr);\n  }; //mostly pos-corections here\n\n\n  const miscCorrection = function (doc) {\n    // imperative-form\n    let m = hasTag(doc, 'Infinitive');\n\n    if (m.found) {\n      // you eat?\n      m = m.ifNo('@hasQuestionMark'); // i speak\n\n      m = m.ifNo('(i|we|they)'); // shut the door!\n\n      m.not('will be').match('[#Infinitive] (#Determiner|#Possessive) #Noun').notIf('(our|their)').match('#Infinitive').tag('Imperative', 'shut-the'); // go-fast\n\n      m.match('^[#Infinitive] #Adverb?$', 0).tag('Imperative', 'go-fast'); // do not go\n\n      m.match('[(do && #Infinitive)] not? #Verb', 0).tag('Imperative', 'do-not'); // do it\n\n      m.match('[#Infinitive] (it|some) (#Comparative|#Preposition|please|now|again)', 0).tag('Imperative', 'do-it');\n    } //exactly like\n\n\n    m = hasWord(doc, 'like');\n    m.match('#Adverb like').notIf('(really|generally|typically|usually|sometimes|often|just) [like]').tag('Adverb', 'adverb-like'); //the orange.\n\n    m = hasTag(doc, 'Adjective');\n    m.match('#Determiner #Adjective$').notIf('(#Comparative|#Superlative)').terms(1).tag('Noun', 'the-adj-1'); // Firstname x (dangerous)\n\n    m = hasTag(doc, 'FirstName');\n    m.match('#FirstName (#Noun|@titleCase)').ifNo('^#Possessive').ifNo('(#Pronoun|#Plural)').ifNo('@hasComma .').lastTerm().tag('#LastName', 'firstname-noun'); //three trains / one train\n\n    m = hasTag(doc, 'Value');\n    m = m.match('#Value #PresentTense').ifNo('#Copula');\n\n    if (m.found) {\n      if (m.has('(one|1)') === true) {\n        m.terms(1).tag('Singular', 'one-presentTense');\n      } else {\n        m.terms(1).tag('Plural', 'value-presentTense');\n      }\n    } // well i've been...\n\n\n    doc.match('^(well|so|okay)').tag('Expression', 'well-'); // 10th of a second\n\n    doc.match('#Value [of a second]', 0).unTag('Value', 'of-a-second'); // 30 seconds\n\n    doc.match('#Value [seconds]', 0).unTag('Value', '30-seconds').tag(['Unit', 'Plural']); //been walking\n\n    m = hasTag(doc, 'Gerund');\n    m.match(`(be|been) (#Adverb|not)+? #Gerund`).not('#Verb$').tag('Auxiliary', 'be-walking'); // directive verb - 'use reverse'\n\n    doc.match('(try|use|attempt|build|make) #Verb').ifNo('(@hasComma|#Negative|#PhrasalVerb|#Copula|will|be)').lastTerm().tag('#Noun', 'do-verb'); //possessives\n    //'her match' vs 'let her match'\n\n    m = hasTag(doc, 'Possessive');\n    m = m.match('#Possessive [#Infinitive]', 0);\n\n    if (!m.lookBehind('(let|made|make|force|ask)').found) {\n      m.tag('Noun', 'her-match');\n    }\n\n    return doc;\n  };\n\n  var fixMisc$1 = miscCorrection;\n\n  const unique$2 = function (arr) {\n    let obj = {};\n\n    for (let i = 0; i < arr.length; i++) {\n      obj[arr[i]] = true;\n    }\n\n    return Object.keys(obj);\n  };\n\n  var _unique = unique$2;\n\n  const list$5 = [// ==== Mutliple tags ====\n  {\n    match: 'too much',\n    tag: 'Adverb Adjective',\n    reason: 'bit-4'\n  }, // u r cool\n  {\n    match: 'u r',\n    tag: 'Pronoun Copula',\n    reason: 'u r'\n  }, //sometimes adverbs - 'pretty good','well above'\n  {\n    match: '#Copula (pretty|dead|full|well|sure) (#Adjective|#Noun)',\n    tag: '#Copula #Adverb #Adjective',\n    reason: 'sometimes-adverb'\n  }, //i better ..\n  {\n    match: '(#Pronoun|#Person) (had|#Adverb)? [better] #PresentTense',\n    group: 0,\n    tag: 'Modal',\n    reason: 'i-better'\n  }, //walking is cool\n  {\n    match: '[#Gerund] #Adverb? not? #Copula',\n    group: 0,\n    tag: 'Activity',\n    reason: 'gerund-copula'\n  }, //walking should be fun\n  {\n    match: '[#Gerund] #Modal',\n    group: 0,\n    tag: 'Activity',\n    reason: 'gerund-modal'\n  }, //swear-words as non-expression POS\n  {\n    match: 'holy (shit|fuck|hell)',\n    tag: 'Expression',\n    reason: 'swears-expression'\n  }, //Aircraft designer\n  {\n    match: '#Noun #Actor',\n    tag: 'Actor',\n    reason: 'thing-doer'\n  }, {\n    match: '#Conjunction [u]',\n    group: 0,\n    tag: 'Pronoun',\n    reason: 'u-pronoun-2'\n  }, //'u' as pronoun\n  {\n    match: '[u] #Verb',\n    group: 0,\n    tag: 'Pronoun',\n    reason: 'u-pronoun-1'\n  }, // ==== Determiners ====\n  {\n    match: '#Noun [(who|whom)]',\n    group: 0,\n    tag: 'Determiner',\n    reason: 'captain-who'\n  }, //that car goes\n  // { match: 'that #Noun [#PresentTense]', group: 0, tag: 'Determiner', reason: 'that-determiner' },\n  {\n    match: 'a bit much',\n    tag: 'Determiner Adverb Adjective',\n    reason: 'bit-3'\n  }, // ==== Propositions ====\n  //all students\n  {\n    match: '#Verb #Adverb? #Noun [(that|which)]',\n    group: 0,\n    tag: 'Preposition',\n    reason: 'that-prep'\n  }, //work, which has been done.\n  {\n    match: '@hasComma [which] (#Pronoun|#Verb)',\n    group: 0,\n    tag: 'Preposition',\n    reason: 'which-copula'\n  }, {\n    match: '#Copula just [like]',\n    group: 0,\n    tag: 'Preposition',\n    reason: 'like-preposition'\n  }, //folks like her\n  {\n    match: '#Noun [like] #Noun',\n    group: 0,\n    tag: 'Preposition',\n    reason: 'noun-like'\n  }, //fix for busted-up phrasalVerbs\n  // { match: '#Noun [#Particle]', group: 0, tag: 'Preposition', reason: 'repair-noPhrasal' },\n  // ==== Conditions ====\n  // had he survived,\n  {\n    match: '[had] #Noun+ #PastTense',\n    group: 0,\n    tag: 'Condition',\n    reason: 'had-he'\n  }, // were he to survive\n  {\n    match: '[were] #Noun+ to #Infinitive',\n    group: 0,\n    tag: 'Condition',\n    reason: 'were-he'\n  }, // ==== Questions ====\n  //the word 'how'\n  {\n    match: '^how',\n    tag: 'QuestionWord',\n    reason: 'how-question'\n  }, {\n    match: '[how] (#Determiner|#Copula|#Modal|#PastTense)',\n    group: 0,\n    tag: 'QuestionWord',\n    reason: 'how-is'\n  }, // //the word 'which'\n  {\n    match: '^which',\n    tag: 'QuestionWord',\n    reason: 'which-question'\n  }, // { match: '[which] . (#Noun)+ #Pronoun', group: 0, tag: 'QuestionWord', reason: 'which-question2' },\n  // { match: 'which', tag: 'QuestionWord', reason: 'which-question3' },\n  // ==== Conjunctions ====\n  {\n    match: '[so] #Noun',\n    group: 0,\n    tag: 'Conjunction',\n    reason: 'so-conj'\n  }, //how he is driving\n  {\n    match: '[(who|what|where|why|how|when)] #Noun #Copula #Adverb? (#Verb|#Adjective)',\n    group: 0,\n    tag: 'Conjunction',\n    reason: 'how-he-is-x'\n  } // {\n  //   match: '[(who|what|where|why|how|when)] #Noun #Adverb? #Infinitive not? #Gerund',\n  //   group: 0,\n  //   tag: 'Conjunction',\n  //   reason: 'when-i-go-fishing',\n  // },\n  ];\n  var _01Misc = list$5;\n\n  var _ambig = {\n    // adverbs than can be adjectives\n    adverbAdjective: ['dark', 'bright', 'flat', 'light', 'soft', 'pale', 'dead', 'dim', 'faux', 'little', 'wee', 'sheer', 'most', 'near', 'good', 'extra', 'all'],\n    // names that are dates\n    personDate: ['april', 'june', 'may', 'jan', 'august', 'eve'],\n    // names that may be months\n    personMonth: ['january', 'april', 'may', 'june', 'jan', 'sep'],\n    // names that are adjectives\n    personAdjective: ['misty', 'rusty', 'dusty', 'rich', 'randy', 'young'],\n    // names that are verbs\n    personVerb: ['pat', 'wade', 'ollie', 'will', 'rob', 'buck', 'bob', 'mark', 'jack'],\n    // names that are verbs\n    personPlace: ['darwin', 'hamilton', 'paris', 'alexandria', 'houston', 'kobe', 'santiago', 'salvador', 'sydney', 'victoria'],\n    // names that are nouns\n    personNoun: ['art', 'baker', 'berg', 'bill', 'brown', 'charity', 'chin', 'christian', 'cliff', 'daisy', 'dawn', 'dick', 'dolly', 'faith', 'franco', 'gene', 'green', 'hall', 'hill', 'holly', 'hope', 'jean', 'jewel', 'joy', 'kelvin', 'king', 'kitty', 'lane', 'lily', 'melody', 'mercedes', 'miles', 'olive', 'penny', 'ray', 'reed', 'robin', 'rod', 'rose', 'sky', 'summer', 'trinity', 'van', 'viola', 'violet', 'wang', 'white']\n  };\n\n  const ambig$4 = _ambig;\n  const dates = `(${ambig$4.personDate.join('|')})`;\n  let list$4 = [// ==== Holiday ====\n  {\n    match: '#Holiday (day|eve)',\n    tag: 'Holiday',\n    reason: 'holiday-day'\n  }, // the captain who\n  // ==== WeekDay ====\n  // sun the 5th\n  {\n    match: '[sun] the #Ordinal',\n    tag: 'WeekDay',\n    reason: 'sun-the-5th'\n  }, //sun feb 2\n  {\n    match: '[sun] #Date',\n    group: 0,\n    tag: 'WeekDay',\n    reason: 'sun-feb'\n  }, //1pm next sun\n  {\n    match: '#Date (on|this|next|last|during)? [sun]',\n    group: 0,\n    tag: 'WeekDay',\n    reason: '1pm-sun'\n  }, //this sat\n  {\n    match: `(in|by|before|during|on|until|after|of|within|all) [sat]`,\n    group: 0,\n    tag: 'WeekDay',\n    reason: 'sat'\n  }, {\n    match: `(in|by|before|during|on|until|after|of|within|all) [wed]`,\n    group: 0,\n    tag: 'WeekDay',\n    reason: 'wed'\n  }, {\n    match: `(in|by|before|during|on|until|after|of|within|all) [march]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'march'\n  }, //sat november\n  {\n    match: '[sat] #Date',\n    group: 0,\n    tag: 'WeekDay',\n    reason: 'sat-feb'\n  }, // ==== Month ====\n  //all march\n  {\n    match: `#Preposition [(march|may)]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'in-month'\n  }, //this march\n  {\n    match: `this [(march|may)]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'this-month'\n  }, {\n    match: `next [(march|may)]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'this-month'\n  }, {\n    match: `last [(march|may)]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'this-month'\n  }, // march 5th\n  {\n    match: `[(march|may)] the? #Value`,\n    group: 0,\n    tag: 'Month',\n    reason: 'march-5th'\n  }, // 5th of march\n  {\n    match: `#Value of? [(march|may)]`,\n    group: 0,\n    tag: 'Month',\n    reason: '5th-of-march'\n  }, // march and feb\n  {\n    match: `[(march|may)] .? #Date`,\n    group: 0,\n    tag: 'Month',\n    reason: 'march-and-feb'\n  }, // feb to march\n  {\n    match: `#Date .? [(march|may)]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'feb-and-march'\n  }, //quickly march\n  {\n    match: `#Adverb [(march|may)]`,\n    group: 0,\n    tag: 'Verb',\n    reason: 'quickly-march'\n  }, //march quickly\n  {\n    match: `[(march|may)] #Adverb`,\n    group: 0,\n    tag: 'Verb',\n    reason: 'march-quickly'\n  }, //5th of March\n  {\n    match: '#Value of #Month',\n    tag: 'Date',\n    reason: 'value-of-month'\n  }, //5 March\n  {\n    match: '#Cardinal #Month',\n    tag: 'Date',\n    reason: 'cardinal-month'\n  }, //march 5 to 7\n  {\n    match: '#Month #Value to #Value',\n    tag: 'Date',\n    reason: 'value-to-value'\n  }, //march the 12th\n  {\n    match: '#Month the #Value',\n    tag: 'Date',\n    reason: 'month-the-value'\n  }, //june 7\n  {\n    match: '(#WeekDay|#Month) #Value',\n    tag: 'Date',\n    reason: 'date-value'\n  }, //7 june\n  {\n    match: '#Value (#WeekDay|#Month)',\n    tag: 'Date',\n    reason: 'value-date'\n  }, //may twenty five\n  {\n    match: '(#TextValue && #Date) #TextValue',\n    tag: 'Date',\n    reason: 'textvalue-date'\n  }, // in june\n  {\n    match: `in [${dates}]`,\n    group: 0,\n    tag: 'Date',\n    reason: 'in-june'\n  }, {\n    match: `during [${dates}]`,\n    group: 0,\n    tag: 'Date',\n    reason: 'in-june'\n  }, {\n    match: `on [${dates}]`,\n    group: 0,\n    tag: 'Date',\n    reason: 'in-june'\n  }, {\n    match: `by [${dates}]`,\n    group: 0,\n    tag: 'Date',\n    reason: 'by-june'\n  }, {\n    match: `after [${dates}]`,\n    group: 0,\n    tag: 'Date',\n    reason: 'after-june'\n  }, {\n    match: `#Date [${dates}]`,\n    group: 0,\n    tag: 'Date',\n    reason: 'in-june'\n  }, // june 1992\n  {\n    match: `${dates} #Value`,\n    tag: 'Date',\n    reason: 'june-5th'\n  }, {\n    match: `${dates} #Date`,\n    tag: 'Date',\n    reason: 'june-5th'\n  }, // June Smith\n  {\n    match: `${dates} #ProperNoun`,\n    tag: 'Person',\n    reason: 'june-smith',\n    safe: true\n  }, // june m. Cooper\n  {\n    match: `${dates} #Acronym? (#ProperNoun && !#Month)`,\n    tag: 'Person',\n    reason: 'june-smith-jr'\n  }, // 'second'\n  {\n    match: `#Cardinal [second]`,\n    tag: 'Unit',\n    reason: 'one-second'\n  }, // second quarter\n  // { match: `#Ordinal quarter`, tag: 'Date', reason: 'second-quarter' },\n  // 'aug 20-21'\n  {\n    match: `#Month #NumberRange`,\n    tag: 'Date',\n    reason: 'aug 20-21'\n  }, // timezones\n  // china standard time\n  {\n    match: `(#Place|#Demonmym|#Time) (standard|daylight|central|mountain)? time`,\n    tag: 'Timezone',\n    reason: 'std-time'\n  }, // eastern time\n  {\n    match: `(eastern|mountain|pacific|central|atlantic) (standard|daylight|summer)? time`,\n    tag: 'Timezone',\n    reason: 'eastern-time'\n  }, // 5pm central\n  {\n    match: `#Time [(eastern|mountain|pacific|central|est|pst|gmt)]`,\n    group: 0,\n    tag: 'Timezone',\n    reason: '5pm-central'\n  }, // central european time\n  {\n    match: `(central|western|eastern) european time`,\n    tag: 'Timezone',\n    reason: 'cet'\n  }];\n  var _02Dates = list$4;\n\n  const ambig$3 = _ambig;\n  const adjectives$1 = `(${ambig$3.personAdjective.join('|')})`;\n  let list$3 = [// all fell apart\n  {\n    match: '[all] #Determiner? #Noun',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'all-noun'\n  }, // very rusty\n  {\n    match: `#Adverb [${adjectives$1}]`,\n    group: 0,\n    tag: 'Adjective',\n    reason: 'really-rich'\n  }, // rusty smith\n  {\n    match: `${adjectives$1} #Person`,\n    tag: 'Person',\n    reason: 'randy-smith'\n  }, // rusty a. smith\n  {\n    match: `${adjectives$1} #Acronym? #ProperNoun`,\n    tag: 'Person',\n    reason: 'rusty-smith'\n  }, //sometimes not-adverbs\n  {\n    match: '#Copula [(just|alone)]$',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'not-adverb'\n  }, //jack is guarded\n  {\n    match: '#Singular is #Adverb? [#PastTense$]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'is-filled'\n  }, // smoked poutine is\n  {\n    match: '[#PastTense] #Singular is',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'smoked-poutine'\n  }, // baked onions are\n  {\n    match: '[#PastTense] #Plural are',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'baked-onions'\n  }, // well made\n  {\n    match: 'well [#PastTense]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'well-made'\n  }, // is f*ed up\n  {\n    match: '#Copula [fucked up?]',\n    tag: 'Adjective',\n    reason: 'swears-adjective'\n  }, //jack seems guarded\n  {\n    match: '#Singular (seems|appears) #Adverb? [#PastTense$]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'seems-filled'\n  }, // Gerund-Adjectives - 'amusing, annoying'\n  //a staggering cost\n  {\n    match: '(a|an) [#Gerund]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'a|an'\n  }, //as amusing as\n  {\n    match: 'as [#Gerund] as',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'as-gerund-as'\n  }, // more amusing than\n  {\n    match: 'more [#Gerund] than',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'more-gerund-than'\n  }, // very amusing\n  {\n    match: '(so|very|extremely) [#Gerund]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'so-gerund'\n  }, // it was amusing\n  {\n    match: '(it|he|she|everything|something) #Adverb? was #Adverb? [#Gerund]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'it-was-gerund'\n  }, // found it amusing\n  {\n    match: '(found|found) it #Adverb? [#Gerund]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'found-it-gerund'\n  }, // a bit amusing\n  {\n    match: 'a (little|bit|wee) bit? [#Gerund]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'a-bit-gerund'\n  }, // jury is out - preposition ➔ adjective\n  {\n    match: '#Copula #Adjective? [(out|in|through)]$',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'still-out'\n  }, // shut the door\n  {\n    match: '^[#Adjective] (the|your) #Noun',\n    group: 0,\n    tag: 'Infinitive',\n    reason: 'shut-the'\n  }, // the said card\n  {\n    match: 'the [said] #Noun',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'the-said-card'\n  }, // a myth that uncovered wounds heal\n  {\n    match: '#Noun (that|which|whose) [#PastTense && !#Copula] #Noun',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'that-past-noun'\n  } // the very fed character\n  // { match: `#Determiner #Adverb [#PastTense] #Noun`, group: 0, tag: 'Adjective', reason: 'very-x-noun' },\n  ];\n  var _03Adjective = list$3;\n\n  var _04Noun = [// ==== Plural ====\n  //there are reasons\n  {\n    match: 'there (are|were) #Adjective? [#PresentTense]',\n    group: 0,\n    tag: 'Plural',\n    reason: 'there-are'\n  }, // ==== Singular ====\n  //the sun\n  {\n    match: '#Determiner [sun]',\n    group: 0,\n    tag: 'Singular',\n    reason: 'the-sun'\n  }, //did a 900, paid a 20\n  {\n    match: '#Verb (a|an) [#Value]',\n    group: 0,\n    tag: 'Singular',\n    reason: 'did-a-value'\n  }, //'the can'\n  {\n    match: 'the [(can|will|may)]',\n    group: 0,\n    tag: 'Singular',\n    reason: 'the can'\n  }, // ==== Possessive ====\n  //spencer kelly's\n  {\n    match: '#FirstName #Acronym? (#Possessive && #LastName)',\n    tag: 'Possessive',\n    reason: 'name-poss'\n  }, //Super Corp's fundraiser\n  {\n    match: '#Organization+ #Possessive',\n    tag: 'Possessive',\n    reason: 'org-possessive'\n  }, //Los Angeles's fundraiser\n  {\n    match: '#Place+ #Possessive',\n    tag: 'Possessive',\n    reason: 'place-possessive'\n  }, // assign all tasks\n  {\n    match: '(#Verb && !#Modal) (all|every|each|most|some|no) [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'all-presentTense'\n  }, //the above is clear\n  {\n    match: '#Determiner [#Adjective] #Copula',\n    group: 0,\n    tag: 'Noun',\n    reason: 'the-adj-is'\n  }, //real evil is\n  {\n    match: '#Adjective [#Adjective] #Copula',\n    group: 0,\n    tag: 'Noun',\n    reason: 'adj-adj-is'\n  }, // PresentTense/Noun ambiguities\n  // big dreams, critical thinking\n  // have big dreams\n  {\n    match: '(had|have|#PastTense) #Adjective [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'adj-presentTense'\n  }, // excellent answer spencer\n  {\n    match: '^#Adjective [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'start adj-presentTense'\n  }, // one big reason\n  {\n    match: '#Value #Adjective [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'one-big-reason'\n  }, // won widespread support\n  {\n    match: '#PastTense #Adjective+ [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'won-wide-support'\n  }, // many poses\n  {\n    match: '(many|few|several|couple) [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'many-poses'\n  }, // very big dreams\n  {\n    match: '#Adverb #Adjective [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'very-big-dream'\n  }, // good wait staff\n  {\n    match: '#Adjective [#Infinitive] #Noun',\n    group: 0,\n    tag: 'Noun',\n    reason: 'good-wait-staff'\n  }, // adorable little store\n  {\n    match: '#Adjective #Adjective [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'adorable-little-store'\n  }, // of basic training\n  {\n    match: '#Preposition #Adjective [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'of-basic-training'\n  }, // early warning\n  {\n    match: '#Adjective [#Gerund]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'early-warning'\n  }, // justifiying higher costs\n  {\n    match: '#Gerund #Adverb? #Comparative [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'higher-costs'\n  }, // do the dance\n  {\n    match: '#Infinitive (this|that|the) [#Infinitive]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'do-this-dance'\n  }, //his fine\n  {\n    match: '(his|her|its) [#Adjective]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'his-fine'\n  }, //some pressing issues\n  {\n    match: 'some [#Verb] #Plural',\n    group: 0,\n    tag: 'Noun',\n    reason: 'determiner6'\n  }, //'more' is not always an adverb\n  {\n    match: 'more #Noun',\n    tag: 'Noun',\n    reason: 'more-noun'\n  }, {\n    match: '(#Noun && @hasComma) #Noun (and|or) [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'noun-list'\n  }, //3 feet\n  {\n    match: '(right|rights) of .',\n    tag: 'Noun',\n    reason: 'right-of'\n  }, // a bit\n  {\n    match: 'a [bit]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'bit-2'\n  }, // my first thought\n  {\n    match: '#Possessive #Ordinal [#PastTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'first-thought'\n  }, //running-a-show\n  {\n    match: '#Gerund #Determiner [#Infinitive]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'running-a-show'\n  }, //the-only-reason\n  {\n    match: '#Determiner #Adverb [#Infinitive]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'the-reason'\n  }, //the nice swim\n  {\n    match: '(the|this|those|these) #Adjective [#Verb]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'the-adj-verb'\n  }, // the truly nice swim\n  {\n    match: '(the|this|those|these) #Adverb #Adjective [#Verb]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'determiner4'\n  }, //the orange is\n  {\n    match: '#Determiner [#Adjective] (#Copula|#PastTense|#Auxiliary)',\n    group: 0,\n    tag: 'Noun',\n    reason: 'the-adj-2'\n  }, // a stream runs\n  {\n    match: '(the|this|a|an) [#Infinitive] #Adverb? #Verb',\n    group: 0,\n    tag: 'Noun',\n    reason: 'determiner5'\n  }, //the test string\n  {\n    match: '#Determiner [#Infinitive] #Noun',\n    group: 0,\n    tag: 'Noun',\n    reason: 'determiner7'\n  }, //a nice deal\n  {\n    match: '#Determiner #Adjective #Adjective? [#Infinitive]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'a-nice-inf'\n  }, //the wait to vote\n  {\n    match: 'the [#Verb] #Preposition .',\n    group: 0,\n    tag: 'Noun',\n    reason: 'determiner1'\n  }, //a sense of\n  {\n    match: '#Determiner [#Verb] of',\n    group: 0,\n    tag: 'Noun',\n    reason: 'the-verb-of'\n  }, //next career move\n  {\n    match: '#Adjective #Noun+ [#Infinitive] #Copula',\n    group: 0,\n    tag: 'Noun',\n    reason: 'career-move'\n  }, //the threat of force\n  {\n    match: '#Determiner #Noun of [#Verb]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'noun-of-noun'\n  }, //the western line\n  {\n    match: '#Determiner [(western|eastern|northern|southern|central)] #Noun',\n    group: 0,\n    tag: 'Noun',\n    reason: 'western-line'\n  }, //her polling\n  {\n    match: '#Possessive [#Gerund]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'her-polling'\n  }, //her fines\n  {\n    match: '(his|her|its) [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'its-polling'\n  }, //linear algebra\n  {\n    match: '(#Determiner|#Value) [(linear|binary|mobile|lexical|technical|computer|scientific|formal)] #Noun',\n    group: 0,\n    tag: 'Noun',\n    reason: 'technical-noun'\n  }, // a blown motor\n  {\n    match: '(the|those|these|a|an) [#Participle] #Noun',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'blown-motor'\n  }, // walk the walk\n  {\n    match: '(the|those|these|a|an) #Adjective? [#Infinitive]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'det-inf'\n  }, {\n    match: '(the|those|these|a|an) #Adjective? [#PresentTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'det-pres'\n  }, {\n    match: '(the|those|these|a|an) #Adjective? [#PastTense]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'det-past'\n  }, // this swimming\n  {\n    match: '(this|that) [#Gerund]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'this-gerund'\n  }, // at some point\n  {\n    match: 'at some [#Infinitive]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'at-some-inf'\n  }, //air-flow\n  {\n    match: '(#Noun && @hasHyphen) #Verb',\n    tag: 'Noun',\n    reason: 'hyphen-verb'\n  }, //is no walk\n  {\n    match: 'is no [#Verb]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'is-no-verb'\n  }, //different views than\n  {\n    match: '[#Verb] than',\n    group: 0,\n    tag: 'Noun',\n    reason: 'correction'\n  }, // goes to sleep\n  {\n    match: '(go|goes|went) to [#Infinitive]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'goes-to-verb'\n  }, //a close watch on\n  {\n    match: '(a|an) #Noun [#Infinitive] (#Preposition|#Noun)',\n    group: 0,\n    tag: 'Noun',\n    reason: 'a-noun-inf'\n  }, //a tv show\n  {\n    match: '(a|an) #Noun [#Infinitive]$',\n    group: 0,\n    tag: 'Noun',\n    reason: 'a-noun-inf2'\n  }, //do so\n  {\n    match: 'do [so]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'so-noun'\n  }, //is mark hughes\n  {\n    match: '#Copula [#Infinitive] #Noun',\n    group: 0,\n    tag: 'Noun',\n    reason: 'is-pres-noun'\n  }, //a close\n  {\n    match: '#Determiner #Adverb? [close]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'a-close'\n  }, // what the hell\n  {\n    match: '#Determiner [(shit|damn|hell)]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'swears-noun'\n  }, // the staff were\n  {\n    match: '(the|these) [#Singular] (were|are)',\n    group: 0,\n    tag: 'Plural',\n    reason: 'singular-were'\n  }, // running for congress\n  {\n    match: '#Gerund #Adjective? for [#Infinitive]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'running-for'\n  }, // running to work\n  {\n    match: '#Gerund #Adjective to [#Infinitive]',\n    group: 0,\n    tag: 'Noun',\n    reason: 'running-to'\n  }, // any questions for\n  {\n    match: '(many|any|some|several) [#PresentTense] for',\n    group: 0,\n    tag: 'Noun',\n    reason: 'any-verbs-for'\n  }, // have fun\n  {\n    match: `(have|had) [#Adjective] #Preposition .`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'have-fun'\n  }, // co-founder\n  {\n    match: `co #Noun`,\n    tag: 'Actor',\n    reason: 'co-noun'\n  }, // to facilitate gas exchange with\n  {\n    match: `to #PresentTense #Noun [#PresentTense] #Preposition`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'gas-exchange'\n  }, // a comdominium, or simply condo\n  {\n    match: `a #Noun+ or #Adverb+? [#Verb]`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'noun-or-noun'\n  }, // operating system\n  {\n    match: `[#Gerund] system`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'operating-system'\n  }, // waited until release\n  {\n    match: `#PastTense (until|as|through|without) [#PresentTense]`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'waited-until-release'\n  }, // selling like hot cakes\n  {\n    match: `#Gerund like #Adjective? [#PresentTense]`,\n    group: 0,\n    tag: 'Plural',\n    reason: 'like-hot-cakes'\n  }, // some valid reason\n  {\n    match: `some #Adjective [#PresentTense]`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'some-reason'\n  }, // for some reason\n  {\n    match: `for some [#PresentTense]`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'for-some-reason'\n  }, // same kind of shouts\n  {\n    match: `(same|some|the|that|a) kind of [#PresentTense]`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'some-kind-of'\n  }, // a type of shout\n  {\n    match: `(same|some|the|that|a) type of [#PresentTense]`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'some-type-of'\n  }, // doing better for fights\n  {\n    match: `#Gerund #Adjective #Preposition [#PresentTense]`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'doing-better-for-x'\n  }, // get better aim\n  {\n    match: `(get|got|have|had) #Comparative [#PresentTense]`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'got-better-aim'\n  }, // i think tipping sucks\n  {\n    match: `#Pronoun #Infinitive [#Gerund] #PresentTense`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'tipping-sucks'\n  } // in various sensory functions\n  // {\n  //   match: `#Preposition #Determiner #Singular [#PresentTense]`,\n  //   group: 0,\n  //   tag: 'Noun',\n  //   reason: 'various-word-functions',\n  // },\n  ];\n\n  const ambig$2 = _ambig;\n  const adjectives = `(${ambig$2.adverbAdjective.join('|')})`;\n  var _05Adverb = [//still good\n  {\n    match: '[still] #Adjective',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'still-advb'\n  }, //still make\n  {\n    match: '[still] #Verb',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'still-verb'\n  }, // so hot\n  {\n    match: '[so] #Adjective',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'so-adv'\n  }, // way hotter\n  {\n    match: '[way] #Comparative',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'way-adj'\n  }, // way too hot\n  {\n    match: '[way] #Adverb #Adjective',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'way-too-adj'\n  }, // all singing\n  {\n    match: '[all] #Verb',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'all-verb'\n  }, // sing like an angel\n  {\n    match: '(#Verb && !#Modal) [like]',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'verb-like'\n  }, //barely even walk\n  {\n    match: '(barely|hardly) even',\n    tag: 'Adverb',\n    reason: 'barely-even'\n  }, //even held\n  {\n    match: '[even] #Verb',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'even-walk'\n  }, // even left\n  {\n    match: 'even left',\n    tag: '#Adverb #Verb',\n    reason: 'even-left'\n  }, //cheering hard - dropped -ly's\n  {\n    match: '(#PresentTense && !#Copula) [(hard|quick|long|bright|slow|fast|backwards|forwards)]',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'lazy-ly'\n  }, // much appreciated\n  {\n    match: '[much] #Adjective',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'bit-1'\n  }, // is well\n  {\n    match: '#Copula [#Adverb]$',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'is-well'\n  }, // a bit cold\n  {\n    match: 'a [(little|bit|wee) bit?] #Adjective',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'a-bit-cold'\n  }, // dark green\n  {\n    match: `[${adjectives}] #Adjective`,\n    group: 0,\n    tag: 'Adverb',\n    reason: 'dark-green'\n  }, // kinda sparkly\n  {\n    match: `#Adverb [#Adverb]$`,\n    group: 0,\n    tag: 'Adjective',\n    reason: 'kinda-sparkly'\n  }, {\n    match: `#Adverb [#Adverb] (and|or|then)`,\n    group: 0,\n    tag: 'Adjective',\n    reason: 'kinda-sparkly-and'\n  }, // super strong\n  {\n    match: `[super] #Adjective #Noun`,\n    group: 0,\n    tag: 'Adverb',\n    reason: 'super-strong'\n  }];\n\n  var _06Value = [// ==== PhoneNumber ====\n  //1 800 ...\n  {\n    match: '1 #Value #PhoneNumber',\n    tag: 'PhoneNumber',\n    reason: '1-800-Value'\n  }, //(454) 232-9873\n  {\n    match: '#NumericValue #PhoneNumber',\n    tag: 'PhoneNumber',\n    reason: '(800) PhoneNumber'\n  }, // ==== Currency ====\n  // chinese yuan\n  {\n    match: '#Demonym #Currency',\n    tag: 'Currency',\n    reason: 'demonym-currency'\n  }, // ==== Ordinal ====\n  {\n    match: '[second] #Noun',\n    group: 0,\n    tag: 'Ordinal',\n    reason: 'second-noun'\n  }, // ==== Unit ====\n  //5 yan\n  {\n    match: '#Value+ [#Currency]',\n    group: 0,\n    tag: 'Unit',\n    reason: '5-yan'\n  }, {\n    match: '#Value [(foot|feet)]',\n    group: 0,\n    tag: 'Unit',\n    reason: 'foot-unit'\n  }, //minus 7\n  {\n    match: '(minus|negative) #Value',\n    tag: 'Value',\n    reason: 'minus-value'\n  }, //5 kg.\n  {\n    match: '#Value [#Abbreviation]',\n    group: 0,\n    tag: 'Unit',\n    reason: 'value-abbr'\n  }, {\n    match: '#Value [k]',\n    group: 0,\n    tag: 'Unit',\n    reason: 'value-k'\n  }, {\n    match: '#Unit an hour',\n    tag: 'Unit',\n    reason: 'unit-an-hour'\n  }, //seven point five\n  {\n    match: '#Value (point|decimal) #Value',\n    tag: 'Value',\n    reason: 'value-point-value'\n  }, // ten bucks\n  {\n    match: '(#Value|a) [(buck|bucks|grand)]',\n    group: 0,\n    tag: 'Currency',\n    reason: 'value-bucks'\n  }, //quarter million\n  {\n    match: '#Determiner [(half|quarter)] #Ordinal',\n    group: 0,\n    tag: 'Value',\n    reason: 'half-ordinal'\n  }, {\n    match: 'a #Value',\n    tag: 'Value',\n    reason: 'a-value'\n  }, // ==== Money ====\n  {\n    match: '[#Value+] #Currency',\n    group: 0,\n    tag: 'Money',\n    reason: '15 usd'\n  }, // thousand and two\n  {\n    match: `(hundred|thousand|million|billion|trillion|quadrillion)+ and #Value`,\n    tag: 'Value',\n    reason: 'magnitude-and-value'\n  }, //'a/an' can mean 1 - \"a hour\"\n  {\n    match: '!once [(a|an)] (#Duration|hundred|thousand|million|billion|trillion)',\n    group: 0,\n    tag: 'Value',\n    reason: 'a-is-one'\n  }];\n\n  const ambig$1 = _ambig;\n  const verbs = `(${ambig$1.personVerb.join('|')})`;\n  let list$2 = [// adj -> gerund\n  // amusing his aunt\n  {\n    match: '[#Adjective] #Possessive #Noun',\n    group: 0,\n    tag: 'Verb',\n    reason: 'gerund-his-noun'\n  }, // loving you\n  {\n    match: '[#Adjective] (us|you)',\n    group: 0,\n    tag: 'Gerund',\n    reason: 'loving-you'\n  }, // slowly stunning\n  {\n    match: '(slowly|quickly) [#Adjective]',\n    group: 0,\n    tag: 'Gerund',\n    reason: 'slowly-adj'\n  }, // like\n  {\n    match: '(#Modal|i|they|we|do) not? [like]',\n    group: 0,\n    tag: 'PresentTense',\n    reason: 'modal-like'\n  }, // do not simply like\n  {\n    match: 'do (simply|just|really|not)+ [(#Adjective|like)]',\n    group: 0,\n    tag: 'Verb',\n    reason: 'do-simply-like'\n  }, // does mean\n  {\n    match: 'does (#Adverb|not)? [#Adjective]',\n    group: 0,\n    tag: 'PresentTense',\n    reason: 'does-mean'\n  }, // i mean\n  {\n    match: 'i (#Adverb|do)? not? [mean]',\n    group: 0,\n    tag: 'PresentTense',\n    reason: 'i-mean'\n  }, // { match: '!are (i|you|we) (#Adverb|do)? [#Adjective]', group: 0, tag: 'PresentTense', reason: 'i-mean' },\n  // ==== Tense ====\n  //he left\n  {\n    match: '#Noun #Adverb? [left]',\n    group: 0,\n    tag: 'PastTense',\n    reason: 'left-verb'\n  }, //this rocks\n  {\n    match: '(this|that) [#Plural]',\n    group: 0,\n    tag: 'PresentTense',\n    reason: 'this-verbs'\n  }, // ==== Auxiliary ====\n  //was walking\n  {\n    match: `[#Copula (#Adverb|not)+?] (#Gerund|#PastTense)`,\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'copula-walking'\n  }, //support a splattering of auxillaries before a verb\n  {\n    match: `[(has|had) (#Adverb|not)+?] #PastTense`,\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'had-walked'\n  }, //would walk\n  {\n    match: `#Adverb+? [(#Modal|did)+ (#Adverb|not)+?] #Verb`,\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'modal-verb'\n  }, //would have had\n  {\n    match: `[#Modal (#Adverb|not)+? have (#Adverb|not)+? had (#Adverb|not)+?] #Verb`,\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'would-have'\n  }, //would be walking\n  // { match: `#Modal (#Adverb|not)+? be (#Adverb|not)+? #Verb`, group: 0, tag: 'Auxiliary', reason: 'would-be' },\n  //had been walking\n  // {\n  //   match: `(#Modal|had|has) (#Adverb|not)+? been (#Adverb|not)+? #Verb`,\n  //   group: 0,\n  //   tag: 'Auxiliary',\n  //   reason: 'had-been',\n  // },\n  //support a splattering of auxillaries before a verb\n  {\n    match: `[(has|had) (#Adverb|not)+?] #PastTense`,\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'had-walked'\n  }, // will walk\n  {\n    match: '[(do|does|will|have|had)] (not|#Adverb)+? #Verb',\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'have-had'\n  }, // about to go\n  {\n    match: '[about to] #Adverb? #Verb',\n    group: 0,\n    tag: ['Auxiliary', 'Verb'],\n    reason: 'about-to'\n  }, //would be walking\n  {\n    match: `#Modal (#Adverb|not)+? be (#Adverb|not)+? #Verb`,\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'would-be'\n  }, //were being run\n  {\n    match: `(were|was) being [#PresentTense]`,\n    group: 0,\n    tag: 'PastTense',\n    reason: 'was-being'\n  }, //have run\n  // { match: `have #PresentTense`, group: 0, tag: 'PastTense', reason: 'have-vb' },\n  //would have had\n  {\n    match: `[#Modal (#Adverb|not)+? have (#Adverb|not)+? had (#Adverb|not)+?] #Verb`,\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'would-have'\n  }, //had been walking\n  {\n    match: `(#Modal|had|has) (#Adverb|not)+? been (#Adverb|not)+? #Verb`,\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'had-been'\n  }, // was being driven\n  {\n    match: '[(be|being|been)] #Participle',\n    group: 0,\n    tag: 'Auxiliary',\n    reason: 'being-foo'\n  }, // ==== Phrasal ====\n  //'foo-up'\n  {\n    match: '(#Verb && @hasHyphen) up',\n    tag: 'PhrasalVerb',\n    reason: 'foo-up'\n  }, {\n    match: '(#Verb && @hasHyphen) off',\n    tag: 'PhrasalVerb',\n    reason: 'foo-off'\n  }, {\n    match: '(#Verb && @hasHyphen) over',\n    tag: 'PhrasalVerb',\n    reason: 'foo-over'\n  }, {\n    match: '(#Verb && @hasHyphen) out',\n    tag: 'PhrasalVerb',\n    reason: 'foo-out'\n  }, //fall over\n  {\n    match: '#PhrasalVerb [#PhrasalVerb]',\n    group: 0,\n    tag: 'Particle',\n    reason: 'phrasal-particle'\n  }, // went on for\n  {\n    match: '(lived|went|crept|go) [on] for',\n    group: 0,\n    tag: 'PhrasalVerb',\n    reason: 'went-on'\n  }, //back it up\n  {\n    match: '#Verb (him|her|it|us|himself|herself|itself|everything|something) [(up|down)]',\n    group: 0,\n    tag: 'Adverb',\n    reason: 'phrasal-pronoun-advb'\n  }, // ==== Copula ====\n  //will be running (not copula)\n  {\n    match: '[will #Adverb? not? #Adverb? be] #Gerund',\n    group: 0,\n    tag: 'Copula',\n    reason: 'will-be-copula'\n  }, //for more complex forms, just tag 'be'\n  {\n    match: 'will #Adverb? not? #Adverb? [be] #Adjective',\n    group: 0,\n    tag: 'Copula',\n    reason: 'be-copula'\n  }, // ==== Infinitive ====\n  //march to\n  {\n    match: '[march] (up|down|back|to|toward)',\n    group: 0,\n    tag: 'Infinitive',\n    reason: 'march-to'\n  }, //must march\n  {\n    match: '#Modal [march]',\n    group: 0,\n    tag: 'Infinitive',\n    reason: 'must-march'\n  }, //let him glue\n  {\n    match: '(let|make|made) (him|her|it|#Person|#Place|#Organization)+ [#Singular] (a|an|the|it)',\n    group: 0,\n    tag: 'Infinitive',\n    reason: 'let-him-glue'\n  }, //he quickly foo\n  // { match: '#Noun #Adverb [#Noun]', group: 0, tag: 'Verb', reason: 'quickly-foo' },\n  //will secure our\n  {\n    match: 'will [#Adjective]',\n    group: 0,\n    tag: 'Verb',\n    reason: 'will-adj'\n  }, //he disguised the thing\n  {\n    match: '#Pronoun [#Adjective] #Determiner #Adjective? #Noun',\n    group: 0,\n    tag: 'Verb',\n    reason: 'he-adj-the'\n  }, //is eager to go\n  {\n    match: '#Copula [#Adjective] to #Verb',\n    group: 0,\n    tag: 'Verb',\n    reason: 'adj-to'\n  }, // open the door\n  {\n    match: '[open] #Determiner',\n    group: 0,\n    tag: 'Infinitive',\n    reason: 'open-the'\n  }, // compromises are possible\n  {\n    match: '[#PresentTense] (are|were|was) #Adjective',\n    group: 0,\n    tag: 'Plural',\n    reason: 'compromises-are-possible'\n  }, // would wade\n  {\n    match: `#Modal [${verbs}]`,\n    group: 0,\n    tag: 'Verb',\n    reason: 'would-mark'\n  }, {\n    match: `#Adverb [${verbs}]`,\n    group: 0,\n    tag: 'Verb',\n    reason: 'really-mark'\n  }, //to mark\n  {\n    match: '(to|#Modal) [mark]',\n    group: 0,\n    tag: 'PresentTense',\n    reason: 'to-mark'\n  }, // checkmate is\n  {\n    match: '^[#Infinitive] (is|was)',\n    group: 0,\n    tag: 'Noun',\n    reason: 'checkmate-is'\n  }, // wade smith\n  {\n    match: `${verbs} #Person`,\n    tag: 'Person',\n    reason: 'rob-smith'\n  }, // wade m. Cooper\n  {\n    match: `${verbs} #Acronym #ProperNoun`,\n    tag: 'Person',\n    reason: 'rob-a-smith'\n  }, // damn them\n  {\n    match: '[shit] (#Determiner|#Possessive|them)',\n    group: 0,\n    tag: 'Verb',\n    reason: 'swear1-verb'\n  }, {\n    match: '[damn] (#Determiner|#Possessive|them)',\n    group: 0,\n    tag: 'Verb',\n    reason: 'swear2-verb'\n  }, {\n    match: '[fuck] (#Determiner|#Possessive|them)',\n    group: 0,\n    tag: 'Verb',\n    reason: 'swear3-verb'\n  }, // become overly weakened\n  {\n    match: '(become|fall|grow) #Adverb? [#PastTense]',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'overly-weakened'\n  }, // a completely beaten man\n  {\n    match: '(a|an) #Adverb [#Participle] #Noun',\n    group: 0,\n    tag: 'Adjective',\n    reason: 'completely-beaten'\n  }, // whose name was\n  {\n    match: 'whose [#PresentTense] #Copula',\n    group: 0,\n    tag: 'Noun',\n    reason: 'whos-name-was'\n  }, // give up on reason\n  {\n    match: `#PhrasalVerb #PhrasalVerb #Preposition [#PresentTense]`,\n    group: 0,\n    tag: 'Noun',\n    reason: 'given-up-on-x'\n  } // wants to be #Particle\n  ];\n  var _07Verbs = list$2;\n\n  let list$1 = [// ==== Region ====\n  //West Norforlk\n  {\n    match: '(west|north|south|east|western|northern|southern|eastern)+ #Place',\n    tag: 'Region',\n    reason: 'west-norfolk'\n  }, //some us-state acronyms (exlude: al, in, la, mo, hi, me, md, ok..)\n  {\n    match: '#City [(al|ak|az|ar|ca|ct|dc|fl|ga|id|il|nv|nh|nj|ny|oh|pa|sc|tn|tx|ut|vt|pr)]',\n    group: 0,\n    tag: 'Region',\n    reason: 'us-state'\n  }, // portland oregon\n  {\n    match: 'portland [or]',\n    group: 0,\n    tag: 'Region',\n    reason: 'portland-or'\n  }, //Foo District\n  {\n    match: '#ProperNoun+ (district|region|province|county|prefecture|municipality|territory|burough|reservation)',\n    tag: 'Region',\n    reason: 'foo-district'\n  }, //District of Foo\n  {\n    match: '(district|region|province|municipality|territory|burough|state) of #ProperNoun',\n    tag: 'Region',\n    reason: 'district-of-Foo'\n  }, // in Foo California\n  {\n    match: 'in [#ProperNoun] #Place',\n    group: 0,\n    tag: 'Place',\n    reason: 'propernoun-place'\n  }, // ==== Address ====\n  {\n    match: '#Value #Noun (st|street|rd|road|crescent|cr|way|tr|terrace|avenue|ave)',\n    tag: 'Address',\n    reason: 'address-st'\n  } // in houston\n  // { match: `in [${places}]`, group: 0, tag: 'Place', reason: 'in-paris' },\n  // { match: `near [${places}]`, group: 0, tag: 'Place', reason: 'near-paris' },\n  // { match: `at [${places}]`, group: 0, tag: 'Place', reason: 'at-paris' },\n  // { match: `from [${places}]`, group: 0, tag: 'Place', reason: 'from-paris' },\n  // { match: `to [${places}]`, group: 0, tag: 'Place', reason: 'to-paris' },\n  // { match: `#Place [${places}]`, group: 0, tag: 'Place', reason: 'tokyo-paris' },\n  // // houston texas\n  // { match: `[${places}] #Place`, group: 0, tag: 'Place', reason: 'paris-france' },\n  ];\n  var _08Place = list$1;\n\n  var _09Org = [//John & Joe's\n  {\n    match: '#Noun (&|n) #Noun',\n    tag: 'Organization',\n    reason: 'Noun-&-Noun'\n  }, // teachers union of Ontario\n  {\n    match: '#Organization of the? #ProperNoun',\n    tag: 'Organization',\n    reason: 'org-of-place',\n    safe: true\n  }, //walmart USA\n  {\n    match: '#Organization #Country',\n    tag: 'Organization',\n    reason: 'org-country'\n  }, //organization\n  {\n    match: '#ProperNoun #Organization',\n    tag: 'Organization',\n    reason: 'titlecase-org'\n  }, //FitBit Inc\n  {\n    match: '#ProperNoun (ltd|co|inc|dept|assn|bros)',\n    tag: 'Organization',\n    reason: 'org-abbrv'\n  }, // the OCED\n  {\n    match: 'the [#Acronym]',\n    group: 0,\n    tag: 'Organization',\n    reason: 'the-acronym',\n    safe: true\n  }, // global trade union\n  {\n    match: '(world|global|international|national|#Demonym) #Organization',\n    tag: 'Organization',\n    reason: 'global-org'\n  }, // schools\n  {\n    match: '#Noun+ (public|private) school',\n    tag: 'School',\n    reason: 'noun-public-school'\n  }];\n\n  const ambig = _ambig;\n  const nouns = `(${ambig.personNoun.join('|')})`;\n  const months = `(${ambig.personMonth.join('|')})`;\n  const places = `(${ambig.personPlace.join('|')})`;\n  let list = [// ==== Honorific ====\n  {\n    match: '[(1st|2nd|first|second)] #Honorific',\n    group: 0,\n    tag: 'Honorific',\n    reason: 'ordinal-honorific'\n  }, {\n    match: '[(private|general|major|corporal|lord|lady|secretary|premier)] #Honorific? #Person',\n    group: 0,\n    tag: 'Honorific',\n    reason: 'ambg-honorifics'\n  }, // ==== FirstNames ====\n  //is foo Smith\n  {\n    match: '#Copula [(#Noun|#PresentTense)] #LastName',\n    group: 0,\n    tag: 'FirstName',\n    reason: 'copula-noun-lastname'\n  }, //pope francis\n  {\n    match: '(lady|queen|sister) #ProperNoun',\n    tag: 'FemaleName',\n    reason: 'lady-titlecase',\n    safe: true\n  }, {\n    match: '(king|pope|father) #ProperNoun',\n    tag: 'MaleName',\n    reason: 'pope-titlecase',\n    safe: true\n  }, //ambiguous-but-common firstnames\n  {\n    match: '[(will|may|april|june|said|rob|wade|ray|rusty|drew|miles|jack|chuck|randy|jan|pat|cliff|bill)] #LastName',\n    group: 0,\n    tag: 'FirstName',\n    reason: 'maybe-lastname'\n  }, // ==== Nickname ====\n  // Dwayne 'the rock' Johnson\n  {\n    match: '#FirstName [#Determiner #Noun] #LastName',\n    group: 0,\n    tag: 'NickName',\n    reason: 'first-noun-last'\n  }, //my buddy\n  {\n    match: '#Possessive [#FirstName]',\n    group: 0,\n    tag: 'Person',\n    reason: 'possessive-name'\n  }, {\n    match: '#ProperNoun (b|c|d|e|f|g|h|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z) #ProperNoun',\n    tag: 'Person',\n    reason: 'titlecase-acronym-titlecase',\n    safe: true\n  }, //ludwig van beethovan\n  {\n    match: '#Acronym #LastName',\n    tag: 'Person',\n    reason: 'acronym-latname',\n    safe: true\n  }, //jk rowling\n  {\n    match: '#Person (jr|sr|md)',\n    tag: 'Person',\n    reason: 'person-honorific'\n  }, //peter II\n  {\n    match: '#Person #Person the? #RomanNumeral',\n    tag: 'Person',\n    reason: 'roman-numeral'\n  }, //'Professor Fink', 'General McCarthy'\n  {\n    match: '#FirstName [/^[^aiurck]$/]',\n    group: 0,\n    tag: ['Acronym', 'Person'],\n    reason: 'john-e'\n  }, //Doctor john smith jr\n  //general pearson\n  {\n    match: '#Honorific #Person',\n    tag: 'Person',\n    reason: 'honorific-person'\n  }, //remove single 'mr'\n  {\n    match: '#Honorific #Acronym',\n    tag: 'Person',\n    reason: 'Honorific-TitleCase'\n  }, //j.k Rowling\n  {\n    match: '#Noun van der? #Noun',\n    tag: 'Person',\n    reason: 'van der noun',\n    safe: true\n  }, //king of spain\n  {\n    match: '(king|queen|prince|saint|lady) of #Noun',\n    tag: 'Person',\n    reason: 'king-of-noun',\n    safe: true\n  }, //lady Florence\n  {\n    match: '(prince|lady) #Place',\n    tag: 'Person',\n    reason: 'lady-place'\n  }, //saint Foo\n  {\n    match: '(king|queen|prince|saint) #ProperNoun',\n    tag: 'Person',\n    reason: 'saint-foo'\n  }, //Foo U Ford\n  {\n    match: '[#ProperNoun] #Person',\n    group: 0,\n    tag: 'Person',\n    reason: 'proper-person',\n    safe: true\n  }, // al sharpton\n  {\n    match: 'al (#Person|#ProperNoun)',\n    tag: 'Person',\n    reason: 'al-borlen',\n    safe: true\n  }, //ferdinand de almar\n  {\n    match: '#FirstName de #Noun',\n    tag: 'Person',\n    reason: 'bill-de-noun'\n  }, //Osama bin Laden\n  {\n    match: '#FirstName (bin|al) #Noun',\n    tag: 'Person',\n    reason: 'bill-al-noun'\n  }, //John L. Foo\n  {\n    match: '#FirstName #Acronym #ProperNoun',\n    tag: 'Person',\n    reason: 'bill-acronym-title'\n  }, //Andrew Lloyd Webber\n  {\n    match: '#FirstName #FirstName #ProperNoun',\n    tag: 'Person',\n    reason: 'bill-firstname-title'\n  }, //Mr Foo\n  {\n    match: '#Honorific #FirstName? #ProperNoun',\n    tag: 'Person',\n    reason: 'dr-john-Title'\n  }, //peter the great\n  {\n    match: '#FirstName the #Adjective',\n    tag: 'Person',\n    reason: 'name-the-great'\n  }, //very common-but-ambiguous lastnames\n  {\n    match: '#FirstName (green|white|brown|hall|young|king|hill|cook|gray|price)',\n    tag: 'Person',\n    reason: 'bill-green'\n  }, // faith smith\n  {\n    match: `${nouns} #Person`,\n    tag: 'Person',\n    reason: 'ray-smith',\n    safe: true\n  }, // faith m. Smith\n  {\n    match: `${nouns} #Acronym? #ProperNoun`,\n    tag: 'Person',\n    reason: 'ray-a-smith',\n    safe: true\n  }, //give to april\n  {\n    match: `#Infinitive #Determiner? #Adjective? #Noun? (to|for) [${months}]`,\n    group: 0,\n    tag: 'Person',\n    reason: 'ambig-person'\n  }, // remind june\n  {\n    match: `#Infinitive [${months}]`,\n    group: 0,\n    tag: 'Person',\n    reason: 'infinitive-person'\n  }, // may waits for\n  // { match: `[${months}] #PresentTense for`, group: 0, tag: 'Person', reason: 'ambig-active-for' },\n  // may waits to\n  // { match: `[${months}] #PresentTense to`, group: 0, tag: 'Person', reason: 'ambig-active-to' },\n  // april will\n  {\n    match: `[${months}] #Modal`,\n    group: 0,\n    tag: 'Person',\n    reason: 'ambig-modal'\n  }, // may be\n  {\n    match: `[may] be`,\n    group: 0,\n    tag: 'Verb',\n    reason: 'may-be'\n  }, // would april\n  {\n    match: `#Modal [${months}]`,\n    group: 0,\n    tag: 'Person',\n    reason: 'modal-ambig'\n  }, // it is may\n  {\n    match: `#Copula [${months}]`,\n    group: 0,\n    tag: 'Person',\n    reason: 'is-may'\n  }, // may is\n  {\n    match: `[${months}] #Copula`,\n    group: 0,\n    tag: 'Person',\n    reason: 'may-is'\n  }, // with april\n  {\n    match: `that [${months}]`,\n    group: 0,\n    tag: 'Person',\n    reason: 'that-month'\n  }, // with april\n  {\n    match: `with [${months}]`,\n    group: 0,\n    tag: 'Person',\n    reason: 'with-month'\n  }, // for april\n  {\n    match: `for [${months}]`,\n    group: 0,\n    tag: 'Person',\n    reason: 'for-month'\n  }, // this april\n  {\n    match: `this [${months}]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'this-may'\n  }, //maybe not 'this'\n  // next april\n  {\n    match: `next [${months}]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'next-may'\n  }, // last april\n  {\n    match: `last [${months}]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'last-may'\n  }, // wednesday april\n  {\n    match: `#Date [${months}]`,\n    group: 0,\n    tag: 'Month',\n    reason: 'date-may'\n  }, // may 5th\n  {\n    match: `[${months}] the? #Value`,\n    group: 0,\n    tag: 'Month',\n    reason: 'may-5th'\n  }, // 5th of may\n  {\n    match: `#Value of [${months}]`,\n    group: 0,\n    tag: 'Month',\n    reason: '5th-of-may'\n  }, // dick van dyke\n  {\n    match: '#ProperNoun (van|al|bin) #ProperNoun',\n    tag: 'Person',\n    reason: 'title-van-title',\n    safe: true\n  }, //jose de Sucre\n  {\n    match: '#ProperNoun (de|du) la? #ProperNoun',\n    tag: 'Person',\n    reason: 'title-de-title',\n    safe: true\n  }, //Jani K. Smith\n  {\n    match: '#Singular #Acronym #LastName',\n    tag: '#Person',\n    reason: 'title-acro-noun',\n    safe: true\n  }, //John Foo\n  {\n    match: '#FirstName (#Noun && #ProperNoun) #ProperNoun?',\n    tag: 'Person',\n    reason: 'firstname-titlecase'\n  }, //Joe K. Sombrero\n  {\n    match: '#FirstName #Acronym #Noun',\n    tag: 'Person',\n    reason: 'n-acro-noun',\n    safe: true\n  }, //Anthony de Marco\n  {\n    match: '#FirstName [(de|di|du|van|von) #Person]',\n    group: 0,\n    tag: 'LastName',\n    reason: 'de-firstname'\n  }, // Paris Berelc\n  {\n    match: `[${places}] (#ProperNoun && !#Place)`,\n    group: 0,\n    tag: 'FirstName',\n    reason: 'place-firstname'\n  }];\n  var _10People = list;\n\n  const parseSyntax = matchSyntax;\n  const unique$1 = _unique;\n  let matches$1 = [];\n  matches$1 = matches$1.concat(_01Misc);\n  matches$1 = matches$1.concat(_02Dates);\n  matches$1 = matches$1.concat(_03Adjective);\n  matches$1 = matches$1.concat(_04Noun);\n  matches$1 = matches$1.concat(_05Adverb);\n  matches$1 = matches$1.concat(_06Value);\n  matches$1 = matches$1.concat(_07Verbs);\n  matches$1 = matches$1.concat(_08Place);\n  matches$1 = matches$1.concat(_09Org);\n  matches$1 = matches$1.concat(_10People); // cache the easier conditions up-front\n\n  const cacheRequired = function (reg) {\n    let needTags = [];\n    let needWords = [];\n    reg.forEach(obj => {\n      if (obj.optional === true || obj.negative === true) {\n        return;\n      }\n\n      if (obj.tag !== undefined) {\n        needTags.push(obj.tag);\n      }\n\n      if (obj.word !== undefined) {\n        needWords.push(obj.word);\n      }\n    });\n    return {\n      tags: unique$1(needTags),\n      words: unique$1(needWords)\n    };\n  }; // for speed, enumerate (a|b|c) to three matches\n\n\n  const allLists = function (m) {\n    let more = [];\n    let lists = m.reg.filter(r => r.fastOr !== undefined);\n\n    if (lists.length === 1) {\n      let i = m.reg.findIndex(r => r.fastOr !== undefined);\n      Object.keys(m.reg[i].fastOr).forEach(w => {\n        let newM = Object.assign({}, m);\n        newM.reg = newM.reg.slice(0);\n        newM.reg[i] = Object.assign({}, newM.reg[i]);\n        newM.reg[i].word = w;\n        delete newM.reg[i].operator;\n        delete newM.reg[i].fastOr; // newM.reason += '-' + w\n\n        more.push(newM);\n      });\n    }\n\n    return more;\n  }; // parse them\n\n\n  let all = [];\n  matches$1.forEach(m => {\n    m.reg = parseSyntax(m.match);\n    let enumerated = allLists(m);\n\n    if (enumerated.length > 0) {\n      all = all.concat(enumerated);\n    } else {\n      all.push(m); // console.log(m)\n    }\n  });\n  all.forEach(m => {\n    m.required = cacheRequired(m.reg);\n    return m;\n  }); // console.log(all.length)\n  // console.log(all[all.length - 1])\n\n  var matches_1 = all;\n\n  const matches = matches_1;\n  const unique = _unique; // return intersection of array-of-arrays\n\n  const hasEvery = function (chances) {\n    if (chances.length === 0) {\n      return [];\n    }\n\n    let obj = {};\n    chances.forEach(arr => {\n      arr = unique(arr);\n\n      for (let i = 0; i < arr.length; i++) {\n        obj[arr[i]] = obj[arr[i]] || 0;\n        obj[arr[i]] += 1;\n      }\n    });\n    let res = Object.keys(obj);\n    res = res.filter(k => obj[k] === chances.length);\n    res = res.map(num => Number(num));\n    return res;\n  };\n\n  const runner$1 = function (doc) {\n    //find phrases to try for each match\n    matches.forEach(m => {\n      let allChances = [];\n      m.required.words.forEach(w => {\n        allChances.push(doc._cache.words[w] || []);\n      });\n      m.required.tags.forEach(tag => {\n        allChances.push(doc._cache.tags[tag] || []);\n      });\n      let worthIt = hasEvery(allChances);\n\n      if (worthIt.length === 0) {\n        return;\n      }\n\n      let phrases = worthIt.map(index => doc.list[index]);\n      let tryDoc = doc.buildFrom(phrases); // phrases getting tagged\n\n      let match = tryDoc.match(m.reg, m.group);\n\n      if (match.found) {\n        if (m.safe === true) {\n          match.tagSafe(m.tag, m.reason);\n        } else {\n          match.tag(m.tag, m.reason);\n        }\n      }\n    });\n  };\n\n  var runner_1 = runner$1; // console.log(hasEvery([[1, 2, 2, 3], [2, 3], []]))\n\n  const fixMisc = fixMisc$1;\n  const runner = runner_1; // runner: 250ms\n  // misc: 40ms\n  //sequence of match-tag statements to correct mis-tags\n\n  const corrections$1 = function (doc) {\n    runner(doc);\n    fixMisc(doc);\n    return doc;\n  };\n\n  var _04Correction = corrections$1;\n\n  const init = _01Init;\n  const fallbacks = _02Fallbacks;\n  const contractions = _03Contractions;\n  const corrections = _04Correction;\n  /** POS-tag all terms in this document */\n\n  const tagger$1 = function (doc) {\n    let terms = doc.termList(); // check against any known-words\n\n    doc = init(doc, terms); // everything has gotta be something. ¯\\_(:/)_/¯\n\n    doc = fallbacks(doc, terms); // support \"didn't\" & \"spencer's\"\n\n    doc = contractions(doc); //set our cache, to speed things up\n\n    doc.cache(); // wiggle-around the results, so they make more sense\n\n    doc = corrections(doc); // remove our cache, as it's invalidated now\n\n    doc.uncache(); // run any user-given tagger functions\n\n    doc.world.taggers.forEach(fn => {\n      fn(doc);\n    });\n    return doc;\n  };\n\n  var _02Tagger = tagger$1;\n\n  const addMethod$a = function (Doc) {\n    /**  */\n    class Abbreviations extends Doc {\n      stripPeriods() {\n        this.termList().forEach(t => {\n          if (t.tags.Abbreviation === true && t.next) {\n            t.post = t.post.replace(/^\\./, '');\n          }\n\n          let str = t.text.replace(/\\./, '');\n          t.set(str);\n        });\n        return this;\n      }\n\n      addPeriods() {\n        this.termList().forEach(t => {\n          t.post = t.post.replace(/^\\./, '');\n          t.post = '.' + t.post;\n        });\n        return this;\n      }\n\n    }\n\n    Abbreviations.prototype.unwrap = Abbreviations.prototype.stripPeriods;\n\n    Doc.prototype.abbreviations = function (n) {\n      let match = this.match('#Abbreviation');\n\n      if (typeof n === 'number') {\n        match = match.get(n);\n      }\n\n      return new Abbreviations(match.list, this, this.world);\n    };\n\n    return Doc;\n  };\n\n  var Abbreviations = addMethod$a;\n\n  const hasPeriod = /\\./;\n\n  const addMethod$9 = function (Doc) {\n    /**  */\n    class Acronyms extends Doc {\n      stripPeriods() {\n        this.termList().forEach(t => {\n          let str = t.text.replace(/\\./g, '');\n          t.set(str);\n        });\n        return this;\n      }\n\n      addPeriods() {\n        this.termList().forEach(t => {\n          let str = t.text.replace(/\\./g, '');\n          str = str.split('').join('.'); // don't add a end-period if there's a sentence-end one\n\n          if (hasPeriod.test(t.post) === false) {\n            str += '.';\n          }\n\n          t.set(str);\n        });\n        return this;\n      }\n\n    }\n\n    Acronyms.prototype.unwrap = Acronyms.prototype.stripPeriods;\n    Acronyms.prototype.strip = Acronyms.prototype.stripPeriods;\n\n    Doc.prototype.acronyms = function (n) {\n      let match = this.match('#Acronym');\n\n      if (typeof n === 'number') {\n        match = match.get(n);\n      }\n\n      return new Acronyms(match.list, this, this.world);\n    };\n\n    return Doc;\n  };\n\n  var Acronyms = addMethod$9;\n\n  const addMethod$8 = function (Doc) {\n    /** split into approximate sub-sentence phrases */\n    Doc.prototype.clauses = function (n) {\n      // an awkward way to disambiguate a comma use\n      let commas = this.if('@hasComma').notIf('@hasComma @hasComma') //fun, cool...\n      .notIf('@hasComma . .? (and|or) .') //cool, and fun\n      .notIf('(#City && @hasComma) #Country') //'toronto, canada'\n      .notIf('(#WeekDay && @hasComma) #Date') //'tuesday, march 2nd'\n      .notIf('(#Date && @hasComma) #Year') //'july 6, 1992'\n      .notIf('@hasComma (too|also)$') //at end of sentence\n      .match('@hasComma');\n      let found = this.splitAfter(commas);\n      let quotes = found.quotations();\n      found = found.splitOn(quotes);\n      let parentheses = found.parentheses();\n      found = found.splitOn(parentheses); // it is cool and it is ..\n\n      let conjunctions = found.if('#Copula #Adjective #Conjunction (#Pronoun|#Determiner) #Verb').match('#Conjunction');\n      found = found.splitBefore(conjunctions); // if it is this then that\n\n      let condition = found.if('if .{2,9} then .').match('then');\n      found = found.splitBefore(condition); // misc clause partitions\n\n      found = found.splitBefore('as well as .');\n      found = found.splitBefore('such as .');\n      found = found.splitBefore('in addition to .'); // semicolons, dashes\n\n      found = found.splitAfter('@hasSemicolon');\n      found = found.splitAfter('@hasDash'); // passive voice verb - '.. which was robbed is empty'\n      // let passive = found.match('#Noun (which|that) (was|is) #Adverb? #PastTense #Adverb?')\n      // if (passive.found) {\n      //   found = found.splitAfter(passive)\n      // }\n      // //which the boy robbed\n      // passive = found.match('#Noun (which|that) the? #Noun+ #Adverb? #PastTense #Adverb?')\n      // if (passive.found) {\n      //   found = found.splitAfter(passive)\n      // }\n      // does there appear to have relative/subordinate clause still?\n\n      let tooLong = found.filter(d => d.wordCount() > 5 && d.match('#Verb+').length >= 2);\n\n      if (tooLong.found) {\n        let m = tooLong.splitAfter('#Noun .* #Verb .* #Noun+');\n        found = found.splitOn(m.eq(0));\n      }\n\n      if (typeof n === 'number') {\n        found = found.get(n);\n      }\n\n      return new Doc(found.list, this, this.world);\n    };\n\n    return Doc;\n  };\n\n  var Clauses = addMethod$8;\n\n  const addMethod$7 = function (Doc) {\n    /**  */\n    class Contractions extends Doc {\n      constructor(list, from, world) {\n        super(list, from, world);\n        this.contracted = null;\n      }\n      /** turn didn't into 'did not' */\n\n\n      expand() {\n        this.list.forEach(p => {\n          let terms = p.terms(); //change the case?\n\n          let isTitlecase = terms[0].isTitleCase();\n          terms.forEach((t, i) => {\n            //use the implicit text\n            t.set(t.implicit || t.text);\n            t.implicit = undefined; //add whitespace\n\n            if (i < terms.length - 1 && t.post === '') {\n              t.post += ' ';\n            }\n          }); //set titlecase\n\n          if (isTitlecase) {\n            terms[0].toTitleCase();\n          }\n        });\n        return this;\n      }\n\n    } //find contractable, expanded-contractions\n    // const findExpanded = r => {\n    //   let remain = r.not('#Contraction')\n    //   let m = remain.match('(#Noun|#QuestionWord) (#Copula|did|do|have|had|could|would|will)')\n    //   m.concat(remain.match('(they|we|you|i) have'))\n    //   m.concat(remain.match('i am'))\n    //   m.concat(remain.match('(#Copula|#Modal|do|does|have|has|can|will) not'))\n    //   return m\n    // }\n\n\n    Doc.prototype.contractions = function (n) {\n      //find currently-contracted\n      let found = this.match('@hasContraction+'); //(may want to split these up)\n      //todo: split consecutive contractions\n\n      if (typeof n === 'number') {\n        found = found.get(n);\n      }\n\n      return new Contractions(found.list, this, this.world);\n    }; //aliases\n\n\n    Doc.prototype.expanded = Doc.prototype.isExpanded;\n    Doc.prototype.contracted = Doc.prototype.isContracted;\n    return Doc;\n  };\n\n  var Contractions = addMethod$7;\n\n  const addMethod$6 = function (Doc) {\n    //pull it apart..\n    const parse = function (doc) {\n      let things = doc.splitAfter('@hasComma').splitOn('(and|or) not?').not('(and|or) not?');\n      let beforeLast = doc.match('[.] (and|or)', 0);\n      return {\n        things: things,\n        conjunction: doc.match('(and|or) not?'),\n        beforeLast: beforeLast,\n        hasOxford: beforeLast.has('@hasComma')\n      };\n    };\n    /** cool, fun, and nice */\n\n\n    class Lists extends Doc {\n      /** coordinating conjunction */\n      conjunctions() {\n        return this.match('(and|or)');\n      }\n      /** split-up by list object */\n\n\n      parts() {\n        return this.splitAfter('@hasComma').splitOn('(and|or) not?');\n      }\n      /** remove the conjunction */\n\n\n      items() {\n        return parse(this).things;\n      }\n      /** add a new unit to the list */\n\n\n      add(str) {\n        this.forEach(p => {\n          let beforeLast = parse(p).beforeLast;\n          beforeLast.append(str); //add a comma to it\n\n          beforeLast.termList(0).addPunctuation(',');\n        });\n        return this;\n      }\n      /** remove any matching unit from the list */\n\n\n      remove(match) {\n        return this.items().if(match).remove();\n      }\n      /** return only lists that use a serial comma */\n\n\n      hasOxfordComma() {\n        return this.filter(doc => parse(doc).hasOxford);\n      }\n\n      addOxfordComma() {\n        let items = this.items();\n        let needsComma = items.eq(items.length - 2);\n\n        if (needsComma.found && needsComma.has('@hasComma') === false) {\n          needsComma.post(', ');\n        }\n\n        return this;\n      }\n\n      removeOxfordComma() {\n        let items = this.items();\n        let needsComma = items.eq(items.length - 2);\n\n        if (needsComma.found && needsComma.has('@hasComma') === true) {\n          needsComma.post(' ');\n        }\n\n        return this;\n      }\n\n    } // aliases\n\n\n    Lists.prototype.things = Lists.prototype.items;\n\n    Doc.prototype.lists = function (n) {\n      let m = this.if('@hasComma+ .? (and|or) not? .'); // person-list\n\n      let nounList = m.match('(#Noun|#Adjective|#Determiner|#Article)+ #Conjunction not? (#Article|#Determiner)? #Adjective? #Noun+').if('#Noun');\n      let adjList = m.match('(#Adjective|#Adverb)+ #Conjunction not? #Adverb? #Adjective+');\n      let verbList = m.match('(#Verb|#Adverb)+ #Conjunction not? #Adverb? #Verb+');\n      let result = nounList.concat(adjList);\n      result = result.concat(verbList);\n      result = result.if('@hasComma');\n\n      if (typeof n === 'number') {\n        result = m.get(n);\n      }\n\n      return new Lists(result.list, this, this.world);\n    };\n\n    return Doc;\n  };\n\n  var Lists = addMethod$6;\n\n  const noPlural = '(#Pronoun|#Place|#Value|#Person|#Uncountable|#Month|#WeekDay|#Holiday|#Possessive)'; //certain words can't be plural, like 'peace'\n\n  const hasPlural$1 = function (doc) {\n    if (doc.has('#Plural') === true) {\n      return true;\n    } // these can't be plural\n\n\n    if (doc.has(noPlural) === true) {\n      return false;\n    }\n\n    return true;\n  };\n\n  var hasPlural_1 = hasPlural$1;\n\n  const irregulars = {\n    hour: 'an',\n    heir: 'an',\n    heirloom: 'an',\n    honest: 'an',\n    honour: 'an',\n    honor: 'an',\n    uber: 'an' //german u\n\n  }; //pronounced letters of acronyms that get a 'an'\n\n  const an_acronyms = {\n    a: true,\n    e: true,\n    f: true,\n    h: true,\n    i: true,\n    l: true,\n    m: true,\n    n: true,\n    o: true,\n    r: true,\n    s: true,\n    x: true\n  }; //'a' regexes\n\n  const a_regexs = [/^onc?e/i, //'wu' sound of 'o'\n  /^u[bcfhjkqrstn][aeiou]/i, // 'yu' sound for hard 'u'\n  /^eul/i];\n\n  const makeArticle = function (doc) {\n    //no 'the john smith', but 'a london hotel'\n    if (doc.has('#Person') || doc.has('#Place')) {\n      return '';\n    } //no a/an if it's plural\n\n\n    if (doc.has('#Plural')) {\n      return 'the';\n    }\n\n    let str = doc.text('normal').trim(); //explicit irregular forms\n\n    if (irregulars.hasOwnProperty(str)) {\n      return irregulars[str];\n    } //spelled-out acronyms\n\n\n    let firstLetter = str.substr(0, 1);\n\n    if (doc.has('^@isAcronym') && an_acronyms.hasOwnProperty(firstLetter)) {\n      return 'an';\n    } //'a' regexes\n\n\n    for (let i = 0; i < a_regexs.length; i++) {\n      if (a_regexs[i].test(str)) {\n        return 'a';\n      }\n    } //basic vowel-startings\n\n\n    if (/^[aeiou]/i.test(str)) {\n      return 'an';\n    }\n\n    return 'a';\n  };\n\n  var getArticle$1 = makeArticle;\n\n  const isPlural$7 = [/(antenn|formul|nebul|vertebr|vit)ae$/i, /(octop|vir|radi|nucle|fung|cact|stimul)i$/i, /men$/i, /.tia$/i, /(m|l)ice$/i]; //similar to plural/singularize rules, but not the same\n\n  const isSingular = [/(ax|test)is$/i, /(octop|vir|radi|nucle|fung|cact|stimul)us$/i, /(octop|vir)i$/i, /(rl)f$/i, /(alias|status)$/i, /(bu)s$/i, /(al|ad|at|er|et|ed|ad)o$/i, /(ti)um$/i, /(ti)a$/i, /sis$/i, /(?:(^f)fe|(lr)f)$/i, /hive$/i, /(^aeiouy|qu)y$/i, /(x|ch|ss|sh|z)$/i, /(matr|vert|ind|cort)(ix|ex)$/i, /(m|l)ouse$/i, /(m|l)ice$/i, /(antenn|formul|nebul|vertebr|vit)a$/i, /.sis$/i, /^(?!talis|.*hu)(.*)man$/i];\n  var _rules = {\n    isSingular: isSingular,\n    isPlural: isPlural$7\n  };\n\n  const rules = _rules;\n  const endS = /s$/; // double-check this term, if it is not plural, or singular.\n  // (this is a partial copy of ./tagger/fallbacks/plural)\n  // fallback plural if it ends in an 's'.\n\n  const isPlural$6 = function (str) {\n    // isSingular suffix rules\n    if (rules.isSingular.find(reg => reg.test(str))) {\n      return false;\n    } // does it end in an s?\n\n\n    if (endS.test(str) === true) {\n      return true;\n    } // is it a plural like 'fungi'?\n\n\n    if (rules.isPlural.find(reg => reg.test(str))) {\n      return true;\n    }\n\n    return null;\n  };\n\n  var isPlural_1$1 = isPlural$6;\n\n  const exceptions = {\n    he: 'his',\n    she: 'hers',\n    they: 'theirs',\n    we: 'ours',\n    i: 'mine',\n    you: 'yours',\n    her: 'hers',\n    their: 'theirs',\n    our: 'ours',\n    my: 'mine',\n    your: 'yours'\n  }; // turn \"David\" to \"David's\"\n\n  const toPossessive$1 = function (doc) {\n    let str = doc.text('text').trim(); // exceptions\n\n    if (exceptions.hasOwnProperty(str)) {\n      doc.replaceWith(exceptions[str], true);\n      doc.tag('Possessive', 'toPossessive');\n      return;\n    } // flanders'\n\n\n    if (/s$/.test(str)) {\n      str += \"'\";\n      doc.replaceWith(str, true);\n      doc.tag('Possessive', 'toPossessive');\n      return;\n    } //normal form:\n\n\n    str += \"'s\";\n    doc.replaceWith(str, true);\n    doc.tag('Possessive', 'toPossessive');\n    return;\n  };\n\n  var toPossessive_1 = toPossessive$1;\n\n  // pull these apart, if necessary\n\n  const parse$2 = function (doc) {\n    let res = {\n      main: doc\n    }; //support 'mayor of chicago' as one noun-phrase\n\n    if (doc.has('#Noun (of|by|for) .')) {\n      let m = doc.splitAfter('[#Noun+]', 0);\n      res.main = m.eq(0);\n      res.post = m.eq(1);\n    }\n\n    return res;\n  };\n\n  var parse_1 = parse$2;\n\n  const hasPlural = hasPlural_1;\n  const getArticle = getArticle$1;\n  const isPlural$5 = isPlural_1$1;\n  const toPossessive = toPossessive_1;\n  const parse$1 = parse_1;\n  const methods$4 = {\n    /** overload the original json with noun information */\n    json: function (options) {\n      let n = null;\n\n      if (typeof options === 'number') {\n        n = options;\n        options = null;\n      }\n\n      options = options || {\n        text: true,\n        normal: true,\n        trim: true,\n        terms: true\n      };\n      let res = [];\n      this.forEach(doc => {\n        let json = doc.json(options)[0];\n        json.article = getArticle(doc);\n        res.push(json);\n      });\n\n      if (n !== null) {\n        return res[n];\n      }\n\n      return res;\n    },\n\n    /** get all adjectives describing this noun*/\n    adjectives: function () {\n      let list = this.lookAhead('^(that|who|which)? (was|is|will)? be? #Adverb? #Adjective+');\n      list = list.concat(this.lookBehind('#Adjective+ #Adverb?$'));\n      list = list.match('#Adjective');\n      return list.sort('index');\n    },\n    isPlural: function () {\n      return this.if('#Plural'); //assume tagger has run?\n    },\n    hasPlural: function () {\n      return this.filter(d => hasPlural(d));\n    },\n    toPlural: function (agree) {\n      let toPlural = this.world.transforms.toPlural;\n      this.forEach(doc => {\n        if (doc.has('#Plural') || hasPlural(doc) === false) {\n          return;\n        } // double-check it isn't an un-tagged plural\n\n\n        let main = parse$1(doc).main;\n        let str = main.text('reduced');\n\n        if (!main.has('#Singular') && isPlural$5(str) === true) {\n          return;\n        }\n\n        str = toPlural(str, this.world);\n        main.replace(str).tag('#Plural'); // 'an apple' -> 'apples'\n\n        if (agree) {\n          let an = main.lookBefore('(an|a) #Adjective?$').not('#Adjective');\n\n          if (an.found === true) {\n            an.remove();\n          }\n        }\n      });\n      return this;\n    },\n    toSingular: function (agree) {\n      let toSingular = this.world.transforms.toSingular;\n      this.forEach(doc => {\n        if (doc.has('^#Singular+$') || hasPlural(doc) === false) {\n          return;\n        } // double-check it isn't an un-tagged plural\n\n\n        let main = parse$1(doc).main;\n        let str = main.text('reduced');\n\n        if (!main.has('#Plural') && isPlural$5(str) !== true) {\n          return;\n        }\n\n        str = toSingular(str, this.world);\n        main.replace(str).tag('#Singular'); // add an article\n\n        if (agree) {\n          // 'apples' -> 'an apple'\n          let start = doc;\n          let adj = doc.lookBefore('#Adjective');\n\n          if (adj.found) {\n            start = adj;\n          }\n\n          let article = getArticle(start);\n          start.insertBefore(article);\n        }\n      });\n      return this;\n    },\n    toPossessive: function () {\n      this.forEach(d => {\n        toPossessive(d);\n      });\n      return this;\n    }\n  };\n  var methods_1 = methods$4;\n\n  const methods$3 = methods_1;\n\n  const addMethod$5 = function (Doc) {\n    /**  */\n    class Nouns extends Doc {} // add-in our methods\n\n\n    Object.assign(Nouns.prototype, methods$3);\n\n    Doc.prototype.nouns = function (n, opts = {}) {\n      // don't split 'paris, france'\n      let keep = this.match('(#City && @hasComma) (#Region|#Country)'); // but split the other commas\n\n      let m = this.not(keep).splitAfter('@hasComma'); // combine them back together\n\n      m = m.concat(keep); // don't combine over scare-quotes\n\n      let quotes = m.quotations();\n\n      if (quotes.found) {\n        m = m.splitOn(quotes.eq(0));\n      }\n\n      m = m.match('#Noun+ (of|by)? the? #Noun+?'); //nouns that we don't want in these results, for weird reasons\n\n      if (opts.keep_anaphora !== true) {\n        m = m.not('#Pronoun');\n        m = m.not('(there|these)');\n        m = m.not('(#Month|#WeekDay)'); //allow Durations, Holidays\n        // //allow possessives like \"spencer's\", but not generic ones like,\n\n        m = m.not('(my|our|your|their|her|his)');\n      }\n\n      m = m.not('(of|for|by|the)$');\n\n      if (typeof n === 'number') {\n        m = m.get(n);\n      }\n\n      return new Nouns(m.list, this, this.world);\n    };\n\n    return Doc;\n  };\n\n  var Nouns = addMethod$5;\n\n  const open = /\\(/;\n  const close = /\\)/;\n\n  const addMethod$4 = function (Doc) {\n    /** anything between (these things) */\n    class Parentheses extends Doc {\n      /** remove the parentheses characters */\n      unwrap() {\n        this.list.forEach(p => {\n          let first = p.terms(0);\n          first.pre = first.pre.replace(open, '');\n          let last = p.lastTerm();\n          last.post = last.post.replace(close, '');\n        });\n        return this;\n      }\n\n    }\n\n    Doc.prototype.parentheses = function (n) {\n      let list = [];\n      this.list.forEach(p => {\n        let terms = p.terms(); //look for opening brackets\n\n        for (let i = 0; i < terms.length; i += 1) {\n          const t = terms[i];\n\n          if (open.test(t.pre)) {\n            //look for the closing bracket..\n            for (let o = i; o < terms.length; o += 1) {\n              if (close.test(terms[o].post)) {\n                let len = o - i + 1;\n                list.push(p.buildFrom(t.id, len));\n                i = o;\n                break;\n              }\n            }\n          }\n        }\n      }); //support nth result\n\n      if (typeof n === 'number') {\n        if (list[n]) {\n          list = [list[n]];\n        } else {\n          list = [];\n        }\n\n        return new Parentheses(list, this, this.world);\n      }\n\n      return new Parentheses(list, this, this.world);\n    };\n\n    return Doc;\n  };\n\n  var Parentheses = addMethod$4;\n\n  const addMethod$3 = function (Doc) {\n    /**  */\n    class Possessives extends Doc {\n      constructor(list, from, world) {\n        super(list, from, world);\n        this.contracted = null;\n      }\n      /** turn didn't into 'did not' */\n\n\n      strip() {\n        this.list.forEach(p => {\n          let terms = p.terms();\n          terms.forEach(t => {\n            let str = t.text.replace(/'s$/, '');\n            t.set(str || t.text);\n          });\n        });\n        return this;\n      }\n\n    } //find contractable, expanded-contractions\n    // const findExpanded = r => {\n    //   let remain = r.not('#Contraction')\n    //   let m = remain.match('(#Noun|#QuestionWord) (#Copula|did|do|have|had|could|would|will)')\n    //   m.concat(remain.match('(they|we|you|i) have'))\n    //   m.concat(remain.match('i am'))\n    //   m.concat(remain.match('(#Copula|#Modal|do|does|have|has|can|will) not'))\n    //   return m\n    // }\n\n\n    Doc.prototype.possessives = function (n) {\n      //find currently-contracted\n      let found = this.match('#Noun+? #Possessive'); //todo: split consecutive contractions\n\n      if (typeof n === 'number') {\n        found = found.get(n);\n      }\n\n      return new Possessives(found.list, this, this.world);\n    };\n\n    return Doc;\n  };\n\n  var Possessives = addMethod$3;\n\n  const pairs = {\n    '\\u0022': '\\u0022',\n    // 'StraightDoubleQuotes'\n    '\\uFF02': '\\uFF02',\n    // 'StraightDoubleQuotesWide'\n    '\\u0027': '\\u0027',\n    // 'StraightSingleQuotes'\n    '\\u201C': '\\u201D',\n    // 'CommaDoubleQuotes'\n    '\\u2018': '\\u2019',\n    // 'CommaSingleQuotes'\n    '\\u201F': '\\u201D',\n    // 'CurlyDoubleQuotesReversed'\n    '\\u201B': '\\u2019',\n    // 'CurlySingleQuotesReversed'\n    '\\u201E': '\\u201D',\n    // 'LowCurlyDoubleQuotes'\n    '\\u2E42': '\\u201D',\n    // 'LowCurlyDoubleQuotesReversed'\n    '\\u201A': '\\u2019',\n    // 'LowCurlySingleQuotes'\n    '\\u00AB': '\\u00BB',\n    // 'AngleDoubleQuotes'\n    '\\u2039': '\\u203A',\n    // 'AngleSingleQuotes'\n    // Prime 'non quotation'\n    '\\u2035': '\\u2032',\n    // 'PrimeSingleQuotes'\n    '\\u2036': '\\u2033',\n    // 'PrimeDoubleQuotes'\n    '\\u2037': '\\u2034',\n    // 'PrimeTripleQuotes'\n    // Prime 'quotation' variation\n    '\\u301D': '\\u301E',\n    // 'PrimeDoubleQuotes'\n    '\\u0060': '\\u00B4',\n    // 'PrimeSingleQuotes'\n    '\\u301F': '\\u301E' // 'LowPrimeDoubleQuotesReversed'\n\n  };\n  const hasOpen = RegExp('(' + Object.keys(pairs).join('|') + ')');\n\n  const addMethod$2 = function (Doc) {\n    /** \"these things\" */\n    class Quotations extends Doc {\n      /** remove the quote characters */\n      unwrap() {\n        return this;\n      }\n\n    }\n\n    Doc.prototype.quotations = function (n) {\n      let list = [];\n      this.list.forEach(p => {\n        let terms = p.terms(); //look for opening quotes\n\n        for (let i = 0; i < terms.length; i += 1) {\n          const t = terms[i];\n\n          if (hasOpen.test(t.pre)) {\n            let char = (t.pre.match(hasOpen) || [])[0];\n            let want = pairs[char]; // if (!want) {\n            //   console.warn('missing quote char ' + char)\n            // }\n            //look for the closing bracket..\n\n            for (let o = i; o < terms.length; o += 1) {\n              if (terms[o].post.indexOf(want) !== -1) {\n                let len = o - i + 1;\n                list.push(p.buildFrom(t.id, len));\n                i = o;\n                break;\n              }\n            }\n          }\n        }\n      }); //support nth result\n\n      if (typeof n === 'number') {\n        if (list[n]) {\n          list = [list[n]];\n        } else {\n          list = [];\n        }\n\n        return new Quotations(list, this, this.world);\n      }\n\n      return new Quotations(list, this, this.world);\n    }; // alias\n\n\n    Doc.prototype.quotes = Doc.prototype.quotations;\n    return Doc;\n  };\n\n  var Quotations = addMethod$2;\n\n  const toInfinitive$2 = function (parsed, world) {\n    let verb = parsed.verb; //1. if it's already infinitive\n\n    let str = verb.text('reduced');\n\n    if (verb.has('#Infinitive')) {\n      return str;\n    } // 2. world transform does the heavy-lifting\n\n\n    let tense = null;\n\n    if (verb.has('#PastTense')) {\n      tense = 'PastTense';\n    } else if (verb.has('#Gerund')) {\n      tense = 'Gerund';\n    } else if (verb.has('#PresentTense')) {\n      tense = 'PresentTense';\n    } else if (verb.has('#Participle')) {\n      tense = 'Participle';\n    } else if (verb.has('#Actor')) {\n      tense = 'Actor';\n    }\n\n    return world.transforms.toInfinitive(str, world, tense);\n  };\n\n  var toInfinitive_1 = toInfinitive$2;\n\n  // we walk -> plural\n  // the most-recent noun-phrase, before this verb.\n\n  const findNoun = function (vb) {\n    let noun = vb.lookBehind('#Noun+').last();\n    return noun;\n  }; //sometimes you can tell if a verb is plural/singular, just by the verb\n  // i am / we were\n  // othertimes you need its subject 'we walk' vs 'i walk'\n\n\n  const isPlural$4 = function (parsed) {\n    let vb = parsed.verb;\n\n    if (vb.has('(are|were|does)') || parsed.auxiliary.has('(are|were|does)')) {\n      return true;\n    } //consider its prior noun\n\n\n    let noun = findNoun(vb);\n\n    if (noun.has('(he|she|many|both)')) {\n      return false;\n    }\n\n    if (noun.has('(we|they|you|i)')) {\n      return true;\n    }\n\n    if (noun.has('#Person')) {\n      return false;\n    }\n\n    if (noun.has('#Plural')) {\n      return true;\n    }\n\n    if (noun.has('#Singular')) {\n      return false;\n    }\n\n    if (vb.has('(is|am|do|was)')) {\n      return false;\n    }\n\n    if (parsed.auxiliary.has('(is|am|do|was)') && !parsed.negative.found) {\n      return false;\n    }\n\n    return null;\n  };\n\n  var isPlural_1 = isPlural$4;\n\n  const toInfinitive$1 = toInfinitive_1;\n  const isPlural$3 = isPlural_1; // #Modal : would walk    -> 'would not walk'\n  // #Copula : is           -> 'is not'\n  // #PastTense : walked    -> did not walk\n  // #PresentTense : walks  -> does not walk\n  // #Gerund : walking:     -> not walking\n  // #Infinitive : walk     -> do not walk\n\n  const toNegative$1 = function (parsed, world) {\n    let vb = parsed.verb; // if it's already negative...\n\n    if (parsed.negative.found) {\n      return;\n    } // would walk -> would not walk\n\n\n    if (parsed.auxiliary.found) {\n      parsed.auxiliary.eq(0).append('not'); // 'would not have' ➔ 'would not have'\n\n      if (parsed.auxiliary.has('#Modal have not')) {\n        parsed.auxiliary.replace('have not', 'not have');\n      }\n\n      return;\n    } // is walking -> is not walking\n\n\n    if (vb.has('(#Copula|will|has|had|do)')) {\n      vb.append('not');\n      return;\n    } // walked -> did not walk\n\n\n    if (vb.has('#PastTense')) {\n      let inf = toInfinitive$1(parsed, world);\n      vb.replaceWith(inf, true);\n      vb.prepend('did not');\n      return;\n    } // walks -> does not walk\n\n\n    if (vb.has('#PresentTense')) {\n      let inf = toInfinitive$1(parsed, world);\n      vb.replaceWith(inf, true);\n\n      if (isPlural$3(parsed)) {\n        vb.prepend('do not');\n      } else {\n        vb.prepend('does not');\n      }\n\n      return;\n    } //walking -> not walking\n\n\n    if (vb.has('#Gerund')) {\n      let inf = toInfinitive$1(parsed, world);\n      vb.replaceWith(inf, true);\n      vb.prepend('not');\n      return;\n    } //fallback 1:  walk -> does not walk\n\n\n    if (isPlural$3(parsed)) {\n      vb.prepend('does not');\n      return;\n    } //fallback 2:  walk -> do not walk\n\n\n    vb.prepend('do not');\n    return;\n  };\n\n  var toNegative_1 = toNegative$1;\n\n  // get the prior verb most-likely doing this action\n  // (it can not-exist - 'close the door')\n\n  const getSubject$2 = function (vb) {\n    let behind = vb.lookBehind();\n    let lastNoun = behind.nouns(null, {\n      keep_anaphora: true\n    }).last(); // support 'that' and 'this'\n\n    if (!lastNoun.found) {\n      lastNoun = behind.match('(that|this|each)').last();\n      lastNoun = lastNoun.tag('#Noun').nouns();\n    }\n\n    return lastNoun;\n  };\n\n  var getSubject_1 = getSubject$2;\n\n  const getSubject$1 = getSubject_1; // turn 'would not really walk up' into parts\n\n  const parseVerb$1 = function (vb) {\n    let parsed = {\n      adverb: vb.match('#Adverb+'),\n      // 'really'\n      negative: vb.match('#Negative'),\n      // 'not'\n      auxiliary: vb.match('#Auxiliary+').not('(#Negative|#Adverb)'),\n      // 'will' of 'will go'\n      particle: vb.match('#Particle'),\n      // 'up' of 'pull up'\n      verb: vb.match('#Verb+').not('(#Adverb|#Negative|#Auxiliary|#Particle)'),\n      original: vb,\n      subject: getSubject$1(vb)\n    }; // parsed.subject.debug()\n    // for conjugation purposes,\n    // 'should start looking' -> 'should start'\n\n    if (parsed.verb.has('(#PresentTense|#PastTense|#Infinitive) #Gerund$')) {\n      parsed.verb = parsed.verb.not('#Gerund$');\n    } // fallback, if no verb found\n\n\n    if (!parsed.verb.found) {\n      // blank-everything\n      Object.keys(parsed).forEach(k => {\n        parsed[k] = parsed[k].not('.');\n      }); // it's all the verb\n\n      parsed.verb = vb;\n      return parsed;\n    } //\n\n\n    if (parsed.adverb && parsed.adverb.found) {\n      let match = parsed.adverb.text('reduced') + '$';\n\n      if (vb.has(match)) {\n        parsed.adverbAfter = true;\n      }\n    }\n\n    return parsed;\n  };\n\n  var parse = parseVerb$1;\n\n  const isPlural$2 = isPlural_1;\n  /** too many special cases for is/was/will be*/\n\n  const toBe$1 = parsed => {\n    let isI = false;\n    let plural = isPlural$2(parsed);\n    let isNegative = parsed.negative.found; //account for 'i is' -> 'i am' irregular\n    // if (vb.parent && vb.parent.has('i #Adverb? #Copula')) {\n    //   isI = true;\n    // }\n    // 'i look', not 'i looks'\n\n    if (parsed.verb.lookBehind('i (#Adverb|#Verb)?$').found) {\n      isI = true;\n    }\n\n    let obj = {\n      PastTense: 'was',\n      PresentTense: 'is',\n      FutureTense: 'will be',\n      Infinitive: 'is',\n      Gerund: 'being',\n      Actor: '',\n      PerfectTense: 'been',\n      Pluperfect: 'been'\n    };\n\n    if (plural) {\n      obj.PastTense = 'were';\n      obj.PresentTense = 'are';\n      obj.Infinitive = 'are';\n    } //\"i is\" -> \"i am\"\n\n\n    if (isI === true) {\n      obj.PastTense = 'was';\n      obj.PresentTense = 'am';\n      obj.Infinitive = 'am';\n    }\n\n    if (isNegative) {\n      obj.PastTense += ' not';\n      obj.PresentTense += ' not';\n      obj.FutureTense = 'will not be';\n      obj.Infinitive += ' not';\n      obj.PerfectTense = 'not ' + obj.PerfectTense;\n      obj.Pluperfect = 'not ' + obj.Pluperfect;\n      obj.Gerund = 'not ' + obj.Gerund;\n    }\n\n    return obj;\n  };\n\n  var toBe_1 = toBe$1;\n\n  const doModal$1 = function (parsed) {\n    let str = parsed.verb.text();\n    let res = {\n      PastTense: str + ' have',\n      PresentTense: str,\n      FutureTense: str,\n      Infinitive: str // Gerund: ,\n      // Actor: '',\n      // PerfectTense: '',\n      // Pluperfect: '',\n\n    };\n    return res;\n  };\n\n  var doModal_1 = doModal$1;\n\n  const toInfinitive = toInfinitive_1;\n  const toBe = toBe_1;\n  const doModal = doModal_1;\n  const isPlural$1 = isPlural_1;\n\n  const conjugate$2 = function (parsed, world) {\n    let verb = parsed.verb; //special handling of 'is', 'will be', etc.\n\n    if (verb.has('#Copula') || verb.out('normal') === 'be' && parsed.auxiliary.has('will')) {\n      return toBe(parsed);\n    } // special handling of 'are walking'\n\n\n    if (parsed.auxiliary.has('are') && verb.has('#Gerund')) {\n      let og = parsed.original.clone();\n      let past = og.clone().replace('are', 'were');\n      let fut = og.clone().replace('are', 'will be');\n      let infinitive = toInfinitive(parsed, world);\n      let res = {\n        PastTense: past.text(),\n        PresentTense: og.text(),\n        FutureTense: fut.text(),\n        Infinitive: infinitive\n      };\n      return res;\n    } // special handling of 'he could.'\n\n\n    if (verb.has('#Modal')) {\n      return doModal(parsed);\n    } // get the root form\n\n\n    let infinitive = toInfinitive(parsed, world);\n\n    if (!infinitive) {\n      return {};\n    }\n\n    let forms = world.transforms.conjugate(infinitive, world);\n    forms.Infinitive = infinitive; // Singular: the dog chases\n    // Plural: the dogs chase\n\n    let bePlural = isPlural$1(parsed);\n\n    if (bePlural === true) {\n      forms.PresentTense = forms.Infinitive; // the dogs chase\n    } // add particle to phrasal verbs ('fall over')\n\n\n    let hasHyphen = parsed.verb.termList(0).hasHyphen();\n\n    if (parsed.particle.found) {\n      let particle = parsed.particle.text();\n      let space = hasHyphen === true ? '-' : ' ';\n      Object.keys(forms).forEach(k => forms[k] += space + particle);\n    } //apply negative\n\n\n    const isNegative = parsed.negative.found;\n    forms.FutureTense = forms.FutureTense || 'will ' + forms.Infinitive;\n\n    if (isNegative) {\n      forms.PastTense = 'did not ' + forms.Infinitive;\n      forms.FutureTense = 'will not ' + forms.Infinitive;\n\n      if (bePlural) {\n        forms.PresentTense = 'do not ' + forms.Infinitive;\n        forms.Infinitive = 'do not ' + forms.Infinitive;\n      } else {\n        forms.PresentTense = 'does not ' + forms.Infinitive;\n        forms.Infinitive = 'does not ' + forms.Infinitive;\n      }\n\n      forms.Gerund = 'not ' + forms.Gerund;\n    }\n\n    return forms;\n  };\n\n  var conjugate_1 = conjugate$2;\n\n  const conjugate$1 = conjugate_1; // 'i could drive' -> 'i could have driven'\n  // if something is 'modal-ish' we are forced to use past-participle\n  // ('i could drove' is wrong)\n\n  const useParticiple$1 = function (parsed) {\n    if (parsed.auxiliary.has('(could|should|would|may|can|must)')) {\n      return true;\n    }\n\n    if (parsed.auxiliary.has('am .+? being')) {\n      return true;\n    }\n\n    if (parsed.auxiliary.has('had .+? been')) {\n      return true;\n    }\n\n    return false;\n  }; // conjugate 'drive' ➔ 'have driven'\n\n\n  const toParticiple$1 = function (parsed, world) {\n    //is it already a participle?\n    if (parsed.auxiliary.has('(have|had)') && parsed.verb.has('#Participle')) {\n      return;\n    } // try to swap the main verb to its participle form\n\n\n    let obj = conjugate$1(parsed, world);\n    let str = obj.Participle || obj.PastTense;\n\n    if (str) {\n      parsed.verb.replaceWith(str, false);\n    } // 'am being driven' ➔ 'have been driven'\n\n\n    if (parsed.auxiliary.has('am .+? being')) {\n      parsed.auxiliary.remove('am');\n      parsed.auxiliary.replace('being', 'have been');\n    } // add a 'have'\n\n\n    if (!parsed.auxiliary.has('have')) {\n      parsed.auxiliary.append('have');\n    } // tag it as a participle\n\n\n    parsed.verb.tag('Participle', 'toParticiple'); // turn 'i can swim' to -> 'i could swim'\n\n    parsed.auxiliary.replace('can', 'could'); //'must be' ➔ 'must have been'\n\n    parsed.auxiliary.replace('be have', 'have been'); //'not have' ➔ 'have not'\n\n    parsed.auxiliary.replace('not have', 'have not'); // ensure all new words are tagged right\n\n    parsed.auxiliary.tag('Auxiliary');\n  };\n\n  var participle = {\n    useParticiple: useParticiple$1,\n    toParticiple: toParticiple$1\n  };\n\n  const toNegative = toNegative_1;\n  const parseVerb = parse;\n  const isPlural = isPlural_1;\n  const getSubject = getSubject_1;\n  const conjugate = conjugate_1;\n  const {\n    toParticiple,\n    useParticiple\n  } = participle; // remove any tense-information in auxiliary verbs\n\n  const makeNeutral = function (parsed) {\n    //remove tense-info from auxiliaries\n    parsed.auxiliary.remove('(will|are|am|being)');\n    parsed.auxiliary.remove('(did|does)');\n    parsed.auxiliary.remove('(had|has|have)'); //our conjugation includes the 'not' and the phrasal-verb particle\n\n    parsed.particle.remove();\n    parsed.negative.remove();\n    return parsed;\n  };\n\n  var methods$2 = {\n    /** overload the original json with verb information */\n    json: function (options) {\n      let n = null;\n\n      if (typeof options === 'number') {\n        n = options;\n        options = null;\n      }\n\n      options = options || {\n        text: true,\n        normal: true,\n        trim: true,\n        terms: true\n      };\n      let res = [];\n      this.forEach(p => {\n        let json = p.json(options)[0];\n        let parsed = parseVerb(p);\n        json.parts = {};\n        Object.keys(parsed).forEach(k => {\n          if (parsed[k] && parsed[k].isA === 'Doc') {\n            json.parts[k] = parsed[k].text('normal');\n          } else {\n            json.parts[k] = parsed[k];\n          }\n        });\n        json.isNegative = p.has('#Negative');\n        json.conjugations = conjugate(parsed, this.world);\n        res.push(json);\n      });\n\n      if (n !== null) {\n        return res[n];\n      }\n\n      return res;\n    },\n\n    /** grab the adverbs describing these verbs */\n    adverbs: function () {\n      let list = []; // look at internal adverbs\n\n      this.forEach(vb => {\n        let advb = parseVerb(vb).adverb;\n\n        if (advb.found) {\n          list = list.concat(advb.list);\n        }\n      }); // look for leading adverbs\n\n      let m = this.lookBehind('#Adverb+$');\n\n      if (m.found) {\n        list = m.list.concat(list);\n      } // look for trailing adverbs\n\n\n      m = this.lookAhead('^#Adverb+');\n\n      if (m.found) {\n        list = list.concat(m.list);\n      }\n\n      return this.buildFrom(list);\n    },\n    /// Verb Inflection\n\n    /**return verbs like 'we walk' and not 'spencer walks' */\n    isPlural: function () {\n      let list = [];\n      this.forEach(vb => {\n        let parsed = parseVerb(vb);\n\n        if (isPlural(parsed, this.world) === true) {\n          list.push(vb.list[0]);\n        }\n      });\n      return this.buildFrom(list);\n    },\n\n    /** return verbs like 'spencer walks' and not 'we walk' */\n    isSingular: function () {\n      let list = [];\n      this.forEach(vb => {\n        let parsed = parseVerb(vb);\n\n        if (isPlural(parsed, this.world) === false) {\n          list.push(vb.list[0]);\n        }\n      });\n      return this.buildFrom(list);\n    },\n    /// Conjugation\n\n    /** return all forms of this verb  */\n    conjugate: function () {\n      let result = [];\n      this.forEach(vb => {\n        let parsed = parseVerb(vb);\n        let forms = conjugate(parsed, this.world);\n        result.push(forms);\n      });\n      return result;\n    },\n\n    /** walk ➔ walked*/\n    toPastTense: function () {\n      this.forEach(vb => {\n        let parsed = parseVerb(vb); // should we support 'would swim' ➔ 'would have swam'\n\n        if (useParticiple(parsed)) {\n          toParticiple(parsed, this.world);\n          return;\n        } // don't conjugate 'go away'.\n\n\n        if (vb.has('#Imperative')) {\n          return;\n        } // don't conjugate 'to be'\n\n\n        if (vb.has('be') && vb.lookBehind('to$').found) {\n          return;\n        } // handle 'is raining' -> 'was raining'\n\n\n        if (parsed.verb.has('#Gerund') && parsed.auxiliary.has('(is|will|was)')) {\n          vb.replace('is', 'was');\n          return;\n        }\n\n        let str = conjugate(parsed, this.world).PastTense;\n\n        if (str) {\n          parsed = makeNeutral(parsed);\n          parsed.verb.replaceWith(str, false);\n          parsed.auxiliary.remove('(do|did|will)'); //??\n        }\n      });\n      return this;\n    },\n\n    /** walk ➔ walks */\n    toPresentTense: function () {\n      this.forEach(vb => {\n        // don't conjugate 'go away'.\n        if (vb.has('#Imperative')) {\n          return;\n        }\n\n        let parsed = parseVerb(vb);\n        let obj = conjugate(parsed, this.world);\n        let str = obj.PresentTense; // 'i look', not 'i looks'\n\n        if (vb.lookBehind('(i|we) (#Adverb|#Verb)?$').found) {\n          str = obj.Infinitive;\n        }\n\n        if (str) {\n          //awkward support for present-participle form\n          // -- should we support 'have been swimming' ➔ 'am swimming'\n          if (parsed.auxiliary.has('(have|had) been')) {\n            parsed.auxiliary.replace('(have|had) been', 'am being');\n\n            if (obj.Particle) {\n              str = obj.Particle || obj.PastTense;\n            }\n\n            return;\n          }\n\n          parsed.verb.replaceWith(str, false);\n          parsed.verb.tag('PresentTense');\n          parsed = makeNeutral(parsed); // avoid 'he would walks'\n\n          parsed.auxiliary.remove('#Modal');\n          parsed.auxiliary.remove('(do|did|will)'); //??\n        }\n      });\n      return this;\n    },\n\n    /** walk ➔ will walk*/\n    toFutureTense: function () {\n      this.forEach(vb => {\n        let parsed = parseVerb(vb); // 'i should drive' is already future-enough\n\n        if (useParticiple(parsed)) {\n          return;\n        } // don't conjugate 'go away'.\n\n\n        if (vb.has('#Imperative')) {\n          return;\n        }\n\n        let str = conjugate(parsed, this.world).FutureTense;\n\n        if (str) {\n          parsed = makeNeutral(parsed); // avoid 'he would will go'\n\n          parsed.auxiliary.remove('#Modal');\n          parsed.verb.replaceWith(str, false);\n          parsed.verb.tag('FutureTense');\n          parsed.auxiliary.remove('(do|did|will)'); //??\n          // parsed.auxiliary.remove('(do|did|will)') //??\n        }\n      });\n      return this;\n    },\n\n    /** walks ➔ walk */\n    toInfinitive: function () {\n      this.forEach(vb => {\n        let parsed = parseVerb(vb);\n        let str = conjugate(parsed, this.world).Infinitive;\n\n        if (str) {\n          vb.replaceWith(str, false);\n          vb.tag('Infinitive');\n        }\n      });\n      return this;\n    },\n\n    /** walk ➔ walking */\n    toGerund: function () {\n      this.forEach(vb => {\n        let parsed = parseVerb(vb);\n        let str = conjugate(parsed, this.world).Gerund;\n\n        if (str) {\n          vb.replaceWith(str, false);\n          vb.tag('Gerund');\n        }\n      });\n      return this;\n    },\n\n    /** drive ➔ driven - naked past-participle if it exists, otherwise past-tense */\n    toParticiple: function () {\n      this.forEach(vb => {\n        let parsed = parseVerb(vb);\n        let noAux = !parsed.auxiliary.found;\n        toParticiple(parsed, this.world); // dirty trick to  ensure our new auxiliary is found\n\n        if (noAux) {\n          parsed.verb.prepend(parsed.auxiliary.text());\n          parsed.auxiliary.remove();\n        }\n      });\n      return this;\n    },\n    /// Negation\n\n    /** return only verbs with 'not'*/\n    isNegative: function () {\n      return this.if('#Negative');\n    },\n\n    /**  return only verbs without 'not'*/\n    isPositive: function () {\n      return this.ifNo('#Negative');\n    },\n\n    /**  return only commands - verbs in imperative mood */\n    isImperative: function () {\n      return this.if('#Imperative');\n    },\n\n    /** add a 'not' to these verbs */\n    toNegative: function () {\n      this.list.forEach(p => {\n        let doc = this.buildFrom([p]);\n        let parsed = parseVerb(doc);\n        toNegative(parsed, doc.world);\n      });\n      return this;\n    },\n\n    /** remove 'not' from these verbs */\n    toPositive: function () {\n      let m = this.match('do not #Verb');\n\n      if (m.found) {\n        m.remove('do not');\n      }\n\n      return this.remove('#Negative');\n    },\n\n    /** who, or what is doing this action? */\n    subject: function () {\n      let list = [];\n      this.forEach(p => {\n        let found = getSubject(p);\n\n        if (found.list[0]) {\n          list.push(found.list[0]);\n        }\n      });\n      return this.buildFrom(list);\n    }\n  };\n\n  const methods$1 = methods$2;\n\n  const addMethod$1 = function (Doc) {\n    /**  */\n    class Verbs extends Doc {} // add-in our methods\n\n\n    Object.assign(Verbs.prototype, methods$1); // aliases\n\n    Verbs.prototype.negate = Verbs.prototype.toNegative;\n\n    Doc.prototype.verbs = function (n) {\n      let match = this.match('(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+'); // try to ignore leading and trailing adverbs\n\n      match = match.not('^#Adverb+');\n      match = match.not('#Adverb+$'); // handle commas:\n      // don't split 'really, really'\n\n      let keep = match.match('(#Adverb && @hasComma) #Adverb'); // // but split the other commas\n\n      let m = match.not(keep).splitAfter('@hasComma'); // i was shocked looking at...\n      // let gerund = m.match('#PastTense #Gerund')\n      // if (!gerund.has('(been|am|#Auxiliary) #Gerund')) {\n      //   m = m.splitBefore(gerund.match('#Gerund'))\n      // }\n      // combine them back together\n\n      m = m.concat(keep);\n      m.sort('index'); //handle slashes?\n      //ensure there's actually a verb\n\n      m = m.if('#Verb'); // the reason he will is ...\n\n      if (m.has('(is|was)$')) {\n        m = m.splitBefore('(is|was)$');\n      } //ensure it's not two verbs\n\n\n      if (m.has('#PresentTense #Adverb #PresentTense')) {\n        m = m.splitBefore('#Adverb #PresentTense');\n      } //grab (n)th result\n\n\n      if (typeof n === 'number') {\n        m = m.get(n);\n      }\n\n      let vb = new Verbs(m.list, this, this.world);\n      return vb;\n    };\n\n    return Doc;\n  };\n\n  var Verbs = addMethod$1;\n\n  const addMethod = function (Doc) {\n    /**  */\n    class People extends Doc {// honorifics(){}\n      // firstNames(){}\n      // lastNames(){}\n      // pronouns(){}\n      // toPronoun(){}\n      // fromPronoun(){}\n    }\n\n    Doc.prototype.people = function (n) {\n      let match = this.splitAfter('@hasComma');\n      match = match.match('#Person+'); //grab (n)th result\n\n      if (typeof n === 'number') {\n        match = match.get(n);\n      }\n\n      return new People(match.list, this, this.world);\n    };\n\n    return Doc;\n  };\n\n  var People = addMethod;\n\n  const subsets = _simple;\n  const subclass = [Abbreviations, Acronyms, Clauses, Contractions, Lists, Nouns, Parentheses, Possessives, Quotations, Verbs, People];\n\n  const extend$1 = function (Doc) {\n    // add basic methods\n    Object.keys(subsets).forEach(k => Doc.prototype[k] = subsets[k]); // add subclassed methods\n\n    subclass.forEach(addFn => addFn(Doc));\n    return Doc;\n  };\n\n  var Subset = extend$1;\n\n  const methods = {\n    misc: methods$6,\n    selections: _simple\n  };\n  const tagger = _02Tagger;\n  const tokenize$1 = _01Tokenizer;\n  const extend = Subset;\n  /** a parsed text object */\n\n  class Doc$1 {\n    constructor(list, from, world) {\n      this.list = list; // this.reasons = []\n      //quiet these properties in console.logs\n\n      Object.defineProperty(this, 'from', {\n        enumerable: false,\n        value: from,\n        writable: true\n      }); //borrow some missing data from parent\n\n      if (world === undefined && from !== undefined) {\n        world = from.world;\n      } //'world' getter\n\n\n      Object.defineProperty(this, 'world', {\n        enumerable: false,\n        value: world,\n        writable: true\n      }); //fast-scans for our data\n\n      Object.defineProperty(this, '_cache', {\n        enumerable: false,\n        writable: true,\n        value: {}\n      }); //'found' getter\n\n      Object.defineProperty(this, 'found', {\n        get: () => this.list.length > 0\n      }); //'length' getter\n\n      Object.defineProperty(this, 'length', {\n        get: () => this.list.length\n      }); // this is way easier than .constructor.name...\n\n      Object.defineProperty(this, 'isA', {\n        get: () => 'Doc'\n      });\n    }\n    /** run part-of-speech tagger on all results*/\n\n\n    tagger() {\n      return tagger(this);\n    }\n    /** pool is stored on phrase objects */\n\n\n    pool() {\n      if (this.list.length > 0) {\n        return this.list[0].pool;\n      }\n\n      return this.all().list[0].pool;\n    }\n\n  }\n  /** create a new Document object */\n\n\n  Doc$1.prototype.buildFrom = function (list) {\n    list = list.map(p => p.clone(true)); // new this.constructor()\n\n    let doc = new Doc$1(list, this, this.world);\n    return doc;\n  };\n  /** create a new Document from plaintext. */\n\n\n  Doc$1.prototype.fromText = function (str) {\n    let list = tokenize$1(str, this.world, this.pool());\n    return this.buildFrom(list);\n  };\n\n  Object.assign(Doc$1.prototype, methods.misc);\n  Object.assign(Doc$1.prototype, methods.selections); //add sub-classes\n\n  extend(Doc$1); //aliases\n\n  const aliases = {\n    untag: 'unTag',\n    and: 'match',\n    notIf: 'ifNo',\n    only: 'if',\n    onlyIf: 'if'\n  };\n  Object.keys(aliases).forEach(k => Doc$1.prototype[k] = Doc$1.prototype[aliases[k]]);\n  var Doc_1 = Doc$1;\n\n  const lexiconStep = _01Lexicon; //for the tokenize-only build, we want to keep\n\n  const smallTagger = function (doc) {\n    let terms = doc.termList();\n    lexiconStep(terms, doc.world); // run any user-given tagger functions\n\n    doc.world.taggers.forEach(fn => {\n      fn(doc);\n    });\n    return doc;\n  };\n\n  var tiny = smallTagger;\n\n  const tokenize = _01Tokenizer;\n  const fromJSON = fromJSON_1;\n  const version = _version;\n  const World = World_1;\n  const Doc = Doc_1;\n  const Phrase = Phrase_1;\n  const Term = Term_1;\n  const Pool = Pool_1;\n  const tinyTagger = tiny;\n  const parseMatch = matchSyntax;\n\n  function instance(worldInstance) {\n    //blast-out our word-lists, just once\n    let world = worldInstance;\n    /** parse and tag text into a compromise object  */\n\n    const nlp = function (text = '', lexicon) {\n      if (lexicon) {\n        world.addWords(lexicon);\n      }\n\n      let list = tokenize(text, world);\n      let doc = new Doc(list, null, world);\n      doc.tagger();\n      return doc;\n    };\n    /** parse text into a compromise object, without running POS-tagging */\n\n\n    nlp.tokenize = function (text = '', lexicon) {\n      let w = world;\n\n      if (lexicon) {\n        w = w.clone();\n        w.words = {};\n        w.addWords(lexicon);\n      }\n\n      let list = tokenize(text, w);\n      let doc = new Doc(list, null, w);\n\n      if (lexicon || doc.world.taggers.length > 0) {\n        tinyTagger(doc);\n      }\n\n      return doc;\n    };\n    /** mix in a compromise-plugin */\n\n\n    nlp.extend = function (fn) {\n      fn(Doc, world, this, Phrase, Term, Pool);\n      return this;\n    };\n    /** create a compromise Doc object from .json() results */\n\n\n    nlp.fromJSON = function (json) {\n      let list = fromJSON(json, world);\n      return new Doc(list, null, world);\n    };\n    /** make a deep-copy of the library state */\n\n\n    nlp.clone = function () {\n      return instance(world.clone());\n    };\n    /** log our decision-making for debugging */\n\n\n    nlp.verbose = function (bool = true) {\n      world.verbose(bool);\n      return this;\n    };\n    /** grab currently-used World object */\n\n\n    nlp.world = function () {\n      return world;\n    };\n    /** pre-parse any match statements */\n\n\n    nlp.parseMatch = function (str, opts) {\n      return parseMatch(str, opts);\n    };\n    /** current version of the library */\n\n\n    nlp.version = version; // aliases\n\n    nlp.import = nlp.load;\n    nlp.plugin = nlp.extend;\n    return nlp;\n  }\n\n  var src = instance(new World());\n\n  return src;\n\n})));\n","const fromTemplate = function (doc) {\n  let tmpl = doc.template('short description')\n  if (tmpl) {\n    let json = tmpl.json() || {}\n    return json.description || ''\n  }\n  return null\n}\nmodule.exports = fromTemplate\n","const preProcess = function (doc) {\n  doc.parentheses().remove()\n  return doc\n}\nmodule.exports = preProcess\n","const cleanUp = function (s) {\n  // 'an actor and was a politician'\n  s.remove('and #Copula .*')\n  return s\n}\n\n//  founded in 1952 as the flagship ..\nconst findPivot = function (s) {\n  let m = s.matchOne('#Copula+ (a|an|the|any|one) of?')\n  if (!m.found) {\n    m = s.matchOne('#Copula+')\n  }\n  if (!m.found) {\n    m = s.matchOne('refers to (a|an|the|any)? of?')\n  }\n  if (!m.found) {\n    m = s.matchOne('(constitutes|describes) (a|an|the|any)? of?')\n  }\n  if (!m.found) {\n    return null\n  }\n  let f = s.splitOn(m)\n  let verb = f.eq(1)\n  let article = verb.match(`(a|an|the|any)? of?`)\n  verb.remove(`(a|an|the|any)? of?`)\n  return {\n    before: f.eq(0),\n    verb: f.eq(1),\n    article: article,\n    after: cleanUp(f.eq(2))\n  }\n}\nmodule.exports = findPivot\n","const byClause = function (s) {\n  // 'an actor and also a politician'\n  s.remove('and (also|eventually) (a|an|the|#Possessive) .*')\n  // 'an actor who was a politician'\n  s.remove('!of (who|that|which) #Adverb? (#Copula|form|comprise|forms|comprises) .*')\n  // past-tense verbs 'located in spain'\n  s.remove('#Adverb? (located|situated|founded|found|formed|built|developed) .*')\n  //\n  s.remove('#Adverb? (located|situated|founded|found|formed|built|developed) .*')\n\n  return s\n}\nmodule.exports = byClause\n","const safeCuts = function (s) {\n  // 'in hamilton, Canada'\n  if (s.has('(#Place && @hasComma) #Country+$')) {\n    s.remove('#Country+$')\n  }\n  // 'which spans the '\n  if (s.has('#Noun (that|which|who) #PresentTense the .*')) {\n    s.remove(' that #PresentTense the .*')\n  }\n  // 'owned by the ...'\n  if (s.has('#Noun #PastTense by the .*')) {\n    s.remove('#PastTense by the .*')\n  }\n  // 'an american actress'\n  s.remove('#Demonym')\n  // professional hockey player\n  s.remove('(professional|former)')\n\n  //event-templates\n  s.remove('and? held annually .*')\n  s.remove('taking place each .*')\n\n  // ordinal templates - the fifth fastest ..\n  s.remove('^one of (the|many|several|#Value)+')\n  s.remove('^(a|an|the)? #Ordinal? #Superlative')\n  s.remove('^(a|an|the)? #Ordinal? most #Adjective')\n\n  //\n  s.remove('born in .*')\n  s.remove('born #Date+ in? #Place+?')\n  s.remove('(first|initially|originally)? (located|founded|started|based|formed) in .*')\n  s.remove('(which|who|that) (is|was) .*')\n  s.remove('^the name of')\n\n  return s\n}\nmodule.exports = safeCuts\n","const isIndependent = function (c) {\n  if (c.has('^(and|the|which|who|whom|also|a|an|the)')) {\n    return true\n  }\n  // 'part of abu dabi'\n  if (c.has('^(west|north|south|east|part) of')) {\n    return true\n  }\n  // 'written by .'\n  if (c.has('^#PastTense by .')) {\n    return true\n  }\n  // 'sometimes called ..'\n  if (c.has('^(occasionally|sometimes|frequently)')) {\n    return true\n  }\n  // 'such as ..'\n  if (c.has('^such as')) {\n    return true\n  }\n  // 'featuring gold feathers ..'\n  if (c.has('^(including|featuring|depicting)')) {\n    return true\n  }\n  return false\n}\n\nconst hardCuts = function (s) {\n  // .. in san fransisco\n  if (s.has('#Noun (located|based|situated|sited|found|discovered) (in|on) #Place+$')) {\n    s.remove('(located|based) in #Place+$')\n  } else if (\n    s.has(\n      '(#Noun|#Value) (in|on) the #Adjective? (region|province|district|coast|city) of #Place+$'\n    )\n  ) {\n    s.remove('(in|on) the #Adjective? (region|province|district|coast|city) of #Place+$')\n  } else if (s.has('(#Noun|#Value) in #Place+$')) {\n    s.remove('in #Place+$')\n  } else {\n    s.remove('and? part of #Place+$')\n    s.remove('and? near #Place+$')\n  }\n\n  // by clause\n  let clauses = s.clauses()\n  if (clauses.length > 1) {\n    let first = clauses.eq(0)\n    let second = clauses.eq(1)\n    //can we just choose the first clause?\n    if (isIndependent(second)) {\n      s = clauses.eq(0)\n    } else if (second.has('^(#PastTense)') && first.has('(#Noun|#Value)$')) {\n      // 'produced by...'\n      s = clauses.eq(0)\n    } else if (second.has('^(#Gerund)') && first.has('#Noun$')) {\n      // 'featuring a ...'\n      s = clauses.eq(0)\n    } else {\n      // can we remove the last clause, atleast?\n      let last = clauses.last()\n      if (isIndependent(last)) {\n        clauses.list.pop()\n        s = clauses.join()\n      }\n    }\n  }\n\n  //.. writen by sandro leonardo\n  if (s.has('(#Noun|and) #PastTense by')) {\n    s.remove('#PastTense by .*')\n  }\n  //\n  s.remove('and? designed to .*')\n  s.remove('and? owned by .*')\n  s.remove('and? consisting of .*')\n  // , which collapsed\n  if (s.has('@hasComma (which|who) #Verb')) {\n    s.remove('(which|who) .*')\n  }\n  // , then\n  // if (s.has('@hasComma (then)')) {\n  //   s.remove('(which|who) .*')\n  // }\n  return s\n}\nmodule.exports = hardCuts\n","const lastTry = function (s) {\n  s.remove('(small|large|minor|major)')\n  s.remove('(extinct|retired|annual|biweekly|monthly|daily)')\n  s.remove('(female|male)')\n  s.remove('(private|independent|official|unofficial|officially)')\n  s.remove('(southern|northern|eastern|western|northeastern|northwestern)')\n\n  //\n  s.remove('^(family|clade|genus|species|order) of')\n  return s\n}\nmodule.exports = lastTry\n","//check text is appropriate length\nconst isGood = function (doc, options) {\n  if (doc && typeof doc.text === 'function') {\n    let text = doc.text()\n    if (text && text.length > options.min && text.length < options.max) {\n      return true\n    }\n  }\n  return false\n}\nmodule.exports = isGood\n","const nlp = require('compromise')\nconst preProcess = require('./00-preProcess')\nconst findPivot = require('./01-pivot')\nconst byClause = require('./02-byClause')\nconst safeCut = require('./03-safeCuts')\nconst hardCut = require('./04-hardCuts')\nconst lastTry = require('./05-lastTry')\nconst isGood = require('./_isGood')\n\nconst post = function (s) {\n  s.remove('^(and|or|but)')\n  s.remove('(and|or|but)$')\n  s.post('') // remove trailing comma\n  return s.text()\n}\n\n// let count = 0\nconst doSentence = function (doc, options) {\n  let sentence = doc.sentence(0)\n  if (!sentence) {\n    return ''\n  }\n  let txt = sentence.text()\n  let s = nlp(txt)\n  preProcess(s)\n\n  let pivot = findPivot(s)\n  // if we can't pivot it properly, don't bother\n  if (!pivot || !pivot.verb || !pivot.verb.found) {\n    return ''\n  }\n  let after = pivot.after\n  if (options.article && pivot.article && pivot.article.found) {\n    after.prepend(pivot.article.text())\n  }\n  // maybe it's good already\n  if (isGood(after, options)) {\n    return post(after)\n  }\n  // parse major chunks\n  after = byClause(after)\n  if (isGood(after, options)) {\n    return post(after)\n  }\n  // perform some modifications\n  after = safeCut(after)\n  if (isGood(after, options)) {\n    return post(after)\n  }\n  // really give it a go\n  after = hardCut(after)\n  if (isGood(after, options)) {\n    return post(after)\n  }\n  // atleast we tried\n  after = lastTry(after)\n  if (isGood(after, options)) {\n    return post(after)\n  }\n  // console.log(after.text())\n  // count += 1\n  // console.log(count)\n  // console.log(after.match('#PastTense').text())\n  // console.log(after.text())\n  // console.log('\\n')\n  return ''\n}\nmodule.exports = doSentence\n","const bad = [\n  'living',\n  'births',\n  'former',\n  'deceased',\n  'missing',\n  'with',\n  'descent',\n  'award',\n  'winners',\n  'nominees',\n  'alumni',\n  'other'\n].map((str) => new RegExp(`\\\\b${str}\\\\b`, 'i'))\n\nconst good = ['male', 'female'].map((str) => new RegExp(`\\\\b${str}\\\\b`, 'i'))\n\nconst like = ['male', 'female', 'century'].map((str) => new RegExp(`\\\\b${str}\\\\b`, 'i'))\n\nconst dislike = ['people', 'place', 'from', 'in', 'people from'].map(\n  (str) => new RegExp(`\\\\b${str}\\\\b`),\n  'i'\n)\n\nmodule.exports = {\n  good: good,\n  bad: bad,\n  like: like,\n  dislike: dislike\n}\n","const { like, dislike, good, bad } = require('./regs')\nconst hasYear = /[0-9]{4}/\nconst isPlural = /s$/\n\nconst fromCategory = function (doc) {\n  let cats = doc.categories()\n\n  // try to focus on the best ones, first\n  let tmp = cats.filter((cat) => {\n    return good.find((reg) => reg.test(cat))\n  })\n  if (tmp.length > 0) {\n    cats = tmp\n  }\n\n  // remove bad ones\n  cats = cats.filter((cat) => {\n    if (bad.find((reg) => reg.test(cat))) {\n      return false\n    }\n    if (hasYear.test(cat)) {\n      return false\n    }\n    return true\n  })\n\n  if (cats.length === 0) {\n    return ''\n  }\n  // look at sorting by preferences\n  tmp = cats.filter((cat) => {\n    return like.find((reg) => reg.test(cat))\n  })\n  if (tmp.length > 0) {\n    cats = tmp\n  }\n  // remove disliked ones\n  tmp = cats.filter((cat) => {\n    // not a plural ending\n    if (isPlural.test(cat) === false) {\n      return false\n    }\n    // just one word\n    if (cat.slice(' ').length === 1) {\n      return false\n    }\n    return dislike.find((reg) => reg.test(cat)) === undefined\n  })\n  if (tmp.length > 0) {\n    cats = tmp\n  }\n\n  // sort them by most words\n  cats = cats.sort((a, b) => {\n    let aWords = a.split(' ').length\n    let bWords = b.split(' ').length\n    if (aWords > bWords) {\n      return -1\n    } else if (aWords < bWords) {\n      return 1\n    }\n    return 0\n  })\n  // console.log(cats)\n\n  return cats[0]\n}\nmodule.exports = fromCategory\n","const nlp = require('compromise')\n\nconst useAn = function (str) {\n  const a_regexs = [\n    /^onc?e/i, //'wu' sound of 'o'\n    /^u[bcfhjknq-t][aeiou]/i, // 'yu' sound for hard 'u'\n    /^eul/i\n  ]\n  for (let i = 0; i < a_regexs.length; i++) {\n    if (a_regexs[i].test(str)) {\n      return false\n    }\n  }\n  //basic vowel-startings\n  if (/^[aeiou]/i.test(str)) {\n    return true\n  }\n  return false\n}\n\n// 'American songwriters' to 'an American songwriter'\nconst changeCat = function (cat, options) {\n  let c = nlp(cat)\n  c.nouns().toSingular()\n  // add article to the front\n  if (options.article) {\n    let article = 'A'\n    // let noun = c.nouns(0)\n    if (useAn(cat) === true) {\n      // console.log(c.nouns(0))\n      // article = c.nouns(0).json({ terms: false })[0].article || article\n      article = 'An'\n    }\n    let first = c.terms(0)\n    if (first.has('#ProperNoun') === false) {\n      first.toLowerCase()\n    }\n    c.prepend(article)\n  }\n  // remove any parentheses\n  c.parentheses().remove()\n  return c.text()\n}\nmodule.exports = changeCat\n","const chooseCat = require('./01-choose')\nconst change = require('./02-change')\n\nconst byCategory = function (doc, options) {\n  let cat = chooseCat(doc, options)\n  if (!cat) {\n    return ''\n  }\n  return change(cat, options)\n}\nmodule.exports = byCategory\n","const nlp = require('compromise')\nconst fromTemplate = require('./template')\nconst fromSentence = require('./sentence')\nconst fromCategory = require('./category')\n\nconst defaults = {\n  article: true,\n  template: true,\n  sentence: true,\n  category: true,\n  max: 80,\n  min: 3\n}\n\nconst seemsGood = function (txt, options) {\n  return txt && txt.length > 5 && txt.length < options.max\n}\n\nconst plugin = function (models) {\n  // add a new method to main class\n  models.Doc.prototype.summary = function (options) {\n    let doc = this\n    options = options || {}\n    options = Object.assign({}, defaults, options)\n\n    // generate from {{short description}} template\n    let txt = ''\n    if (options.template) {\n      txt = fromTemplate(doc, options)\n      if (seemsGood(txt, options)) {\n        return txt.trim()\n      }\n    }\n    // generate from first-sentence\n    if (options.sentence) {\n      txt = fromSentence(doc, options)\n      if (seemsGood(txt, options)) {\n        return txt.trim()\n      }\n    }\n    if (options.category) {\n      return fromCategory(doc, options)\n    }\n    return ''\n  }\n\n  // should we use 'it', 'he', 'they'...\n  models.Doc.prototype.article = function () {\n    let txt = ''\n    // prefer the 2nd sentence\n    if (this.sentence(1)) {\n      txt = this.sentence(1).text()\n    } else {\n      txt = this.sentence(0).text()\n    }\n    let doc = nlp(txt)\n    let found = doc.match('(#Pronoun|#Article)').eq(0).text().toLowerCase()\n    return found || 'it'\n  }\n\n  // was event in past? is person dead?\n  models.Doc.prototype.tense = function () {\n    let txt = this.sentence().text()\n    let doc = nlp(txt)\n    let copula = doc.match('#Copula+').first()\n    if (copula.has('was')) {\n      return 'Past'\n    }\n    let vb = doc.verbs(0)\n    if (vb.has('#PastTense')) {\n      return 'Past'\n    }\n    if (doc.has('will #Adverb? be') || doc.has('(a|an) (upcoming|planned)')) {\n      return 'Future'\n    }\n    return 'Present'\n  }\n}\nmodule.exports = plugin\n"],"names":["global","factory","module","this","chars","split","makeId$2","str","text","i","Math","floor","random","length","_id","compact","a","b","c","d","e","f","g","h","I","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","unicode","Object","keys","forEach","killUnicode$3","join","unicode_1","periodAcronym","oneLetterAcronym$1","noPeriodAcronym","lowerCaseAcronym","isAcronym$4","test","isAcronym_1","killUnicode$2","isAcronym$3","hasSlash$1","clean","toLowerCase","trim","original","replace","clean_1","reduced","reduce$1","normalize","reduce","startings","endings","hasSlash","hasApostrophe","hasAcronym","minusNumber","shortYear","parseTerm$1","pre","post","found","after","parsed","word","alias","parse$3","_01Case","exports","titleCase","upperCase","toUpperCase","toTitleCase","isUpperCase","isTitleCase","_02Punctuation$1","startQuote","endQuote","hasPost","punct","indexOf","hasPre","hasQuote","hasQuotation","hasComma","hasPeriod","hasExclamation","hasQuestionMark","hasEllipses","hasSemicolon","hasHyphen","hyphen","hasDash","hasContraction","Boolean","implicit","addPunctuation","_03Misc","editDistance","strA","strB","aLength","bLength","limit","abs","matrix","a_index","b_index","cost","min","shouldUpdate","fuzzyMatch","minLength","steps","max","relative","similarity","_fuzzy","fuzzy","wrapMatch","doesMatch$1","reg","index","id","anything","start","end","undefined","hasOwnProperty","soft","root","score","tag","tags","method","regex","fastOr","choices","operator","every","some","result","negative","_doesMatch","doesMatch","isAcronym$2","boring","isAcronym","isImplicit","isKnown","setRoot","world","transform","transforms","Plural","toSingular","Verb","Negative","Infinitive","tense","PastTense","Gerund","PresentTense","Participle","Actor","toInfinitive","_04Text","killUnicode$1","hasSpace$1","textOut","options","showPre","showPost","before","normal","titlecase","ProperNoun","Acronym","lowercase","acronyms","whitespace","last","punctuation","abbreviations","Abbreviation","_05Json$1","boringTags","Auxiliary","Possessive","rankTags$1","term","tagSet","sort","lineage","isA","_bestTag","rankTags","jsonDefault","offset","bestTag","json","assign","methods$d","fns$3","isClientSide","window","document","padEnd","width","toString","logTag","reason","console","log","logUntag","isArray","arr","prototype","call","charAt","substr","fns$2","addTag","tagset","isVerbose","down","unTag","notA","addTags","add$1","fns$1","lowerCase","titleCase$3","unTag$1","untagAll","unTag_1","canBe$1","enemies","canBe_1","add","canBe","tagSafe","makeId$1","parseTerm","methods$c","tagMethods","Term$3","constructor","String","obj","prev","next","set","clone","Term_1","_01Utils$1","terms","cache","pool","get","error","push","isShallow","buildFrom","newTerms","map","lastTerm","hasId","wantId","lastId","wordCount","filter","fullSentence","len","_02Text","trimEnd","isFirst","isLast","isFull","txt","_03Change","_04Insert","endOfSentence","combinePost","match","addWhitespace$1","beforeTerms","newTerm","stitchIn$1","lastBefore","lastNew","afterId","afterTerm","beforeId","unique$6","list","appendPhrase","newPhrase","doc","toStretch","docs","concat","parents","parent","shouldChange","append$1","hasSpace","addWhitespace","stitchIn","main","unique$5","joinPhrase","starterId","prepend$1","shrinkAll","deleteLength","phrase","find","deletePhrase$1","_delete","append","prepend","deletePhrase","delete","firstLength","tmp","splitOn","findIndex","slice","_05Json","res","_06Lookahead","lookAhead","regs","getAfter","all","lookBehind","getBefore","methods$b","failFast$2","optional","_02FailFast","_matchLogic","getGreedy","state","endReg","start_i","phrase_length","count","greedyTo","nextReg","isEndGreedy","greedy","tmpReg","doOrBlock","skipN","block","wasFound","cr","w_index","extra","foundBlock","keepGoing","doAndBlock","longest","allDidMatch","allWords","tryTerm","getGroup","term_index","name","groups","groupId","termId","group","makeId","logic","tryHere","hasGroup","previousGroup","named","haveNeeds","remain","skipto","skipNum","startAt","nextRegMatched","nextTerm","foundNeg","_03TryMatch","postProcess$3","matches","atEnd","_04PostProcess","bySlashes","byParentheses","byWord","isBlock","isReg","cleanUp","parseBlocks$1","final","_01ParseBlocks","hasMinMax","andSign","captureName","RegExp","titleCase$2","stripStart","stripEnd","stripBoth","parseToken$1","groupType","exec","Number","_02ParseToken","nameGroups","tokens","convert","current","token","doFastOrMode","shouldPack","oneOf","postProcess$2","opts","_03PostProcess","parseBlocks","parseToken","postProcess$1","isArray$2","byArray","blocks","fromDoc","ids","idBlocks","addOptions","syntax$1","input","matchSyntax","idLookup$1","blocklist","foundAll","idLookup_1","failFast$1","tryMatch","postProcess","syntax","idLookup","matchAll$2","matchOne","_01MatchAll","matchAll$1","notMatch$1","ts","not","matchAll","notMatch","justOne","has","results","previous","can","methods$a","matchMethods","Phrase$3","defineProperty","enumerable","writable","value","aliases$1","Phrase_1","Pool$3","words","remove","merge","stats","Pool_1","linkTerms$2","_linkTerms","initSplit","hasSomething","isAcronym$1","hasEllipse","newLine","hasLetter","startWhitespace","naiive_split","lines","testIsAcronym","suffix","testHasEllipse","testHasLetter","prefixHasLetter","isSentence","abbrevs","prefixContext","lastWord","splitSentences$1","sentences","chunks","splits","ws","_01Sentences","wordlike","isBoundary","naiiveSplit","isSlash","notWord","reg2","combineRanges","startRange","endRange","combineSlashes","splitHyphens","hyphens","whichDash","isArray$1","splitWords","carry","_02Words","Term$2","Phrase$2","Pool$2","linkTerms$1","splitSentences","splitTerms","fromText","phrases","_01Tokenizer","Term$1","Phrase$1","Pool$1","linkTerms","fromJSON$1","fromJSON_1","_version","entity","nouns$2","Noun","Singular","Person","FirstName","MaleName","FemaleName","LastName","NickName","Honorific","Place","Country","City","Region","Address","Organization","SportsTeam","School","Company","Uncountable","Pronoun","Activity","Unit","Demonym","verbs$2","Imperative","FutureTense","Copula","Modal","PerfectTense","Pluperfect","PhrasalVerb","Particle","values$1","Value","Ordinal","Cardinal","Fraction","RomanNumeral","TextValue","NumericValue","Money","Percent","misc$3","Adjective","Comparable","Comparative","Superlative","NumberRange","Adverb","Date","Month","WeekDay","Timezone","Time","Determiner","Conjunction","Preposition","QuestionWord","Currency","Expression","Url","PhoneNumber","HashTag","AtMention","Emoji","Emoticon","Email","Condition","colorMap","addColors","color","_color","unique$4","inferIsA$1","_isA","unique$3","inferNotA$1","key","_notA","inferLineage","_lineage","inferColor","inferIsA","inferNotA","validate","inferTags$1","inference","nouns$1","verbs$1","values","misc$2","inferTags","addIn","build","_data","seq","toAlphaCode","fromCharCode","fromAlphaCode","charCodeAt","encoding","symbols","nodes","symCount","syms","indexFromRef","toArray","unpack$2","unpack_1$1","unpack_1$1$1","Array","efrtUnpack_min","misc$1","g8","vh1","q1","q2","q3","q4","her","his","their","themselves","your","our","my","its","lexData","unpack$1","misc","fancy","lex","TextOrdinal","plural","toPlural","conj","conjugate","adjectives","hasCompound","addWords","wordsObj","multi","buildOut","lexicon","unpack_1","addIrregulars$1","nouns","irregulars","verbs","inf","forms","addIrregulars_1","plurals","addendum","alga","alumna","alumnus","analysis","antenna","appendix","avocado","axis","bacillus","barracks","beau","bus","cactus","chateau","child","circus","clothes","corpus","criterion","curriculum","database","deer","diagnosis","echo","embargo","epoch","foot","formula","fungus","genus","goose","halo","hippopotamus","larva","leaf","libretto","loaf","man","memorandum","modulus","mosquito","mouse","nebula","nucleus","octopus","opus","ovum","ox","parenthesis","person","phenomenon","prognosis","quiz","radius","referendum","rodeo","sex","shoe","sombrero","stimulus","stomach","syllabus","synopsis","tableau","thesis","thief","tooth","tornado","tuxedo","vertebra","mapping$1","prt","perf","pst","fut","pres","pluperf","conjugations","act","ache","age","aim","arise","babysit","ban","be","beat","become","begin","being","bend","bet","bind","bite","bleed","blow","boil","brake","break","breed","bring","broadcast","budget","burn","burst","buy","catch","choose","cling","come","compete","creep","cut","deal","develop","die","dig","dive","do","draw","dream","drink","drive","drop","eat","edit","egg","fall","feed","feel","fight","flee","fling","fly","forbid","forget","forgive","free","freeze","give","go","grow","guide","hang","have","hear","hide","hit","hold","hurt","ice","imply","is","keep","kneel","know","lay","lead","leap","leave","lend","lie","light","loose","lose","make","mean","meet","miss","patrol","pay","prove","puke","put","quit","read","ride","reside","ring","rise","rub","run","say","seat","see","seek","sell","send","sew","shake","shave","shed","shine","shoot","show","shut","sing","sink","sit","ski","slay","sleep","slide","smash","sneak","speak","speed","spend","spill","spin","spit","spread","spring","stand","steal","stick","sting","stink","stream","strew","strike","suit","sware","swear","sweep","swim","swing","take","teach","tear","tell","think","thrive","tie","undergo","understand","upset","wait","wake","wear","weave","wed","weep","win","wind","withdraw","wring","write","full","conjugations_1","endsWith$2","repl","pr","pa","gr","ar","suffixes$2","suffixes$1","posMap","doTransform","pos","checkSuffix$1","_01Suffixes","hasY","generic","_02Generic","checkSuffix","genericFill","conjugate$4","conjugate_1$1","do_rules$1","dont_rules$1","irregulars$5","nice","late","hard","inner","outer","far","worse","bad","good","big","large","transforms$2","to_superlative","toSuperlative","do_rules","dont_rules","irregulars$4","grey","gray","green","yellow","red","well","sad","transforms$1","to_comparative","toComparative","fns","conjugate$3","sup","comp","adjectives$2","suffixes","_rules$2","rules$5","addE","trySuffix","pluralize","_rules$1","rules$4","invertObj","invert","toSingular_1","rules$3","to","_transform","guessVerb","_guess","rules$2","guess","guessTense","three","two","one","toInfinitive$3","irregs","rule","toInfinitive_1$1","defaultTags","unpack","addIrregulars","inferTagSet","irregulars$3","World$1","verbose","bool","wordObj","cleaned","addConjugations","addPlurals","fn","taggers","compounds","postProcessors","JSON","parse","stringify","w2","World_1","_01Utils","from","addParent","reverse","doShallow","wordcount","_02Accessors","first","eq","firstTerms","firstTerm","lastTerms","termList","num","getGroups","allGroups","getOneName","target","sentence","_03Match","cacheRequired$1","needTags","needWords","failFast","_cache","_failFast","parseSyntax","checkCache","if","ifNo","lookAfter","lookBefore","befores","hasAfter","hasBefore","_04Tag","tagTerms","safe","tagList","_setTag","setTag","why","_05Loops","detachParent","sub","_06Lookup","tokenize$4","buildTree","val","more","rest","fastLookup","everyTerm","_lookup","lookup","isObject","isObj","byVal","lookUp","_07Cache","uncache","_01Replace","tokenize$3","titleCase$1","replaceWith","keepTags","newPhrases","keepCase","tmpDoc","tagger","oldTags","_02Insert","tokenize","makeNew","insertAfter","insertAt","insertBefore","arguments","arg","toRemove","_01Text","shouldTrim","showFull","trimPre","trimPost","_02Json","termOffsets","elapsed","offsets","calcOffset","_offset","jsonDefaults","setOptions","unique","frequency","freq","already","data","_03Out","_debug","reset","css","blue","magenta","cyan","black","logClientSide","cli","tagString","debug","topk$1","_topk","topk","out","_01Sort","methods$9","alpha","left","right","byFreq","counts","case","sortSequential","order","alphabetical","seqNames","sequence","sequential","chron","chronological","_02Normalize","killUnicode","isPunct","quotes","methods$8","termArr","quotations","adverbs","_methods","methods$7","defaults","emoji","contractions","parentheses","possessives","honorifics","mapping","medium","heavy","strip","contraction","expand","unwrap","possessive","_03Split","foundEm","parts","splitAfter","splitBefore","segment","_04Case","eachTerm","toCamelCase","_05Whitespace","hyphenate","dehyphenate","deHyphenate","toQuotations","toQuotation","toParentheses","_06Join","removed","increase","_07Contract","postPunct","setContraction","contract","methods$6","methods$5","emojis","atmentions","atMentions","phoneNumbers","money","places","organizations","clauses","entities","yup","people","ignore","things","topics","_simple","underOver","tryMultiple","checkLexicon$1","foundWords","noPrefix","_01Lexicon","apostrophes","perSec","checkPunctuation","endChar","_02Punctuation","startsWith","romanNumeral","romanNumValid","checkRegex$1","_03Prefixes","Adj$1","Inf$1","Pres$1","Sing$1","Past$1","Exp","Actor$1","Noun$1","Last$1","endsWith$1","Adj","Inf","Pres","Sing","Past","Avb","Plrl","Vb","Last","suffixMap$1","ea","ia","ic","ly","oed","ued","xed","azy","eer","ped","ffy","ify","ing","ize","lar","mum","nes","nny","oid","ous","que","rol","sis","zes","amed","aped","ched","lked","nded","cted","dged","akis","cede","chuk","czyk","ects","ends","enko","ette","fies","fore","gate","gone","ices","ints","ines","ions","less","llen","made","nsen","oses","ould","sson","tage","teen","tion","tive","tors","vice","tized","urned","eased","ances","bound","ettes","fully","ishes","ities","marek","nssen","ology","ports","rough","tches","tieth","tures","wards","where","auskas","keeper","logist","teenth","opoulos","borough","sdottir","endsWith","suffixMap","endRegexs","char","knownSuffixes","checkRegex","_04Suffixes","emoticons","emojiReg","emoticon","isCommaEmoji","raw","isEmoticon","tagEmoji","_05Emoji","lookups","_01Init","afterThisWord","it","there","because","but","who","when","you","very","old","never","beforeThisWord","me","only","him","were","took","himself","went","jr","afterThisPOS","beforeThisPOS","markov$1","beforeThisPos","afterThisPos","markov","afterKeys","beforeKeys","checkNeighbours","foundTag","_01Neighbours","hasNumber","checkCase","_02Case","hasPrefix","prefix","checkPrefix","stem","_03Stem","isPlural$8","isSingular$1","isPlural_1$2","isSingular","isPlural","noPlurals","rules$1","notPlural","notSingular","checkPlural","_04Plurals","orgWords$1","orgWords","maybeOrg","Comma","tagOrgs","_05Organizations","oneLetterAcronym","periodSeperated","oneLetterWord","A","checkAcronym","_06Acronyms","step","neighbours","fallbacks$1","_02Fallbacks","hasNegative","irregulars$2","wont","cant","cannot","dont","dun","doAint","noun","checkNegative$1","_01Negative","contraction$1","easy","ll","ve","re","checkApostrophe$1","_02Simple","irregulars$1","wanna","gonna","im","alot","ive","imma","whered","whend","howd","whatd","dunno","brb","gtg","irl","tbh","imo","til","rn","twas","checkIrregulars$1","_03Irregulars","hasApostropheS","banList","that","hereThere","here","everywhere","isPossessive","twoTerm","isHas","checkPossessive$1","_04Possessive","hasPerfect","useDid","how","what","checkPerfect$1","_05PerfectTense","isRange","timeRange","checkRange$1","_06Ranges","french","qu","checkFrench$1","_07French","checkLexicon","tokenize$2","checkNegative","checkApostrophe","checkIrregulars","checkPossessive","checkPerfect","checkRange","checkFrench","isNumber","isOrdinal","isTime","createPhrase","contractions$1","_03Contractions","hasWord","hasTag","miscCorrection","notIf","fixMisc$1","unique$2","_unique","list$5","_01Misc","_ambig","adverbAdjective","personDate","personMonth","personAdjective","personVerb","personPlace","personNoun","ambig$4","dates","list$4","_02Dates","ambig$3","adjectives$1","list$3","_03Adjective","_04Noun","ambig$2","_05Adverb","_06Value","ambig$1","list$2","_07Verbs","list$1","_08Place","_09Org","ambig","months","_10People","unique$1","matches$1","cacheRequired","allLists","lists","newM","enumerated","required","matches_1","hasEvery","chances","runner$1","allChances","worthIt","tryDoc","runner_1","fixMisc","runner","corrections$1","_04Correction","init","fallbacks","corrections","tagger$1","_02Tagger","addMethod$a","Doc","Abbreviations","stripPeriods","addPeriods","addMethod$9","Acronyms","addMethod$8","commas","conjunctions","condition","tooLong","Clauses","addMethod$7","Contractions","contracted","isTitlecase","expanded","isExpanded","isContracted","addMethod$6","beforeLast","conjunction","hasOxford","Lists","items","hasOxfordComma","addOxfordComma","needsComma","removeOxfordComma","nounList","adjList","verbList","noPlural","hasPlural$1","hasPlural_1","hour","heir","heirloom","honest","honour","honor","uber","an_acronyms","a_regexs","makeArticle","firstLetter","getArticle$1","isPlural$7","_rules","rules","endS","isPlural$6","isPlural_1$1","exceptions","he","she","they","we","toPossessive$1","toPossessive_1","parse$2","parse_1","hasPlural","getArticle","isPlural$5","toPossessive","parse$1","methods$4","article","agree","an","adj","methods_1","methods$3","addMethod$5","Nouns","keep_anaphora","open","close","addMethod$4","Parentheses","addMethod$3","Possessives","pairs","hasOpen","addMethod$2","Quotations","want","toInfinitive$2","verb","toInfinitive_1","findNoun","vb","isPlural$4","auxiliary","isPlural_1","toInfinitive$1","isPlural$3","toNegative$1","toNegative_1","getSubject$2","behind","lastNoun","getSubject_1","getSubject$1","parseVerb$1","adverb","particle","subject","adverbAfter","isPlural$2","toBe$1","isI","isNegative","toBe_1","doModal$1","doModal_1","toBe","doModal","isPlural$1","conjugate$2","og","past","infinitive","bePlural","space","conjugate_1","conjugate$1","useParticiple$1","toParticiple$1","participle","useParticiple","toParticiple","toNegative","parseVerb","getSubject","makeNeutral","methods$2","advb","toPastTense","toPresentTense","toFutureTense","toGerund","noAux","isPositive","isImperative","toPositive","methods$1","addMethod$1","Verbs","negate","addMethod","People","subsets","subclass","extend$1","addFn","Subset","methods","selections","tokenize$1","extend","Doc$1","aliases","untag","and","onlyIf","Doc_1","lexiconStep","smallTagger","tiny","fromJSON","version","World","Phrase","Term","Pool","tinyTagger","parseMatch","instance","worldInstance","nlp","import","load","plugin","src","fromTemplate","tmpl","template","description","preProcess","_00PreProcess","findPivot","_01Pivot","byClause","_02ByClause","safeCuts","_03SafeCuts","isIndependent","hardCuts","second","pop","_04HardCuts","lastTry","_05LastTry","isGood","_isGood","require$$0","require$$1","require$$2","require$$3","safeCut","require$$4","hardCut","require$$5","require$$6","require$$7","doSentence","pivot","like","dislike","hasYear","fromCategory","cats","categories","cat","aWords","bWords","_01Choose","useAn","changeCat","_02Change","chooseCat","change","byCategory","category","fromSentence","seemsGood","models","summary","copula"],"mappings":"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"}